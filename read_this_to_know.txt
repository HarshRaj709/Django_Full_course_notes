                                                      INDEX

      gs5------> starting include() method , HttpResponse

      gs6------> more about include() method

      gs7------> rendering external Templates {Templates under Project}

      gs8------> creating seperate folder of different apps under {Templates under Projects}

      gs9------> Dynamic Pages by return dictionary in function

      gs10-----> DTL(django templates Language) loops - for, else-if

      gs11-----> templates under apps

      gs12-----> merging previous 2 approaches

      gs13-----> Static under Project

      gs14-----> static under apps                   

      gs15-----> merging both previous approaches of static    

      gs16-----> extend tag usage          

      gs17-----> url tags {% url 'name' %}

      Project------> Portfolio

      gs18-----> using database via models.py

      gs19----->  accessing data from database 1 by 1 through objects.get(pk=id)

      gs20-----> ADMIN application ///creating superUser

      gs21-----> Rigister model class in admin pannel

      gs22-----> creating table view format in admin pannel

      gs23-----> Django Forms > Form api

      gs24-----> Configure id attribute and label tag

      gs25-----> CHANGING FIELDS ORDERS

      gs26-----> Practise of previous approach and label,tags method of forms

      gs27-----> using for loop in field and form hidden field in django

      gs28-----> Brief knowledge of Forms in django

      gs29-----> Form using 'Post' method

      gs30-----> how to show stored data into other template

      gs31-----> Practise of above methods

      gs32-----> forms ke under ke CharField,IntegerField(inke under ke functions)

      gs33-----> how to verifiy and clean data in forms.py for more organised views.py

      gs34-----> how to validate whole forms.py at single time

      gs35-----> HTML,CSS AND FORMS ALL VALIDATION TYPE,, PRACTISE PROJECT

      gs36-----> BUILT IN VALIDATORS IN DJANGO

      gs37-----> password validation

      gs38-----> Isme error message ko css ke through target krna sikhnge

      gs39-----> isme humne aur forms ke labels ko target krna sikha h

      gs40-----> storing data to database from form.py

      gs41-----> creating and saving data of form by model.py

      gs42-----> Practise to store data by model.py form

      gs43-----> applying validators on form which was created by models.py

      gs44-----> DYNAMIC URLS IN DJANGO

      gs45-----> how to use Dynamic Urls in apps

      gs46-----> Custom Path converter

      gs47-----> CRUD PROJECT (CREATE READ UPDATE DELETE)

      gs48-----> Models ke through bne form ki fields ki properties

      gs49-----> Form inheritence

      gs50-----> Messages Framework in django

      gs51-----> User Authentication system by Built-in django Form

      gs52-----> solving the above  Problem

      gs53-----> Creating Full Signup,login, profile page

      gs54-----> Practise

      gs55-----> added password changing facility Profile Data show and update

      gs56-----> Adding Admin rights for admin

      gs57-----> Giving specific User, special permissions

                  Blog Project

      gs58-----> Working with Cookies in django

      gs59-----> Session Framework

      gs60-----> Special Methods in session Framework





------------------------------------------------------------------------------------------------------------------

SOME IMPORTANT QUESTIONS----

      Ques 1. what are the models in django and why we use them?
      
      Ans. In Django, models are a fundamental part of the framework, and they serve as the abstraction layer that 
      represents the structure and schema of your database. Models define the data and the relationships between 
      data in your application, making it easier to work with databases and query data.

      Ques 2. from django import forms
            from .models import Image

            class ImageForm(forms.ModelForm):
            class Meta:
                  model = Image
                  fields = '__all__'  #['photo','date']
                  labels = {'photo':''}

            why to use Meta class here?

      Ans 2. Yes, it will work without the Meta class. However, the Meta class is used to define metadata for the 
      form and is recommended to be used for better organization and readability of the code. The Meta class is 
      used to specify the model that the form is based on, the fields to be included in the form, and any 
      additional metadata such as labels, help texts, etc.


      Ques 3. what do you mean by django ORM?

      Ans.3 Django ORM, which stands for Object-Relational Mapping, is a component of the Django web framework that provides 
            an abstraction layer for interacting with relational databases. It allows you to work with your database using 
            Python objects and methods rather than writing SQL queries directly.


      Ques 4. How to add current date and time in Database automatically?
      Ans.4 We can do this by adding 'auto_now_add=True'

                  created_at = models.DateTimeField(auto_now_add=True)

      Ques 5. Difference between return queryset and not return queryset with example?
      Ans.5 The primary difference between returning a queryset and not returning a queryset in Django methods 
            lies in whether the method modifies the existing queryset or creates a new one.

            Some methods in Django, like update(), delete(), and get(), do not return a queryset. 
            Instead, they perform an action directly on the database or retrieve a single object. 
            These methods modify the database or return an instance of the model but don't provide a new 
            queryset for further chaining.

      Ques 6. what do you mean by CASCADE ? in model relationships.
      Ans.6 In Django model relationships, the `on_delete` parameter is required for `ForeignKey` and 
            `OneToOneField` fields, and it specifies what should happen when the referenced object is deleted. 
            One of the options for the `on_delete` parameter is `models.CASCADE`. 

            When `on_delete=models.CASCADE` is used, it means that when the referenced object 
            (the object on the "one" side of the relationship) is deleted, all related objects 
            (objects on the "many" side of the relationship) will be deleted as well. 
            It essentially cascades the deletion from the referenced object to all dependent objects.


                  from django.db import models

                  class Author(models.Model):
                  name = models.CharField(max_length=100)

                  class Book(models.Model):
                  title = models.CharField(max_length=200)
                  author = models.ForeignKey(Author, on_delete=models.CASCADE)
            

      In this example, if an `Author` instance is deleted, all the `Book` instances related to that author 
      (via the `ForeignKey` relationship) will also be deleted automatically due to `on_delete=models.CASCADE`. 
      This ensures data consistency and avoids leaving orphaned records in the database.

      It's important to choose the `on_delete` behavior carefully based on the requirements of your application 
      and how you want the database to handle cascading deletions in the context of your data model. 
      Other options for `on_delete` include `models.PROTECT` (prevent deletion of the referenced object), 
      `models.SET_NULL` (set the foreign key to NULL), and more.


      Ques 7. How to register all fields name of model in admin.py at once?
      Ans 7.      from django.contrib import admin
                  from .models import Student

                  # Register your models here.
                  @admin.register(Student)
                  class Studentadmin(admin.ModelAdmin):
                        list_display = [field.name for field in Student._meta.fields]


      Ques 8. How to show data in template which was created through TemplateView ?
      Ans 8. Just add model name where all data is stored.

            then use method get_context_data and then pass it to template..

                  class Success(TemplateView):
                        model = Student
                        template_name = 'school/success.html'

                        def get_context_data(self, **kwargs):
                              context = super().get_context_data(**kwargs)
                              context['all'] = self.model.objects.all()
                              return context



                        --------------------> git uploading Steps <-------------------

      To upload your project to Git through Visual Studio Code (VS Code), follow these general steps:

      1. **Initialize a Git Repository:**
      If your project is not already a Git repository, you need to initialize one. 
      Open the terminal in VS Code and navigate to your project's directory. Run the following commands:

      ---------->git init

      2. **Stage and Commit Changes:**
      Add your files to the staging area and commit them with meaningful messages. Use the following commands:

      
      ---------->git add .
      ---------->git commit -m "Initial commit"


      3. **Create a New Repository on GitHub:**
      Go to the GitHub website and create a new repository. 
      Follow the instructions to create an empty repository without a README or 
      .gitignore file, as you've already initialized your repository.

      4. **Set the Remote Repository:**
      Copy the URL of your newly created GitHub repository. In the terminal, set the remote repository:

      
      ----------->git remote add origin <repository_url>
      

      Replace `<repository_url>` with the URL you copied from GitHub.

      5. **Push the Code to GitHub:**
      Push your code to GitHub using the following command:

      
      git push -u origin main
      

      This command pushes the code to the master branch. 
      If you are working on a different branch, replace `master` with your branch name.

      Now, your project should be uploaded to GitHub. You can check your GitHub repository to verify that your 
      code is there.

      Note: Make sure to configure Git with your username and email if you haven't already. 
      You can set them using the following commands:

      --------->git config --global user.name "Your Name"
      --------->git config --global user.email "your.email@example.com"
      

      Remember to replace "Your Name" and "your.email@example.com" with your actual name and email address.





STEP-1: env2\scripts\activate

STEP-2: django-admin startproject gs13

STEP-3: cd gs13

STEP-4: python manage.py startapp course


                                  gs5

humne gs5 me include() ko dekha isme
iske through hum multiple apps ko easily handle kr sakte h 


                                    gs6

isme humne include() ka 2nd method dekha h


                                gs7-external templates wala folder
isme humne templates ko lgana sikha h include() ke through .......... ab dekho isme kya problem h ki agar humari files html ki 
jada ho jayegi to humko problem hoga bahut files ke arrangement me to isi problem ko solve krne ke liye hum seperate folders 
bnadenge hr ek application ke liye


                                gs8
ab isme isi problem ko solve krenge.............  isme kuch nhi krna h bus apps ke views.py me function me humko 
templates ko find krne ke liye pura path dalna h jese 'course/course_home.html'


                                gs9
abhi tk humne static pages hi bnaye the ab hum dynamic pages bnayenge usme kuch krna nhi h jada bus views me 
hum ek disctionary add krdenge aur uske key ko html page me call krenge ' {{cname}}'
course = {'cname':'HARSHRAJ'}
    return render(request,'course/course_home.html',context=course)

                                gs10
isme humne DTL (DJANGO TEMPLATE LANGUAGE) ke filters ke bare me sikha sath hi if else-for loop ke bare me
sikha h.jisse hum web page me alag alag kaam kr saktee h

                                gs11-templates under apps

isme humne sikha ki kese hum apne apps ke under hi unke templates ko store kr sakte h....
simply isme humko bus TEMPLATES_DIR nhi bnana padta h apne main settings.py ke under ye already linked rhta h.
ab iske aage hum dekhnge ki kese dono concepts {seperate templates folder under project aur templates under
 apps ko combine krenge}


                                gs12-merging previous 2 approaches
isme humne dono approches ko merge krdiya h. simple tha bus isme ek extra views.py bnegi 
project ke under same name wale folder ke under uske through hum usko access krenge
aur phir uski link ko urls.py me dal denge import krke views ko
                   ''' ab isme 1 problem h ki views.py 1 extra file bnani pd rhi h humko
                   usko sahi krsakte h ki main name se app bna le usme hum apna home.py 
                   rakhle jese ki baki ki apps me kiya hua h  '''


                                gs13 - Static under Project
                                
isme humne static folder ke  bare seekha h. ki kese apni images/audio/video/css files ko 
hum arrange kr sakte h apne project me -----------  {static under project}

static ko connect krne ke liye -----STATICFILES_DIRS = [STATIC_DIR] --settings.py

humne image add kradiya h iske course section me

humne isme css bhi link krdi h

sabse phle doctype ke bad humko {% load static %}likhna handle
...uske bad humko jo bhi import krna h uske age bhi {% static %} likhna h.

<img src = '{% static "images/new.png" %}'>
<link rel = 'stylesheet' href = '{% static "css/style.css" %}'>
<script src = '{% static "js/all.js" %}'></script>


                                    gs14-static under apps
isme hum apps ke under hi unke static folders bnayenge
humne bna diya h but name collision ho rha h, kyoki humne static ke under sahi se 
folder nhi bnaye the but usko sahi krne ke liye humne name change krdiya tha,

but ab hum usko bhi sahi krenge.  krdiya sahi ek folder aur bna diya h humne {course/static/course/css/style.css}


                                    gs15- merging both previous approaches of static
    isme humne combine krna seekha h ki kese app ke under static ko project ke under ke static 
    ko use krte h. simple approach h bus {STATIC_DIR = os.path.join(BASE_DIR,'static')} likhna hota h 
    agar static project ke under wale ko connect krna h....
    app ke under wala to direct connected rhta h...


                                    gs16- extend tag usage

ye IMPORTANT chapter h ----- isme hum {extend tag} ka use krna sikhnge... matlab template inheritence
isse humari reuseability bdti h.
----> sabse phle 1 base.html bnao
----> isme humko blocks ko defined krna hota h---{% block title}---defaultcontent---{% endblock title %}
      default content ma kre to do chahe na do, ye overwrite ho sakta h child me.
----> phir kisi aur file ko inherit krne ke liye usme {% extends 'base.html' %}
----> isse parent templates ke sare blocks or tags child me inherit ho jayenge. ab jinme bhi changes 
      krna h unme krlo 
----> agar humko parent template ka bhi default use krna h aur child ka bhi to hum {{block.super}} ka
      use krte h. ----------{% block content %} {{block.super}} - ye humara defaiult value bhi le rha h aur khud ki bhi 
<h2>HELLO..  im home page</h2> {% endblock content %}

====> kafi kuch seekhne ko mila humk main command krna h block tags pr ki kese kya use ho rha h



                                          gs17 -url tags {% url 'name' %}
      isme hum hyper tags bnayenge using url tags of DTL... {% url 'specificname' %}
      phir uske name ko urls.py me store krte h
      path('abhum yha pe kuch bhi likh sakte h/',views.about,name = 'about')...
----> Agar hummko isko include() ke sath use krna h to humko include ke path ke under ke url me name 
      dalna hoga.. read comment for more clarification.

2nd method --> ye humara tb kaam krta h jb humne include() method ka use nhi kiya ho <li><a href="/about">about</a></li>
{IMP-} agar humko 2nd method ko include ke sath use krna h to --> <li><a href="/cor/cor/">course</a></li>
humko include ke under ke urls ko bhi dena hoga jese include('course.urls') to course le under, urls
      ke under ka link dena hoga 
      {PROBLEM WITH 2ND METHOD} --> isme hum link ko nhi badal sakte h, agr badlenge to sare jagaah sahi krna hoga

      isme humne tempalte inheritence me css bhi lga ke dekh li h


-------------------------------------------------------------------------------------------------------------

                                          project 1

      isme humne google fonts ko bhi add kiya hua h. ----> google fonts use krne ke liye search kro 
      fonts phir jo fonts acha lge usko select to add krlo phir uper right side corner me bag bna hua 
      hoga uspe se jakr usko=i link copy krlo then usko css attachment ki tarah lga do uski class bna kr 
      css file me usko lga do jha lgana ho

-----> Use ctrl+d to select all same text and edit them

-----> pip freeze- use this command to get the list of all the required packages to run this code.

-----> pip freeze > req.txt{filename} -- Use this command to store all requirement on file

-----> before uploding it to server we need to store all our static files at 1 place
Steps = go to settings.py 
        define STATIC_ROOT = os.path.join(BASE_DIR,'jha bi store krwana ho/')
                             os.path.join(BASE_DIR,'static/')


                        STEPS TO LAUNCH PROJECT ON PYTHONANYWHERE....................

      first of all open bash in python anywhere

      mkvirtualenv --python=/usr/bin/python3.9 env2   ---- to create virtual enviroment on pythonanywhere


      unzip project1             to unzip the files


      workon env2              ---------------> to activate virtual enviroment


      after that,install all requirments by our file

      after that open wsgi.py file -------------------> WSGI configuration file

      this will open 1 file, here you have to change the mysite with 'inner folder name' ----> project1

after that open settings.py file-----------------> now false Debug
                                                   now ALLOWED_HOST = ['*']
                                                   after that we have to collect all static files for this we have to run command on console
                                                   ------> python manage.py collectstatic
                                                   now again go to web page --- then go to static file and add there /static/
                                                   now add directory ---------> add static folder path there to get that open files locate static folder copy path and then paste it there

                                                   project update successfully ----> link ----> http://harshraj709.pythonanywhere.com/  

                                          

                                                      gs18 - using database via models.py
--->      ab isme hum databse ko use krna dekhenge ki kese connect krte h kese ORM ka use krke table bnate h....

sabse app bna lo uske bad uske models.py me class bnao uske through humari tables bnegi

          class hostel(models.Model):
                  hostel_room = models.IntegerField(primary_key=True)
                  stu_name = models.CharField(max_length=50)
                  stu_age = models.IntegerField()

      iske bad apne views.py me isko render krna hoga to uske liye sabse phle isko usme dalna h2

            from enroll.models import 'table name'
            ex.

                  from django.shortcuts import render
                  from enroll.models import hostel   // from .models import hostel

                  # Create your views here.
                  def home(request):
                  return render(request,'enroll/home.html')


                  def stu(request):
                  host = hostel.objects.all()
                  return render(request,'enroll/students.html',{'hos':host})


--->      python manage.py makemigration krne se humara migate ho jayega but koi changes nhi hoga 
--->      changes lane ke liye humko ----> python manage.py migrate   likhna hoga
--->      humlog ----> python manage.py showmigration krke dekh sakte h ki kitni files migrate hui h 
--->      agar humko code dekhna sql ka ki kese humari table bnti h kese data jata h usme to uske liye command h
          
          --->python manage.py sqlmigrate enroll 0001

            ab humne db app se data enter kr diya h aor usko retrieve kr rhe h html template me...



                                          gs19 - accessing data from database 1 by 1 through objects.get(pk=id)
      gs18 me hum sara data access kr rhe the ek bar me. {students.objects.all()}
      ab hum single single krenge uske liye function h {sudents.objects.get(pk=2)} pk= me jo row ka data chahiye uska number likhna hoga



                                          gs20 - ADMIN application

      isme ab hum admin pannel and 'super user' ke bare me dekhenge.....4
      syntax to create super user ---> python manage.py createsuperuser

      ---->Username (leave blank to use 'hp'): harshraj
            Email address: harshsahu709@gmail.com
            Password: harshsahu709
            Password (again): harshsahu709



                                          gs21 - Rigister model class in admin pannel

      ---->       phle migrate krna padega superuser bnane ke liye.. python manage.py migrate                                    
      ---->       sabse phle super user bna lo
      ---->       ab models.py me class bna lo
      ---->       ab admin.py me apna models.py ko import krke class ko register krlo

      Ex....      from django.contrib import admin
                  from .models import Student

                  # Register your models here.
                  admin.site.register(Student)

      ab hum apne admin pannel se hi sara data me {create read undo delete} CRUD operations perform krsakte h
      'isme 1 problem h ki admin pannel me table me [	Student object (3)  ] esse table show kr rha h
      jo ki probllem h, agar humko koi bhi data me CRUD operation krna h to phle khol ke check krna hoga

      isko sahi krne ke liye we will use     ------- __str__() method

      model.py ke class ke under hi likhna h

      Ex. ---->         from django.db import models

                        # Create your models here.
                        class Student(models.Model):
                        stuid = models.IntegerField()
                        stuname = models.CharField(max_length=10)
                        stuemail = models.EmailField(max_length=20)
                        stupass = models.CharField(max_length=20)

                        def __str__(self):
                              return self.stuname   //  if we try to stuid then it will show error [ '__str__ returned non-string (type int)' ]
                                                      to solve this error convert it to str()

                        abhi bhi ek problem h ki humare admin pannel me table me data show nhi ho rha h.
                        usko sahi krenge gs22 me

      humne 2 tables bnadi h isime [ students, teacher ]


                                    gs22-creating table view format in admin pannel
      
      isko krne ke liye humko apne admin.py me ek new class bnani padegi...

      class StudentAdmin(admin.ModelAdmin):
            list_display = ('stuid','stuname','stuemail','stupass')


      admin.site.register(Students,StudentAdmin)

----->   isme jada lines ka code bd rha h... km krne ke liye hum ['decorato'] ka use krenge

            @admin.register(Students)
            class StudentAdmin(admin.ModelAdmin):
            list_display = ('id','stuid','stuname','stuemail','stupass')


                             gs23 - Django Forms > Form api

----> create forms.py in app folder.
            from django import forms

            class studentRegistration(forms.Form):
            name = forms.CharField()
            email = forms.EmailField()  

----> Now we have to render it by views.py   
      ex..
      from django.shortcuts import render
      from .forms import studentRegistration

      # Create your views here.
      def home(request):
      return render(request,'enroll/home.html')

      def student(request):
      return render(request,'enroll/student.html')

      def showformdata(request):
      fm = studentRegistration
      return render(request,'enroll/userregistration.html',{'form':fm})

----> Bus ab simply usko link krlo normally

------------------------------------------------------------------------------------------------------------

                                    gs24- Configure id attribute and label tag
      views.py ke under ye sab krna h.
      isko hum use krte h label change krne ke liye forms ka 
      Ex.   views.py
            from django.shortcuts import render
            from .forms import userforms

            # Create your views here.
            def registration(request):
            user = userforms(auto_id=True)    True krne pe same wahi label name set hoga jo ki forms me object h
      ------>      <th><label for="names">Names:</label></th>  
            user = userforms(auto_id=False)   False krne pr humara label hi gayab ho jata h
      ------>      <th>Names:</th>
            #user = userforms(auto_id='some_%s') isko krne pe label id =some_object name aa jayega
      ------>      <th><label for="some_names">Names:</label></th>
            return render(request,'enroll/registration.html',{'use':user})


                                    REMOVE : FROM LAST OF EVERY LABELS

      abhi isme sare forms objects ke aage (:) khudse lg hua h usko htane ke liye ya customize krne ke liye
      hum views.py me hi ('label_suffix') ka use krenge.
      ------>     user = userforms(auto_id='some_%s',label_suffix = '#')  yha pe #ki jagah agar blank chod denge to kuch nhi ayega wha

                                    ADD DEFAULT VALUES AT FIELDS

      for this we will use [initial={'field name':'value;}]
      Ex.
            user = userforms(auto_id='some_%s',label_suffix = ' ',initial={'names':'harsh','email':'harshsahu709@gmail.com'})
                                                      or 
                                    directly change it at forms.py

                              ----->from django import forms

                                    class studentforms(forms.Form):
                                    name = forms.CharField(initial='harsh')
                                    email = forms.EmailField()
            
            agar dono me values daloge ----> views.py me aur forms.py me to views.py ki value hi lega 


                                          gs25-CHANGING FIELDS ORDERS
      to change fields order we have to do some modifications in our views.py
      user.order_fields(field_order=[])
      Ex.
            from django.shortcuts import render
            from .forms import userforms

            # Create your views here.
            def registration(request):
                  #user = userforms(auto_id=False)
                  user = userforms()
                  user.order_fields(field_order=['First_name','names','email'])
                  return render(request,'enroll/registration.html',{'use':user})


                                    gs26 - Practise of previous approach and label,tags method of forms


-------------------------------------------------------------------------------------------------------------

                              gs-27 using for loop in field and form hidden field in django

      hiddden field bnane ke liye humko forms.py me key bnate samyekuch changes krna pdta h
      keys = forms.CharField(widget=forms.HiddenInput())

      aur phir usko agar hum webpage me hide/unhide krna chate h to humko 

      <form action="student/stname"method='get'>
      {% for i in stds.visible_fields %}
      {{i.label_tag}}     {% comment %} esse on fields ke name aynge only labels means {% endcomment %}
      {{i}}
      {% endfor %}
            <hr>
      {% for i in stds.hidden_fields %}
      {{i.label_tag}}     {% comment %} esse on fields ke name aynge only labels means {% endcomment %}
      {{i}}
      {% endfor %}
      <input type="submit" value="submit">
      </form>


                                    gs28 - Brief knowledge of Forms in django

      if we want to change field name in our form not being set to object of forms then we have to do change
      in forms.py
      label='your name'
      to set initial value we will use initial,
      to remove default collon, we use label_suffix = '',
      by making required=False we make it not cumpolsary,
      by disabled we restrict user to do changes in that field,
      help_text displays the message
------>from django import forms

      class studentforms(forms.Form):
            name = forms.CharField(label='Your Name',initial='harsh1',label_suffix='#',required=False,disabled=True
                              ,help_text = 'limit 70 char')
      
>>>>>> we can target helptext in our css

                                          gs29-Form using 'Post' method
      
      get --> in this all the personal information will show at urls which is not a good thing, to remove
              this drawback we use 'post' method 
      Ex.         http://127.0.0.1:8000/?name=rohini

      post --> If we use post method then we get 1 error message.
                  CSRF verification failed. Request aborted
                  to solve this error, you must need to contain {% csrf_token %} this in your form
      
      Ex.         <input type="hidden" name="csrfmiddlewaretoken" value="89D34XawmOnNXPjVdSdNHtp2zcJVFSCZcMcZ5OwmeYsUU6TGOnlaEh1IwENM85fI">
               Generates unique tokens which make csrf impossible in your site.

      uske bad humko apne views.py me hi sara kaam krna h ki kese post method kya krega

      Ex.               from django.shortcuts import render
                        from .forms import Userregister
                        # Create your views here.


                        def forms(request):
                        if request.method == 'POST':
                              fm = Userregister(request.POST)
                              if fm.is_valid():
                                    print('form is valid')
                                    name = fm.cleaned_data['name']  # // request.POST['name'] but by this we not get cleaned data
                                    print('cleaned data:',fm.cleaned_data)
                                    print('Name:',name)
                                    password = fm.cleaned_data['password']
                                    print('password:',password)
                                    fm=Userregister()
                              else:
                                    print('gadhe')
                        else:
                              fm=Userregister()
                              print('ye humara get request se aya h')
                        return render(request,'enroll/forms.html',{'use':fm})


                                          gs30 - how to show stored data into other template

      iske liye kuch nhi bus same function me hi new template ko render krdena h.

      Ex.         from django.shortcuts import render
                  from .forms import userregister

                  # Create your views here.
                  def forms(request):
                  if request.method =='POST':
                        fm = userregister(request.POST)
                        if fm.is_valid():
                              print('okay')
                              name = fm.cleaned_data['name']
                              email = fm.cleaned_data['email']
                              password = fm.cleaned_data['password']
                              print('name:' ,name)
                              print('email:' ,email)
                              print('password:' ,password)
                              return render(request,'enroll/success.html',{'nm':name}) #yha pe ho rha h

                        else:
                              print('nope')
                  else:
                        fm = userregister()
                  return render(request,'enroll/forms.html',{'form':fm})

      isme 1 problem h ki same url rhega usko change krne ke liye ...


      humko ek new class import krni hogi HttpResponseRedirect
      uske bad 1 new function bnaynge uske through redirect krdenge new page me.

      from django.shortcuts import render
      from django.http import HttpResponseRedirect  #ye import kri h
      from .forms import userregister


      # Create your views here.
      def thankyou(request):
            return render(request,'enroll/success.html')  # ye humara new function h

      def forms(request):
            if request.method =='POST':
                  fm = userregister(request.POST)
                  if fm.is_valid():
                        print('okay')
                        name = fm.cleaned_data['name']
                        email = fm.cleaned_data['email']
                        password = fm.cleaned_data['password']
                        print('name:' ,name)
                        print('email:' ,email)
                        print('password:' ,password)
                        return HttpResponseRedirect('/regi/success/')   #iske through hum redirecct kr rhe h
                        #return render(request,'enroll/success.html',{'nm':name})

                  else:
                        print('nope')
            else:
                  fm = userregister()
      return render(request,'enroll/forms.html',{'form':fm})


----------------------------------------------------------------------------------------------------------------

                        gs32- forms ke under ke CharField,IntegerField(inke under ke functions)
      
1st :  CharField(max_length=,min_length=)        ,by default TextInput
       error message (required,max_length,min_length)
       strip - it helps to remove whitspace. // bydefault True hota h.
       empty_value - it helps when we make fied required but not give any value tis will generate error
                     to solve this we empty_value='anything you want'
       name = CharField(max_length=50,min_length=5,error_messages={'required':Enter your name
       //or customiz message})

Example:

      from django import forms

      class userforms(forms.Form):
            name = forms.CharField(max_length=10,min_length=5,error_messages={'required':'Enter your name Please.//custom error message','max_length':'chota dalo na','min_length':'bhai bda dalo'},strip=True,empty_value='harshsahu')
      
2nd : BooleanField(label_suffix:'',label:'I Agree',error_messages={'required':'kya dikkat h prabhu'})
      only returns True or False

3rd : IntegerField(max_value = 20,min_value=2,error_messages={'max_value':'chota likho dada',min_vlaue':'bda likho dada'})


4th : DecimalField(min_value=2,max_value=10,max_digits=5,error_messages={'max_value':'10 se chota janab','min_value':'2 se bda','max_digits':'5 se km rhega max numbers'})

5th : FloatField(min_value=2,max_value=10,)

6th : comment = forms.SlugField()

7th : email = forms.EmailField(max_length=25,min_length=10)
    
8th : website = forms.URLField(min_length=10,max_length=25) khud se http:// lga dega age

9th : pasword = forms.CharField(max_length=50,min_length=20,widget=forms.PasswordInput)
    
10th : description = forms.CharField(widget=forms.Textarea,initial='this is done by using "widget=forms.Textarea"')
    
11th : feedback = forms.CharField(min_length=5,max_length=50,widget=forms.TextInput(attrs={'class':'somecss1 somecss2','id':'uniqueid'}))
    
12th : notes = forms.CharField(widget=forms.Textarea(attrs={'rows':10,'col':50})) #ye rows aur column ke through apni height aur width le rha h
    
-------------------------------------------------------------------------------------------------------------

                  gs33- how to verifiy and clean data in forms.py for more organised views.py

      iske liye simple jese krte h wese hi krenge bus forms.py me ek function bnayenge
      def clean_name(self):   #yha name ki jagah uss field ka name dalenge jisme validation lgana h..
            phle data ko fetch krenge then ye sab krenge
            yha pe koi bhi condition daldenge


            from django import forms

            class userforms(forms.Form):
                  name = forms.CharField()
                  email = forms.EmailField()
                  pasword = forms.CharField(max_length=50,min_length=5,widget=forms.PasswordInput)
            def clean_name(self):
                  valname=self.cleaned_data['name']
                  if len(valname)<4:
                        raise forms.ValidationError('Enter more than 4 values')
                  else:
                        return valname
            
------------------------------------------------------------------------------------------------------------

                                    gs34- how to validate whole forms.py at single time

      for this you have to use same approach to create project, but now here add clean() function on your 
      forms.py's class

      from django import forms

      class userforms(forms.Form):
            name=forms.CharField(max_length=10)
            email = forms.EmailField()
            password = forms.CharField(widget=forms.PasswordInput)

            def clean(self):
                  cleaned_data=super().clean()
                  name = self.cleaned_data['name']
                  voteemail = self.cleaned_data['email']
                  # password = self.cleaned_data['password']
                  if len(name)<4:
                        raise forms.ValidationError('enter more than 4 characters')
                  if len(voteemail)<10:
                        raise forms.ValidationError('enter more than 10 characters')

-------------------------------------------------------------------------------------------------------------

                              gs35 - HTML,CSS AND FORMS ALL VALIDATION TYPE,, PRACTISE PROJECT
------------------------------------------------------------------------------------------------------------

                                          gs36 - BUILT IN VALIDATORS IN DJANGO

      isme humari aur mehnat km ho jayegi..         
      sabse phle humko validators import krna hoga django.core se
                                                      2 types ke h 1st- Built in and 2nd custom 

1st Built in ---->  line me hi dede field declaration ki 

                  from django import forms
                  from django.core import validators    #import this



                  class UserForms(forms.Form):
                        # custom validators 
                        # name = forms.CharField(validators=[validators.MaxLengthValidator(10)])
                        name = forms.CharField(validators=[start_with_s])
                        email = forms.EmailField()

2nd custom ---->  new function bna ke khud ke custom validation ke liye 

                  from django import forms
                  from django.core import validators

                  # creating custom validators
                  #increase reuseability
                  def start_with_s(value):
                        if value[0]!='s':
                              raise forms.ValidationError('Name should start with s')

                  class UserForms(forms.Form):
                        name = forms.CharField(validators=[start_with_s])
                        email = forms.EmailField()

-------------------------------------------------------------------------------------------------------------

                                          gs37- password validation
            
      kuch bhi validate krne ke liye apko views.py me is_valid() lgana hi hoga otherwise problem dega

      kuch nhi bus simple views.py bnao aur valid lgao must 
      then forms.py me full form ke single time me validation wala method lgado

      def clean(self) wala...

      Ex.         from django import forms
                  from django.core import validators
                  
                  class userform(forms.Form):
                        name = forms.CharField(validators=[validators.MaxLengthValidator(10),validators.MinLengthValidator(3)],label='Name')
                        email = forms.EmailField(label='Email')
                        password = forms.CharField(widget=forms.PasswordInput,label='Password')
                        Re_enter_password = forms.CharField(widget=forms.PasswordInput)


                  def clean(self):
                        cleaned_data = super().clean()
                        passw = self.cleaned_data['password']
                        reenter = self.cleaned_data['Re_enter_password']

                        if passw != reenter:
                              raise forms.ValidationError('password not matched')


NOTE------------------------------------------------------------------------------------------------------
      forms ke field me class ke through css apply krne ke liye humko field me widget=forms.TextInput(attrs{'class':'name'})


--------------------------------------------------------------------------------------------------------------

                         gs38 - Isme error message ko css ke through target krna sikhnge

            sabse phle khudke sahuliyat ke humne custom message kr diya h required wale ko (error_messages) ke
            through.

            isko sikhne ke liye fields ko hi dekhna hoga html ke tags ko target krna seekha h...

            <form action="" method="post" novalidate>
                  {% csrf_token %}
                  {{forms.non_field_errors}}
                  {% for fields in forms %}
                        <div>
                        {{fields.label_tag}}{{fields}}<span class='errorlist'>{{fields.errors|striptags}}</span>
                        </div>
                  {% endfor %}
                  <input type="submit" value="SUBmit">
            </form>

      -----> Striptags ke sath me kya problem h ki isme humare sare tags hi nipat jata, means css ke liye target krne
            ko kuch bachta nhi h to phir alag se span tag me add kro ye sab.. ye iska DRAWBACK H..........  

                            ---------------removing that error----------------------


            Ex.               <form action="" method="post" novalidate>
                                    {% csrf_token %}
                                    {{forms.non_field_errors}}
                                    {% for fields in forms %}
                                    <div>
                                    {% comment %} {{fields.label_tag}}{{fields}}<span class='errorlist'>{{fields.errors|striptags}}</span> {% endcomment %}
                                    {{fields.label_tag}}{{fields}}
                                    {% for error in fields.errors %}
                                    <span class='errorlist'>{{error}}</span>
                                    {% endfor %}
                                    </div>
                                    {% endfor %}
                                    <input type="submit" value="SUBmit">
                              </form>


                              ------------output html code---------

            <div>
        
        <label for="id_email">Email:</label><input type="email" name="email" value="ahsr" maxlength="320" minlength="10" required id="id_email">
        
        <span class='errorlist'>Enter a valid email address.</span>
        
        <span class='errorlist'>10 se bda dalo</span>
        
        </div>


            ------------gs39- isme humne aur forms ke labels ko target krna sikha h-------

      from django import forms
      from django.core import validators

      class UserForms(forms.Form):
            error_css_class = 'error'   #essa krne se <tr me class> aaajata jisse hum easily target krsakte h.
            required_css_class = 'required'  #esse krne se <tr class="required error"> required error aane pe hi target krsakte h.
            name = forms.CharField(error_messages={'required':'Please enter your name','min_length':'chotaa h kya tera'},min_length=4)
            email = forms.EmailField(error_messages={'required':'Please enter your Email','min_length':'10 se bda dalo'},min_length=10)
            password = forms.EmailField(error_messages={'required':'Please enter your Password'})

--------------------------------------------------------------------------------------------------------------------------

                              gs40 - storing data to database from form.py

      Full data entering into database from the form, its better to open and then see the code

      here we save() to save data into database

step-1:     create normal form page with working 

step-2:     now create model class and register it in admin.py, then do migration andd all other stuffs for table creation

step-3:     now import model in views.py and save it as object and specify in which field data will store..
            Ex.         
                              reg = Employee(Name=name,Email=email,Password=passw)

step-4:     now use save()
            Ex.               
                              reg.save()

step-5:     to delete data-->delete() will use


--------------------------------------------------------------------------------------------------------------

                                    gs41 - creating and saving data of form by model.py
      
      forms.py ke sath me problem code ko bar bar likhna pd rha h.. jese name,email,password 1 bar forms.py 
      ke liye bnya phir wahi models.py me bnya datafield bnane ke liye.....

      code useability km ho gyi, which is not good.. To resolve this issue we have to use this models form method.

-----> But isko hum tabhi use krenge jab humko only utni hi fields dalna h form me jitni humare database me h.

Forms.py after creating models.py-----------------------------------

                                    from django import forms
                                    from .models import Employee

                                    class Registration(forms.ModelForm):
                                          class Meta:
                                                model = Employee
                                                fields = ['Name','Email','Password']

------> NOw how to target forms in css as we now dont have any classes -----

NOTE: widget ke through hum sare HTML ke attributes lga sakte h...............

                     ---------------forms.py-------------

            
            from django import forms
            from .models import Employee

            class Registration(forms.ModelForm):
                  class Meta:
                        model = Employee
                        fields = ['Name','Email','Password']
                        labels = {'Name':'Your Name'}
                        help_texts ={'Name':'Enter Your FUll name:'}
                        error_messages = {'Name':{'required':'naame likho chacha','max_length':'chota kro'},'Email':{'required':'bharna jaruri h'}}
                        widgets = {'Password':forms.PasswordInput,'Name':forms.TextInput(attrs={'class':'myclass','placeholder':'harsh sahu'})}


--------------------------------------------------------------------------------------------------------------

                                    gs42 - Practise to store data by model.py form

      bus sab kuch wese hi krna h print ki jagah 

For save---->save() use krdenge to save ho jayega
For Delete----> delete()

NOTE:----->                   models ko form me import krne ke bad 
                        forms me class bnane ke bad usme(forms.ModelForm) likhna h na ki (forms.Form)

            Ex.               class Registration(forms.ModelForm):
                                    class Meta:

                        ---------> HOW TO DELETE DATA USING INSTANCES IN VIEWS.PY <----------


            ISME humko request.method == 'POST':   ke bad hi models.py ke object ko call krlena h.

            Ex.         from django.shortcuts import render
                        from .forms import UserRegistration
                        from .models import registration

                        # Create your views here.
                        def forms(request):
                              if request.method == 'POST':
                                    killu = registration.objects.get(pk=2) #PK == PRIMARY KEY  YHI PE HUMNE MODELS KA REGISTRATION LE LIYA...
                                    user = UserRegistration(request.POST, instance=killu)
                                    if user.is_valid():
                                          user.save()  
                              else:
                                    user = UserRegistration()
                              return render(request,'enroll/home.html',{'use':user})
---------------------------------------------------------------------------------------------------------------

                                    gs43 - applying validators on form which was created by models.py

      kuch nhi bus simple main class ke under hi jisbhi field me jo bhi validators lgana ho lga do.

      Ex.                     from django import forms
                              from .models import Employee
                              from django.core import validators


                              class Registration(forms.ModelForm):
                                    Name = forms.CharField(max_length=50,required = False)  #high preference than models.py declaration
                                    class Meta:
                                          model = Employee
                                          fields = ['Name','Email','Password']

                                          
                                          labels = {'Name':'Your Name'}

                                          help_texts ={'Name':'Enter Your FUll name:'}

                                          error_messages = {'Name':{'required':'naame likho chacha','max_length':'chota kro'},
                                                            'Email':{'required':'bharna jaruri h'}}
                                          
                                          widgets = {'Password':forms.PasswordInput,
                                                      'Name':forms.TextInput(attrs={'class':'myclass','placeholder':'harsh sahu'})}

 
----------------------------------------------------------------------------------------------------------------


                                    gs44 - DYNAMIC URLS IN DJANGO
      

      to create dynamic urls we have to add <> this in our normal urlspattern

      Ex.              

            from django.contrib import admin
            from django.urls import path
            from enroll import views

            urlpatterns = [
            path('admin/', admin.site.urls),
            path('student/<my_id>/',views.show_details,name='details'), #show_details() got an unexpected keyword argument 'my_id',
            when we not added my_id in our views.py function
                        ]


            isme hume path converter bhi hote h,, jese 
            path('student/<int:my_id>/',views.show_details,name='details'),  yha pe int h path converter


------------>>>>>>>>>>> VIEWS.PY WITHOUT SUBCLASS IN DYNAMIC URL.

            from django.shortcuts import render

            # Create your views here.
            def home(request):
            return render(request,'enroll/home.html')

            def show_details(request,my_id):
            if my_id==1:   #isko str kro ya dyanamic url ko integer krdo, to humne usko int krdiya h.
                  student={'id':my_id,'name':'Harsh'}
            if my_id==2:
                  student={'id':my_id,'name':'Ashish'}
            if my_id==3:
                  student={'id':my_id,'name':'Akshay'}
            if my_id==4:
                  student={'id':my_id,'name':'Burnol'}
            return render(request,'enroll/show.html',student)

--------------------------------------------------------------------------------------------------------------

                                    gs45- how to use Dynamic Urls in apps

      just make urls.py in apps and combine it with project urls file through include method simple..

      project urls.py--->
      from django.contrib import admin
      from django.urls import path,include
      from enroll import views


      urlpatterns = [
            path('admin/', admin.site.urls),
            path('',views.home,name='ghar'),
            path('student/',include('enroll.urls'))
      ]

      App urls.py-------->
            from django.urls import path
            from . import views

            urlpatterns = [
                  path('<int:my_id>/',views.show_details,name='details'),   #show_details() got an unexpected keyword argument 'my_id', when we not added my_id in our views.py function
                  path('<int:my_id>/<int:my_subid>/',views.show_subdetails,name='subdetails'),
            ]


            -------------------------> DEFAULT VALUE FOR VIEW ARGUMENTS<-------------------------------

            def show_details(request,my_id=1):
                  if my_id==1:   
                        student={'id':my_id,'name':'Harsh'}
                  return render(request,'enroll/show.html',student)

            -----------------------> PASSING EXTRA OPTIONS TO VIEW FUNCTIONS<-------------------------

            path(route,view,kwargs=None,Name=None)

            The kwargs arguments allows you to pass additional arguments to the view function or method.
            It should be a dictionary

--------------------------------------------------------------------------------------------------------------

                                    gs46 - Custom Path converter
      
------> first of all we need to create CONVERTERS.PY file

      class FourDigitYearConverter:
      regex = '[0-9]{4}'

      def to_python (self,value):
            return int(value)
      
      def to_url(self,value):
            return f'{value:4d}'

------> After that register it on urls.py
            from django.urls import path,register_converter
            from . import views,converters

            register_converter(converters.FourDigitYearConverter,'yyyy')

            urlpatterns = [
            path('session/<yyyy:year>/',views.show_details,name='details'),
]
    
-------> then use it on views.py
            from django.shortcuts import render

            # Create your views here.

            def show_details(request,year):
            student = {'yr':year}
            return render(request,'enroll/show.html',student)



------------------------------------------------------------------------------------------------------------

                                   gs47- CRUD PROJECT (CREATE READ UPDATE DELETE)

      IN THIS , we will enter the values of user and then will show it on page...

NOTE:-      humko agar pura form ka data save krna h to hum direct form ke instance ko save function se 
            save kr sakte h.

            Ex.         from django.shortcuts import render
                        from .forms import StudentRegistration
                        from .models import User

                        # Create your views here.
                        def add_show(request):
                        if request.method == 'POST':
                              fm = StudentRegistration(request.POST)
                              if fm.is_valid():
                                    fm.save()
                        else:
                              fm=StudentRegistration()
                        return render(request,'enroll/addandshow.html',{'form':fm})


                        --------> Now we have to show our stored  data on our page..............

      iske liye humko apne modules ke sare objects chaiye h ----> show=User.objects.all()  
      iske through humare database ko render kr sakte h webpage pr....

      def base(request):
            if request.method=='POST':
                  user = UserRegistration(request.POST)
                  if user.is_valid():
                        # name = user.cleaned_data['Name']
                        # email = user.cleaned_data['Email']
                        # password = user.cleaned_data['Password']
                        # regi = User(Name=name,Email=email,Password=password)
                        # regi.save()
                        user.save()
                        

                        
            else:
                  user = UserRegistration()
            show = User.objects.all() # to show data on table
            return render(request,'enroll/addstudent.html',{'use':user,'shu':show})


            --------------------------> Data Delete function <----------------------------

      iske liye phle to webpage me form ready krlo jo dynamic urls generate kr paye..

      <form action="{% url 'deletedata' st.id %}" class='d-inline' method="post">
                  {% csrf_token %}
                  <input type="submit" class='btn btn-danger' value="DELETE">
      </form>

-----> then urls ke through delete function ke through operation krna hoga ....

      def delete(request,id):
            if request.method=='POST':
                  pi = User.objects.get(pk=id)
                  pi.delete()
            return HttpResponseRedirect('/')   #After the deletion is successful, the view redirects the user to the root URL ('/').
            #'/' is the URL where the browser should be redirected. In this case, '/' typically represents the root or home page of your web application.
                  
            # return render(request,'enroll/addstudent.html')  esse to wo khali form dedega


            ----------------> Differene Between HttpResponseRedirect and redirect <----------------

            HttpResponseRedirect---> ye urls ke age aur path jodta h..
                              ex.   return HttpResponseRedirect('/') jese yha pe same page pe rakhne liye ('/')
                              krna pade

            redirect----------------> ye only utna path lega jitna diya gya h, ye previous path me add nhi krta h.
                              ex.   return redirect('home') dono me se kisika bhi use kr sakte h.


-------------------------------------> Data Update Function <-----------------------------------------

      sabse phle to humko id chahiye jispe operation perfrom ho rha h.
      uske bad 1 new page bnya h jisme edit krenge.
      usme phle ke data ko show krne ke liye User.objects.get(pk=id) 
            then form ko render kreneg data dekhnr ke liye user= UserRegistration(request.POST,instance=pi)
            ka use krenge, pk = primary key
      phir agar kuch changes kiya to usko save krenge -->save() function ke through.
      update krne ke bad redirect ho jayenge home page pr..
      home page me suceess ka message show krdenge..


      Ex........

      def userupdate(request,id):
            if request.method=='POST':
                  pi = User.objects.get(pk=id)
                  user = UserRegistration(request.POST, instance=pi)
                  if user.is_valid():
                        user.save()
                        messages.success(request, 'User data updated successfully.') 
                  #ye message show kr rha h
                        return redirect('home')  
                  #essa krne se humara page update hone ke bad home page pr aajayega
                  # HttpResponseRedirect krne se humare current url ke aage add hota h next url-->127.0.0.1:8000/update/25/home
                  # But redirect krne se only wahi url leta h jo diya gya ho. --> http://127.0.0.1:8000/
            else:
                  pi = User.objects.get(pk=id)
                  user = UserRegistration(instance=pi)
            return render(request,'enroll/UpdateUser.html',{'use':user})


--------------------------------------------------------------------------------------------------------------

                                    gs48-Models ke through bne form ki fields ki properties

      from django import forms
      from .models import UserModel

      class UserForms(forms.ModelForm):
            class Meta:
                  model = UserModel
                  # fields = ['Name','Email','Password'] #old method
                  fields = '__all__' #esse sare aajyenge models.py ke
                  # exclude = ['Name']  #esse name nhi ayega baki ke sare ayenge
                  widgets = {'Password':forms.PasswordInput}


--------------------------------------------------------------------------------------------------------------
                                          gs-49 Form inheritence

      from django import forms
      from .models import User

      class StudentRegistration(forms.ModelForm):
            class Meta:
                  model = User
                  fields = ['Student_name','Email','Password']

      class TeacherRegistration(StudentRegistration):
            class Meta(StudentRegistration.Meta):
                  fields = ['Teacher_name','Email','Password']

-------------------------------------------------------------------------------------------------------------

                                    gs-50 Messages Framework in django
            
      
      overlay----

      Types of messages:- 7 types

      1.Success Message:
            Description: Used to provide positive feedback or confirmation to the user.

            from django.contrib import messages
            messages.success(request, 'This is a success message.')

      2.Error Message:
            Description: Used to display error messages when something goes wrong or an error occurs.
            messages.error(request, 'This is an error message.')

      3.Info Message:
            Description: Used to provide informational messages or tips to users.
            messages.info(request, 'This is an info message.')

      4.Warning Message:
            Description: Used to display warnings to users to notify them about potential issues.
            messages.warning(request, 'This is a warning message.')

      5.Debug Message:
            Description: Used for debugging purposes and is typically only displayed when the DEBUG setting is set to True.
            messages.debug(request, 'This is a debug message.')

      6.Custom Message:
            Description: You can create custom message types to suit your specific needs.
            messages.add_message(request, custom_message_type, 'Custom message content.')

      ------------------------->Displaying Messages in Templates:<---------------------------------

Messages can be displayed in your Django templates using a {% messages %} template tag. For example:
                  {% if messages %}
                        {for message in messages}
                              {% if message.tags %}{{message.tags}}{% endif %}
                                    {{message}}
                        {% endfor %}
                  {% endif %}


-----------------------------------------------> Real approach <--------------------------------------------

from django.shortcuts import render,redirect,HttpResponseRedirect
from django.contrib import messages
from .forms import StudentRegistration

# Create your views here.
def home(request):
    if request.method == 'POST':
        fm = StudentRegistration(request.POST)
        if fm.is_valid():
            fm.save()
            # messages.success(request,'Data saved successfully')   #shortcut
            messages.add_message(request,messages.SUCCESS,'Your account created Successfully')
            messages.add_message(request,messages.INFO,'Your account info created Successfully')
    else: fm=StudentRegistration()
    return render(request,'enroll/home.html',{'form':fm})

                                          --------> HTML<--------
            
            {% if messages %}
                  {% for message in messages %}
                        {% comment %} {% if message.tags %}{{message.tags}}{% endif %}
                        <strong>Awesome!</strong> <span class='success'>{{message}}</span> {% endcomment %}
                        <span {% if message.tags %} class='{{message.tags}}' {% endif %}>{{message}}</span><br>
                  {% endfor %}
            {% endif %}

------------> message.tags ki wajah se humko class mil jati h messages ki jiise hum usko target kr 
sakte h css me.
                  <span  class='info' >Your account info created Successfully</span><br>

----------------------------------------> get_level & set_level <--------------------------------------------

------------------------------>messages.get_level(request):

get_level() is used to retrieve the current message level for the request's message storage.
This method returns the message level as a string.
Example of using get_level():
      from django.contrib import messages

      current_level = messages.get_level(request)
      print(current_level)  # Output: 'success' (or any other message level)



--------------------->messages.set_level(request, level):

set_level() is used to set the message level for the request's message storage.
You can change the default message level to control the severity of messages that will 
be added in subsequent calls. This is useful when you want to change the message level for a 
specific view or based on certain conditions.
      Example of using set_level():
            from django.contrib import messages

            # Set the message level to 'warning'
            messages.set_level(request, messages.WARNING)

            # Now, any message added will be of warning level
            messages.warning(request, 'This is a warning message.')

            # You can later change the message level again if needed
            messages.set_level(request, messages.SUCCESS)

            # Now, any message added will be of success level
            messages.success(request, 'This is a success message.')

------------------------------------Example of views.py for message----------------------------------

from django.shortcuts import render,redirect,HttpResponseRedirect
from django.contrib import messages
from .forms import StudentRegistration

# Create your views here.
def home(request):
    if request.method == 'POST':
        fm = StudentRegistration(request.POST)
        if fm.is_valid():
            fm.save()
            # messages.success(request,'Data saved successfully')   #shortcut
            messages.add_message(request,messages.SUCCESS,'Your account created Successfully')
            messages.add_message(request,messages.INFO,'Your account info created Successfully')

            #------------------- messages.level----------------------#
            current_level = messages.get_level(request)
            print(current_level)
            messages.set_level(request,messages.DEBUG) # debug ka level km h info se to usko dekhne ke liye humko message ke level ko debug pe set krna hoga.
            current_level = messages.get_level(request)
            print(current_level)
            messages.debug(request,'this is debug')
            #-------------------------------------------------------#
    else: fm=StudentRegistration()
    return render(request,'enroll/home.html',{'form':fm})

# def message(request):
#     messages.success(request,'killu kallan kaliya')
#     # return render(request,'enroll/home.html')
#     # return redirect('home')
#     return HttpResponseRedirect('/')



-----------------------------------> CHanging Default Value of Messages<---------------------------------

like if we want to change tag of ERROR--- who's default tag is error then we have to some changes in 'settings.py'


from django.contrib.messagesimport contants as messages
MESSAGE_TAGS={
      messages.ERROR:'danger',
}

now the error tag become danger tag......


--------------------------------------------------------------------------------------------------------------

            ------------>gs-51 User Authentication system by Built-in django Form<--------------

                        -----------------> User object Fields <----------------------

1.    username:
            Example Use: Unique identifier for a user.
            Example: my_user.username might return "johndoe."`
2.    password:
            Example Use: Stores a hashed and salted password.
            Example: Passwords are hashed and stored securely, e.g., my_user.set_password("my_secure_password").
3.    email:
            Example Use: Store the user's email address.
            Example: my_user.email might return "john.doe@example.com."
4.    first_name and last_name:
            Example Use: Store the user's first and last names.
            Example: my_user.first_name might return "John," and my_user.last_name might return "Doe."
5.    date_joined:
            Example Use: The date and time when the user's account was created.
            Example: my_user.date_joined might return a datetime object.
6.    last_login:
            Example Use: The date and time of the user's last login.
            Example: my_user.last_login might return a datetime object.
7.    is_active:
            Example Use: Indicates if the user's account is currently active.
            Example: my_user.is_active might return True if the account is active and False if it's not.
8.    is_staff:
            Example Use: Indicates if the user has access to the admin interface.
            Example: my_user.is_staff might return True if the user has staff privileges.
9.    is_superuser:
            Example Use: Indicates if the user has superuser privileges.
            Example: my_user.is_superuser might return True for a superuser.
10.   groups and user_permissions:
            Example Use: Manage the user's group memberships and permissions.
            Example: You can add the user to specific groups or assign specific permissions to the 
            user through these fields.
11.   profile (custom field):
            Example Use: Storing additional user information, not provided by default.
            Example: A custom field like my_user.profile.phone_number might store the user's phone 
            number if you've extended the User model with a related Profile model.
12.   related_name (custom field with a related name):
            Example Use: Used when you define relationships between user objects and other models.
            Example: If you have a ForeignKey or OneToOneField to the User model in another model, 
            you can specify a related_name to access user-related data.

Example:-
            from django.contrib.auth.models import User

            # Create a user
            my_user = User.objects.create_user(username="johndoe", password="my_secure_password", email="john.doe@example.com")

            # Access user fields
            print(my_user.username)  # johndoe
            print(my_user.email)     # john.doe@example.com
            print(my_user.first_name)  # ""
            print(my_user.last_name)   # ""
            print(my_user.date_joined)  # A datetime object
            print(my_user.is_active)    # True
            print(my_user.is_staff)     # False


            --------------------------->User Manager Methods <----------------------------


1.     create_user(username, email=None, password=None, **extra_fields):
      Creates and saves a new user with the given username, email, and password.
      Example:
      from django.contrib.auth.models import User
      user = User.objects.create_user(username="johndoe", email="john@example.com", password="my_secure_password")
      
      
2.    create_superuser(username, email=None, password=None, **extra_fields):
      Creates and saves a new superuser with the given username, email, and password.
      Example:
      from django.contrib.auth.models import User
      superuser = User.objects.create_superuser(username="admin", email="admin@example.com", password="admin_password")
      
      
3.    get(username=username):
      Retrieves a user by their username.
      Example:
      from django.contrib.auth.models import User
      user = User.objects.get(username="johndoe")
      
      
4.    filter(**kwargs):
      Retrieves a list of user objects that match the given filter parameters.
      Example:
      from django.contrib.auth.models import User
      users = User.objects.filter(email="john@example.com")
      
      
5.    all():
      Retrieves all user objects.
      Example:
      from django.contrib.auth.models import User
      all_users = User.objects.all()
      
      
6.    get_or_create(username=username, defaults=None):
      Attempts to retrieve a user with the given username, and if it doesn't exist, creates one with 
      the provided defaults.
      Example:
      from django.contrib.auth.models import User
      user, created = User.objects.get_or_create(username="johndoe", defaults={"email": "john@example.com"})
      
      
7.    update_or_create(defaults=None, **kwargs):
      Attempts to update an existing user with the provided defaults or creates a new one with the 
      specified keyword arguments.
      Example:
      from django.contrib.auth.models import User
      user, created = User.objects.update_or_create(username="johndoe", defaults={"email": "new_email@example.com"})
      
      
8.    delete():
      Deletes the user from the database.
      Example:
      from django.contrib.auth.models import User
      user = User.objects.get(username="johndoe")  /// user = User.objects.get(pk=id)
      user.delete()



                        ----------------------> Group Object Fields <-----------------------

      In Django's authentication system, user groups are used to organize users into logical 
      collections with common permissions. The Group model provides fields for managing these groups. 
      Here are the fields available on the Group model:

1.    name:
      Example Use: A unique name for the group.
      Example: my_group.name might return "Admins."
      
      
2.    permissions:
      Example Use: A Many-to-Many relationship with the Permission model, allowing you to assign specific 
      permissions to the group.
      Example: You can assign and query permissions for the group using the permissions field.
      
EXAMPLE:-      
      Here's how you might work with these fields in Django:
      from django.contrib.auth.models import Group

      # Create a new group
      my_group = Group.objects.create(name="Admins")

      # Access the group's name
      print(my_group.name)  # "Admins"

      # Assign permissions to the group
      my_group.permissions.add(permission_obj1, permission_obj2)

      # Query the permissions assigned to the group
      permissions = my_group.permissions.all()


                                    --------->Permission Object Fields<---------

      In Django, the Permission model is a part of the built-in authentication and authorization system.
      Permissions are used to define what users can and cannot do within your application. 
      The Permission model has the following fields:

1.          name:
            Example Use: A human-readable name for the permission.
            Example: my_permission.name might return "Can view posts."
           
           
2.          content_type:
            Example Use: A foreign key to the ContentType model, representing the content type to which the 
            permission applies.
            The ContentType model specifies the model and app to which the permission is associated.
            Example: my_permission.content_type returns the content type to which the permission is associated.
            
            
3.          codename:
            Example Use: A unique codename for the permission within the content type.
            This is used to programmatically check permissions.
            Example: my_permission.codename might return "view_posts."
            
Example:-            
            Here's an example of working with the Permission model:

            from django.contrib.auth.models import Permission

            # Create a new permission
            my_permission = Permission.objects.create(
            name="Can view posts",
            content_type=content_type_instance,  # Replace with the appropriate ContentType instance
            codename="view_posts"
            )

            # Access the permission's fields
            print(my_permission.name)  # "Can view posts"
            print(my_permission.content_type)  # ContentType instance
            print(my_permission.codename)  # "view_posts"




      ---------------------------------> Practical Approach <--------------------------------

------>date will store automatically in user
------> No need to create modles.py and other stuffs

      from django.shortcuts import render
      from django.contrib.auth.forms import UserCreationForm  ---------->import Usercreation form

      # Create your views here.
      def sign_up(request):
      if request.method == 'POST':
            fm=UserCreationForm(request.POST)         --------------> use it as forms 
            if fm.is_valid():
                  fm.save()                           ---------------> save data

      else: fm=UserCreationForm()
      return render(request,'enroll/signup.html',{'form':fm})

-------------> Create html file to render the form 


                              ----------------> HTML FILE <-----------------------

      <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        .errors{
            color:red;
        }
    </style>
    <title>Document</title>
</head>
<body><center>
        <h1> THis is default User registration Form</h1>
        <form action="" method="post" novalidate style='height:400px;width: 500px;box-shadow:5px 5px 10px'>
            {% csrf_token %}
            {% for fm in form %}
            {{fm.label_tag}}
            {{fm}} 
            <span class='errors'>{{fm.errors|striptags}} <br><br><br></span>
            {% comment %} {{form.as_p}} esse,sare ke sare errors ek sath dikh rhe the {% endcomment %}
            {% endfor %}
            <input type="submit" value="SUBMIT">
        </form>
    </center>
</body>
</html>


------------------------> But the Probelem is there are only 3 Fields Name,Password,Re-Password<-------------

                                          gs52-solving the above  Problem

---------> How to add extra Fields in {UserCreationForm}


      --------->THere are 2 methods for this...
      1st. We can inherit our UserCreationForm and add some fields same as we did in forms inheritance part.


------>forms.py

      from django import forms
      from django.contrib.auth.forms import UserCreationForm
      from django.contrib.auth.models import User


      class SignupForm(UserCreationForm):
            password2=forms.CharField(label='Confirm Password',widget=forms.PasswordInput)
            first_name = forms.CharField(required=True)   #by specifying here we can make that field required
            class Meta:
                  model = User
                  fields = ['username','first_name','last_name','email']  #ye username,first_name ye sab User se aarha h.
        

-------> views.py

                  from django.shortcuts import render
                  # from django.contrib.auth.forms import UserCreationForm
                  from .forms import SignupForm
                  from django.contrib import messages

                  # Create your views here.
                  def sign_up(request):
                        if request.method=='POST':
                              fm = SignupForm(request.POST)
                              if fm.is_valid():
                                    fm.save()
                                    messages.success(request,'Data saved Successfully')
                                    # messages.info(request,'Data saved Successfully')

                        else:
                              fm=SignupForm()
                  return render(request,'enroll/signup.html',{'form':fm})



--------------------------------------------------------------------------------------------------------------

            ------------------------> gs53-Creating Full Signup,login, profile page <-------------------- 

      first of all we need to create our views.py for signup page...
------>step 1: already created in our previous chapter using UserCreationForm
                  from django.contrib.auth.forms import UserCreationForm

------> data will get saved in database using step-1

------>step 2: now create login form using AuthenticationForm
                        from django.contrib.auth.forms import AuthenticationForm

------>step 3: Now show User Profile only if User is authenticated for this use-->request.user.is_autheticated

------>step 4: Now create logout function useing -----> logout(request)
                  from django.contrib.auth import authenticate,login,logout



                  ------------------------> views.py<---------------------------

      from django.shortcuts import render,HttpResponseRedirect,redirect
      # from django.contrib.auth.forms import UserCreationForm,AuthenticationForm
      from .forms import Registration
      from django.contrib import messages
      from django.contrib.auth.forms import AuthenticationForm
      from django.contrib.auth import authenticate,login,logout


      # Create your views here.
      def signup(request):
            if request.method=='POST':
                  fm = Registration(request.POST)
                  if fm.is_valid():
                        fm.save()
                        messages.success(request,'Data saved successfully')
            else:
                  fm=Registration()
            return render(request,'enroll/signup.html',{'form':fm})


      #for login
      def user_login(request):
            if not request.user.is_authenticated:  # it will take care that user is already loggined then he will not able to to login page again.
                  if request.method=='POST':
                        fm = AuthenticationForm(request=request,data=request.POST) #takes 2 arguments request,data
                        if fm.is_valid():
                              uname = fm.cleaned_data['username']
                              upass = fm.cleaned_data['password']
                              user=authenticate(username=uname,password=upass) #built in authenticate function takes 2 args username and password

                              if user is not None: # if matched then user will get 1
                                    login(request,user)  #then login that user
                                    messages.success(request, 'Login Successful')
                                    # return HttpResponseRedirect('/profile/') #iske liye url sahi hona chaiye but redirect ke liye only name
                                    return redirect('profile')                
                  else:
                        fm = AuthenticationForm()
                  return render(request,'enroll/userlogin.html',{'form':fm})
            else:
                  return redirect('profile')

      #user profile
      def user_profile(request):
            if request.user.is_authenticated:  #only view profile when you are logined
                  return render(request,'enroll/profile.html',{'name':request.user})
            else:
                  return redirect('login')


      #logout
      def user_logout(request):
            logout(request)  #logout function used to delete current session
            messages.success(request,'Logout successful')
            return redirect('login')


-------------------------------------------------------------------------------------------------------------

            ------------------> gs55- added password changing facility <------------------


Note:--- update_session_auth_hash(request,fm.user) it help to update session after changing password 
            without getting logged-out..


views.py----------------->

            from django.shortcuts import render,redirect
            from django.contrib.auth.forms import UserCreationForm,AuthenticationForm,PasswordChangeForm,SetPasswordForm
            from django.contrib import messages
            from .forms import SignupForm
            from django.contrib.auth import authenticate,login,logout,update_session_auth_hash

            # Create your views here.
            def signup(request):
                  if request.method=='POST':
                        fm = SignupForm(request.POST)
                        if fm.is_valid():
                              fm.save()
                              messages.success(request,'user created successfully, Now you can do login')
                  else:
                        fm=SignupForm()
                  return render(request,'enroll/signup.html',{'form':fm})

            def user_login(request):
                  if not request.user.is_authenticated:
                        if request.method == 'POST':
                              fm = AuthenticationForm(request=request,data=request.POST)
                              if fm.is_valid():
                              uname=fm.cleaned_data['username']
                              upass=fm.cleaned_data['password']
                              user = authenticate(username=uname,password=upass) # take care all authentication system
                              if user is not None:
                                    login(request,user)    # takes 2 arguments (request and user)
                                    messages.success(request,'Logined successfully')
                                    return redirect('profile')
                        else:
                              fm=AuthenticationForm()            
                        return render(request,'enroll/login.html',{'form':fm})
                  else:
                        return redirect('profile')


            def profile(request):
                  if request.user.is_authenticated:
                        return render(request,'enroll/profile.html',{'name':request.user})
                  else:
                        return redirect('login')

            def user_logout(request):          #same function name se aap custom function nahi bna sakte ho prabhu
                  logout(request)         #logout takes 1 argument
                  return redirect('login')

            def password1(request):    #takes old password for password change.
                  if request.method=='POST':
                        fm = PasswordChangeForm(user=request.user,data=request.POST)
                        if fm.is_valid():
                              fm.save()
                              update_session_auth_hash(request,fm.user)
                              messages.success(request,'Password changed successfully')
                              return redirect('login')
                  else:
                        fm = PasswordChangeForm(user=request.user)
                  return render(request,'enroll/change.html',{'form':fm})

            def password2(request):  #This takes only New password..
                  if request.method == 'POST':
                        fm = SetPasswordForm(user=request.user,data=request.POST)
                        if fm.is_valid():
                              fm.save()
                              update_session_auth_hash(request,fm.user)
                              messages.success(request,'Password changed successfully')
                              return redirect('login')
                  else:
                        fm = SetPasswordForm(user=request.user)
                  return render(request,'enroll/change1.html',{'form':fm})


--------------------------------------------------------------------------------------------------------------

                  ----------------> gs55- Profile Data show and update <----------------

      for this we have to import UserChangeForm
            EditUserProfileForm(request.POST,instance=request.user)

      it takes 2 arguments
            1. request.POST
            2. instance=request.user

------>views.py

      def user_profile(request):
            if request.user.is_authenticated:
                  if request.method=='POST':
                        # fm = UserChangeForm(instance=request.user)  #bahut jada unnecssary data aa rha tha
                        fm = EditUserProfileForm(request.POST,instance=request.user)
                        if fm.is_valid():
                        fm.save()
                        messages.success(request,'Data Updated successfully')
                  else:
                        fm = EditUserProfileForm(instance=request.user)
                  return render(request,'enroll/profile.html',{'name':request.user,'form':fm})
            else:
                  return redirect('login')


-----------------> Some important Notes Points

      1.  UserCreationForm(request.POST)  --------- it takes only 1 argument  we use that for data save

      2.  AuthenticationForm(request=request,data=request.POST)   ------- 2 arguments same request.post to save data

      3.  UserChangeForm(request.POST,instance=request.user) ---------- 2 arguments request.POST to save data and instance=request.user to get user

      4.  PasswordChangeForm(user=request.user,data=request.POST) ---------2 arguments user and data 

      5.  SetPasswordForm(user=request.user,data=request.POST) ------------same as PasswordChangeForm


            -------------------------------> more Information <----------------------------

            Certainly, I can provide some notes about each of the forms you've listed along with their arguments:

      1. `UserCreationForm(request.POST)`:

      - `UserCreationForm` is a built-in Django form for user registration.
      - Arguments:
      - `request.POST`: This is the data that you receive from the submitted form. 
                        It's used to validate and process the user's registration data.
      - Notes: This form is used for creating a new user account. It typically includes fields like 'username', 'password1', and 'password2' (for password confirmation) and is used in the user registration view.



      2. `AuthenticationForm(request=request, data=request.POST)`:

      - `AuthenticationForm` is a built-in Django form for authenticating users.
      - Arguments:
      - `request=request`: This argument is used to pass the HTTP request to the form. 
                           It's required because authentication often relies on session and request data.
      - `data=request.POST`: This is the POST data received from the login form. 
                             It's used to validate the user's login credentials.
      - Notes: This form is used for user login. It typically includes fields like 'username' and 'password'.
               It checks whether the provided credentials are valid.



      3. `UserChangeForm(request.POST, instance=request.user)`:

      - `UserChangeForm` is a built-in Django form for editing user profiles.
      - Arguments:
      - `request.POST`: This is the data that you receive from the submitted form.
                         It's used to validate and process the changes made to the user's profile.
      - `instance=request.user`: This argument specifies the user instance whose profile is being edited.
                                 It pre-fills the form fields with the user's existing data.
      - Notes: This form is used when a user wants to edit their profile information, like their username,
               first name, last name, and email. The instance argument is used to load the current user's 
               data into the form for editing.

      4. `PasswordChangeForm(user=request.user, data=request.POST)`:

      - `PasswordChangeForm` is a built-in Django form for changing a user's password.
      - Arguments:
      - `user=request.user`: This argument specifies the user whose password is being changed.
      - `data=request.POST`: This is the data received from the form, 
                             which includes the old password and the new password.
      - Notes: This form is used when a user wants to change their password.
               It requires the user's current password for validation, and it sets a new password.

      5. `SetPasswordForm(user=request.user, data=request.POST)`:

      - `SetPasswordForm` is a form for setting a user's password, which is similar to changing the password 
                         but doesn't require the old password.
      - Arguments:
      - `user=request.user`: This argument specifies the user for whom you want to set a new password.
      - `data=request.POST`: This is the data received from the form, which includes the new password.
      - Notes: This form is typically used by administrators or in situations where you want to reset 
               or set a new password for a user without knowing their old password.

      These forms are part of Django's built-in authentication system and are commonly used in web
      applications for user registration, login, and profile management. 
      The specific arguments provided depend on the use case and requirements of your application.

------------------------------------------------------------------------------------------------------------

            -----------------------> gs56 Adding Admin rights for admin <------------------------


def UserProfile(request):
    if request.user.is_authenticated:
        if request.method == 'POST':
            # if request.user.is_superuser:
            #     fm = AdminProfileForm(request.POST,instance=request.user)
            #     if fm.is_valid():
            #         fm.save()
            #         messages.success(request,'Admin Data saved Successfully')
            # else:
            #     fm = UserProfileForm(request.POST,instance=request.user)
            #     if fm.is_valid:
            #         fm.save()
            #         messages.success(request,'User Data saved Successfully')
            if request.user.is_superuser:                                            # only show when user is superuser
                fm = AdminProfileForm(request.POST,instance=request.user)
            else:
                fm = UserProfileForm(request.POST,instance=request.user)
            if fm.is_valid:
                fm.save()
                messages.success(request,'User Data saved Successfully')
        else:
            if request.user.is_superuser == True:
                fm = AdminProfileForm(instance = request.user)
            else:
                fm = UserProfileForm(instance=request.user) #esse hi usme data show krega nhi to blank ayega
        return render(request,'enroll/profile.html',{'form':fm})                    # ye to chlna hi h
    else:
        return redirect('login')



            ------------------> Make user visibles in admin View <------------------------------


      def UserProfile(request):
            if request.user.is_authenticated:
                  if request.method == 'POST':
                        if request.user.is_superuser:
                              fm = AdminProfileForm(request.POST,instance=request.user)
                              users = User.objects.all()                                          # yha se sare users aa rhe h
                        else:
                              fm = UserProfileForm(request.POST,instance=request.user)
                        if fm.is_valid:
                              fm.save()
                              messages.success(request,'User Data saved Successfully')
                  else:
                        if request.user.is_superuser == True:
                              fm = AdminProfileForm(instance = request.user)
                              users = User.objects.all()
                        else:
                              fm = UserProfileForm(instance=request.user) #esse hi usme data show krega nhi to blank ayega
                              users = None                                                  # isko yha Null kr diya h nhi to ye error dega     

                  return render(request,'enroll/profile.html',{'form':fm,'users':users})
            else:
                  return redirect('login')



                  ---------------------> User Details Form <---------------------------

      sabse phle to link bna do users ko 
      ----------->Profile.html
                  <form action="" method="post" novalidate >
                        {% csrf_token %}
                        {% for fm in form %}
                              {{ fm.label_tag }}{{fm}}{{fm.errors|striptags}} <br><br>
                        {% endfor %}
                        <input type="submit" value="SUBMIT">
                  </form>
                  <br>
                  {% if users != None %}
                        <table border = '2px'>
                              <tr><th>Users:</th><tr>
                        {% for user in users %}
                        <tr><td><a href="{% url 'userdetail' user.id %}">{{user.username}}</a></td></tr>           {% comment %}   user.email//user.first_name//user.last_name {% endcomment %}
                        {% endfor %}
                        </table>
                  {% endif %}
                  
                  {% if messages %}
                        {% for message in messages %}
                              {{message}} <br><br>
                        {% endfor %}
                  {% endif %}


      ------------> uska url define krdo
                        path('userdetail/<int:id>',views.userdetails,name='userdetail')

      ab uske liye views.py me function likhna h.
      ------------>
                        def userdetails(request,id):
                              if request.user.is_authenticated:
                                    pi = User.objects.get(pk=id)
                                    fm = AdminProfileForm(instance=pi)
                                    return render(request,'enroll/userdetails.html',{'form':fm})
                              else:
                                    return redirect('login')

      --------------------------> Now you can save and update User data <-------------------------

      def userdetails(request,id):
            if request.user.is_authenticated:
                  pi = User.objects.get(pk=id)
                  if request.method == 'POST':
                        fm = AdminProfileForm(request.POST,instance=pi)
                        if fm.is_valid():
                              fm.save()
                              messages.success(request,'Data edited successfully by admin')
                  else:
                        fm = AdminProfileForm(instance=pi)
                  return render(request,'enroll/userdetails.html',{'form':fm})
            else:
                  return redirect('login')


      -----------------------> gs57- Giving specific User, special permissions <----------------------------

      The myuser.groups.set([group_list]) method is used to set the groups associated with a user in Django.
       It's a convenient way to assign a user to specific groups. However, 
       Django provides various other methods and functions for working with groups and users. 
       Here are some of them:

----->Adding a User to a Group:
      You can add a user to one or more groups using the user.groups.add(group) method.

            user.groups.add(group1)
            user.groups.add(group2)


----->Removing a User from a Group:
      You can remove a user from a group using the user.groups.remove(group) method.

            user.groups.remove(group1)


----->Checking User Membership in a Group:
      To check if a user belongs to a specific group, 
      you can use the user.groups.filter(name='group_name').exists() method.

            user_in_group = user.groups.filter(name='group_name').exists()

      
----->Getting All Groups for a User:
      You can retrieve all the groups associated with a user using the user.groups.all() method.

            user_groups = user.groups.all()

      
----->Checking User Permissions for a Specific Object:
      To check if a user has a specific permission for a given object 
      (e.g., a model instance), you can use the user.has_perm('app_label.permission_codename') method.

            has_permission = user.has_perm('myapp.can_publish_article')


----->Get All Users in a Group:
      To retrieve all the users belonging to a specific group, you can use the group.user_set.all() method.

            users_in_group = group.user_set.all()


----->Getting All Permissions for a User:
      You can get all permissions (including those inherited from group memberships) for a user using 
      the user.get_all_permissions() method.

            all_permissions = user.get_all_permissions()


----->Checking User Membership in Multiple Groups:
      To check if a user belongs to multiple groups, you can use 
      the user.groups.filter(name__in=['group1', 'group2']).exists() method.

            user_in_groups = user.groups.filter(name__in=['group1', 'group2']).exists() 

------------------> When a model is created, Django will automatically create four default permissions for
------------------>the following actions.

      add: Users with this permission can add an instance of the model.

      delete: Users with this permission can delete an instance of the model.

      change: Users with this permission can update an instance of the model.

      view: Users with this permission can view instance of this model.

------------------>
                  Permission name follow a very specific naming conventions: appname.action_modlename
                  Example:
                          enroll.delete_blog

                  -----------------------> perms Templates Variable <----------------------------

      In Django, the perms template variable is a context variable that is automatically available in 
      your template when you're rendering a view that uses the Django authentication system. 
      This variable allows you to check a user's permissions in your template and conditionally 
      display content or control access to certain features based on those permissions.

      Example:
                  {% if user.has_perm "auth.can_add_user" %}
                        <a href="{% url 'add_user' %}">Add User</a>
                  {% endif %}


                        Most Useful Part of Django - No need to do anything with VIews.py


            synatx:- {% if perms.appname.operation_model %}   ----> {% if perms.enroll.delete_blog %}



      <!DOCTYPE html>
      <html lang="en">
      <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Document</title>
      </head>
      <body>
      <center>
            <h1>This is Dashboard Page.{{name}}</h1> 
            {% if perms.enroll.delete_blog %}     <!--here we can use view//change//add in place of delete-->
                  <input type="button" value="Delete"><br><br>
            {% else %}
            <h3>No permission</h3>
            {% endif %}

            {% if perms.enroll.add_blog %}     <!--here we can use view//change//add in place of delete-->
                  <input type="button" value="Add"><br><br>
            {% else %}
            <h3>No Add permission</h3>
            {% endif %}

            {% if perms.enroll.change_blog %}
                  <input type="button" value="Change"><br><br>
            {% else %}
            <h3>No change permission</h3>
            {% endif %}

            {% if perms.enroll.view_blog %}
                  <input type="button" value="View"><br><br>
            {% else %}
            <h3>No View permission</h3>
            {% endif %}
            {% comment %} <input type="button" value="Add"> <br><br>
            <input type="button" value="Change"><br><br> {% endcomment %}
            {% comment %} <input type="button" value="View"><br><br> {% endcomment %}
      
      <br><br>
            <a href="{% url 'logout' %}"><input type="button" value="Logout"></a>
            <a href="{% url 'password' %}"><input type="button" value="Change Password"></a>
            <a href="{% url 'signup' %}"><input type="button" value="GO to signup Page"></a>
      </center>
      </body>
      </html>


            -------------> If we want to add User immediately to a group after his signup <---------

Step-1: First of all create 1 Group and give it some permissions.

Step-2: Now do some changes in Views.py
            import Group from django.contrib.auth.models

            group = Group.objects.get(name = 'Editor')
            user.groups.add(group)


-------> Full Function
                        def UserSignup(request):
                              if request.method == 'POST':
                                    fm = SignUpForm(request.POST) #only takes data from  the forms
                                    if fm.is_valid():
                                          user=fm.save()
                                          group = Group.objects.get(name = 'Editor')
                                          user.groups.add(group)
                                          messages.success(request,'User Created successfully')
                                          messages.success(request,'Please go to Login Page to further proceed.')
                              else:
                                    fm=SignUpForm()
                              return render(request,'enroll/Usersignup.html',{'form':fm})

-------> Creating Full Delete Blog permissions using perms.

            first of all we need to show all blogs in our admin//Editor Page to select which we want to delete.
            for this we will import our model class where our data is stored..

      ------>Views.py   
                        def User_dashboard(request):
                              if request.user.is_authenticated:
                                    users = Blog.objects.all()
                                    return render(request,'enroll/Dashboard.html',{'name':request.user.username,'user':users})
                              else:
                                    return redirect('login')

      ------> HTML COde to View
                                    {% if perms.enroll.delete_blog %}     <!--here we can use view//change//add in place of delete-->

                                          <h2>This are your Published Blocks, Which Blog you want to delete.</h2>
                                          {% if user %}
                                                {% for use in user %}
                                                {{use.title}} <br>
                                                {% endfor %}
                                          {% endif %}
                                    {% endif %}


            now we will create delete button besides the blog...

            --------> Now we have 2 OPTIONSfor Blog deletion
                      
                      1st. POST method :- for this we have to create a form with post method.when anyone click 
                                          on it, It send POST request along with post request which will trigger 
                                          our delete function.

                              ------> Views.py  
                                                      def delete_blog(request,id):
                                                            pi = Blog.objects.get(pk=id)
                                                            if request.method == 'POST':
                                                                  pi.delete()
                                                            return redirect('dashboard')
                              
                              -------> HTML COde

                                                      {% if perms.enroll.delete_blog %}     <!--here we can use view//change//add in place of delete-->

                                                            <h2>This are your Published Blocks, Which Blog you want to delete.</h2>
                                                            {% if user %}
                                                                  {% for use in user %}
                                                                        {{use.title}} <br><br>

                                                                        <form action="{% url 'delete' use.id %}" method="post">
                                                                              {% csrf_token %}
                                                                        <input type="submit" value="DELETE">
                                                                        </form>
                                                                  {% endfor %}
                                                            {% endif %}
                                                            <br>
                                                                  
                                                            {% else %}
                                                            <h3>No permission</h3>
                                                      {% endif %}

                      2nd. GET method :- If we create simple a href then it will send only 'GET' request now we 
                                          will use same approach but for GET request

                              ------> Views.py:-      def delete_blog(request,id):
                                                            pi = Blog.objects.get(pk=id)
                                                            if request.method == 'POST':
                                                                  pi.delete()
                                                            else:
                                                                  pi.delete()
                                                            return redirect('dashboard')

                              -------> HTML CODE:-
                                                      
                                                      {% if perms.enroll.delete_blog %}     <!--here we can use view//change//add in place of delete-->

                                                            <h2>This are your Published Blocks, Which Blog you want to delete.</h2>
                                                            {% if user %}
                                                                  {% for use in user %}
                                                                  {{use.title}} &nbsp;&nbsp;&nbsp;&nbsp;<a href="{% url 'delete' use.id %}"><input type="button" value="Delete"></a> <br><br>
                                                                  {% endfor %}
                                                            {% endif %}<br>   
                                                            {% else %}
                                                            <h3>No permission</h3>
                                                      {% endif %}

--------------------------------------------------------------------------------------------------------------


                  -----------------------> Blog Project <--------------------------

      Here we use all our Previous Knowledge to create Full Functional Blog Websites,
      where all Editors can login and can 'Add'/'Edit' Post but not able to Delete the Post.
      And Admin can handle Everything...


      abhi humko krna h ki jo login h usko navbar me login and signup ka option dikahi na de....

------>{% if request.user.is_authenticated %}
          <li class="nav-item">
              <a class="nav-link" href="{% url 'dashboard' %}">DashBoard</a>
          </li>
          <li class="nav-item">
              <a class="nav-link" href="{% url 'logout' %}">Logout</a>
          </li>
        {% else %}

        <li class="nav-item">
            <a class="nav-link" href="{% url 'signup' %}">SignUp</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="{% url 'login' %}">Login</a>
        </li>

        {% endif %}


      ab humko Add Post krwana h to uske liye hmne jo Post ka model bnaya h uske through 1 form bnayenge
      phir uss form ke through hum data ko show krenge...

------> views.py
      from django.contrib.auth.decorators import login_required
                  def add_post(request):
                        if request.user.is_authenticated:  // @login_required
                              if request.method=='POST':
                                    fm = PostForm(request.POST)   #yha pe humne Postform ko phle bnya h taki hum usko render kr sake tabhi to edit ho payega
                                    if fm.is_valid():
                                    fm.save()
                                    fm = PostForm()
                              else:
                                    fm = PostForm()
                                    return render(request,'blog/addpost.html',{'form':fm})
                        else:
                              return redirect('login')

-----> forms.py
                  class PostForm(forms.ModelForm):
                        class Meta:
                              model = Post
                              fields = ['Title','Description']


      Ab humko jese hi koi author signup kre to usko Author wale group me add krdena h jisse ki usko 
      kuch permissions mil jayegi

------> First of all create Group name Author..
------> Give it necessary permissions..
------> Now we have to make changes in views.py
------> from django.contrib.auth.models import Group
------> Now in your signup function make user= fm.save()
                        group = Group.objects.get(name='Author')
                        user.groups.add(group)


------------------------------------------------------------------------------------------------------------------

                                    gs-58 Working with Cookies in django

In Django, cookies are small pieces of data that can be stored on the client's browser and used for various purposes, such as session management, user authentication, and tracking user preferences. Django provides a convenient way to work with cookies using its built-in `request` and `response` objects. Here, I'll provide you with a detailed guide on how to create, update, read, and delete cookies in a Django web application.

1. Import the required modules:

Make sure you have the necessary Django modules imported in your views or middleware.
                  from django.http import HttpResponse


2. Creating Cookies:

To create a cookie in Django, you can set a value in the response object's `set_cookie` method. 
Here's how you can create a cookie:
            response = HttpResponse("Cookie set")
            response.set_cookie('my_cookie', 'cookie_value')


You can set various attributes for the cookie, like the cookie's expiration time, domain, and path by passing 
additional parameters to the `set_cookie` method:
            response.set_cookie('my_cookie', 'cookie_value', max_age=3600, expires=None, path='/myapp/', 
            domain=None, secure=False, httponly=False, samesite=None)

3. Reading Cookies:

To read cookies in Django, you can access them through the `request.COOKIES` dictionary in your view or middleware. For example:
            def read_cookie(request):
            my_cookie_value = request.COOKIES.get('my_cookie', 'default_value')
            return HttpResponse(f"Value of 'my_cookie' is: {my_cookie_value}")

4. Updating Cookies:

You can update a cookie by setting a new value for it using the `set_cookie` method with the same cookie name,
as shown in the "Creating Cookies" section. This will overwrite the existing cookie.

5. Deleting Cookies:

To delete a cookie, you can set its expiration time to a value in the past using the `set_cookie` method,
effectively expiring the cookie. This will prompt the browser to remove the cookie on the next request.
            response = HttpResponse("Cookie deleted")
            response.set_cookie('my_cookie', '', max_age=0)
------>     delete_cookie('name')


Additionally, you can set the `expires` attribute to a past date to delete the cookie:
            from datetime import datetime

            response = HttpResponse("Cookie deleted")
            response.set_cookie('my_cookie', '', expires=datetime(1970, 1, 1))


--------->Remember that if you're using `max_age`, it takes precedence over the `expires` attribute.


-----------------------------------------------------------------------------------------------------------------

sabse phle humko cookie ko set krna hota H
------> views.py
      import HttpResponse
      from datetime import datetime,timedelta

      def setcookie(request):
            response = render(request,'student/setcookie.html')
            response.set_cookie('name','harsh',expires=datetime.utcnow()+timedelta(days=2),)  #  max_age=5 ---->max_age = seconds after that it get deleted.
            response.set_cookie('name','Ashish',expires=datetime.utcnow()+timedelta(days=2),) #lastupdated value hi lega
            response.set_cookie('lname','harsh',expires=datetime.utcnow()+timedelta(days=2),) #append cookie
            return response

      esse cookie set ho jayegi humare browser me ----> microsoft edge ka use kr rhe H
      but ye only jab tk humara browser open h tab hi rhegi..
      kyoko humne max_age nhi lgayi h isiliye


------> Now get cookie 
      
      def getcookie(request):
            # name=request.COOKIES['name']      #isme kya problem h ki error de dega agar cookie create nhi hui to
            name = request.COOKIES.get('name','guest') #isme error nhi ayega koi aur agar manlo name ke naam ki koi value nhi h to wo guest de dega.
            return render(request,'student/getcookie.html',{'name':name})

------> Now delete cookie

      def deletecookie(request):
            response = render(request,'student/delcookie.html')
            response.delete_cookie('name')
            return response


      Best example of cookies is Flipkart cart, if we add something in our cart,
      then it will remain in our cart till we not cancel or buy it



      ---------------------------> SALT/Signed COOKIES {Encrypted Cookies} <----------------------------------

      In Django, you can create and get signed cookies using the `set_signed_cookie` and `get_signed_cookie` methods provided by the `HttpResponse` object. Signed cookies are similar to regular cookies, but they are cryptographically signed to ensure their integrity. Here's how you can create and get signed cookies:

------>Creating a Signed Cookie:

            from django.shortcuts import render
            from django.http import HttpResponse

            # Create a signed cookie and set it in the response
            def create_signed_cookie(request):
            response = HttpResponse("Signed Cookie Created")
            response.set_signed_cookie('username', 'john', salt='mysalt', max_age=3600)  
            # 'mysalt' is a secret key for signing the cookie
            return response


      In this example, we're setting a signed cookie with the name 'username' and the value 'john'.
      We specify a salt (secret key) for signing the cookie. The `max_age` parameter sets the cookie's
      expiration time in seconds.

------>Getting a Signed Cookie:

            from django.http import HttpResponse

            # Get a signed cookie
            def get_signed_cookie(request):
            username = request.get_signed_cookie('username', default='guest', salt='mysalt')
            return HttpResponse(f'Hello, {username}')

      In this example, we retrieve the value of the 'username' signed cookie. 
      If the cookie is not present or the signature is invalid, the default value 'guest' is used. 
      Be sure to use the same 'salt' key that was used when creating the signed cookie.

      Make sure to keep your salt (secret key) safe and don't share it publicly,
      as it's crucial for verifying the integrity of signed cookies.

      In your Django project, you can create and get signed cookies using these views. 
      Don't forget to wire these views to URLs in your project's `urls.py` file, and use appropriate templates 
      for rendering responses as needed.

------> But we use            SESSION Framework


                  -------------------------> gs59 - Session Framework <--------------------------

----->The session framework uses a session ID, which is typically stored in a cookie, 
      to associate a user with their session data.

----->The session data is stored on the server-side, not on the user's browser, making it more secure.

----->By default, Django uses a database-based session storage mechanism, but you can configure it to use other
      storage options as well.


--------------> Some Session Methods


                  In Django, the session framework provides a variety of methods for working with sessions. Here are some of the most commonly used session-related methods:

      1. Setting Session Data:

            - `request.session[key] = value`: Store data in the session using the session key.
            - `request.session.update(data_dict)`: Update the session with data from a dictionary.
            - `request.session.set_expiry(seconds)`: Set the session's expiration time in seconds.
            - `request.session.set_test_cookie()`: Set a test cookie to check if cookies are enabled in the user's browser.

      2. Getting Session Data:

            - `value = request.session.get(key, default)`: Retrieve data from the session by key. If the key doesn't exist, it returns the default value.
            - `value = request.session[key]`: Retrieve data from the session by key. If the key doesn't exist, it raises a KeyError.
            - `session_dict = request.session.items()`: Get all key-value pairs in the session as a dictionary.
            - `keys = request.session.keys()`: Get a list of all keys in the session.
            - `values = request.session.values()`: Get a list of all values in the session.
            - `exists = request.session.has_key(key)`: Check if a key exists in the session. (Deprecated in Python 3.x; use `key in request.session` instead.)

      3. Deleting Session Data:

            - `del request.session[key]`: Delete a specific key from the session.
            - `request.session.pop(key)`: Remove and return the value associated with a key.
            - `request.session.clear()`: Clear all data in the session.
            - `request.session.flush()`: Delete the session data and regenerate the session key.
            - `request.session.cycle_key()`: Regenerate the session key without losing data.

      4. Session Expiry:

            - `request.session.set_expiry(seconds)`: Set the expiration time for the session in seconds.

      5. Session Configuration and Information:

            - `request.session.session_key`: Get the current session key.
            - `request.session.exists(session_key)`: Check if a session with the specified key exists.
            - `request.session.get_decoded()`: Get a dictionary of session data.
            - `request.session.get_expiry_age()`: Get the remaining session age in seconds.
            - `request.session.get_expiry_date()`: Get the session's expiration date and time.

      6. Using Test Cookies:

            - `request.session.test_cookie_worked()`: Check if the test cookie has been set and worked.

These methods allow you to manipulate and access session data throughout your Django application. 
Keep in mind that session data can be stored in different backends, such as database-backed sessions, 
cache-based sessions, or file-based sessions, depending on your project's configuration.

      ----------------------------------> Practical Knowledge <---------------------------------

----->Storing Data in the Session:
      You can store data in a user's session using the request.session dictionary-like object.

            # Storing data in the session
            request.session['user_id'] = 123
            request.session['username'] = 'john_doe'


----->Retrieving Data from the Session:
      To retrieve data from the session, access it as you would with a Python dictionary.

            # Retrieving data from the session
            user_id = request.session.get('user_id', None)
            username = request.session.get('username', 'guest')


----->Deleting Data from the Session:
      You can delete data from the session using the del keyword or the pop method.

            # Deleting data from the session
            del request.session['user_id']
            request.session.pop('username', None)


            ------------------------> Our Project <----------------------------------- Age = 2 weeks By default

            from django.shortcuts import render

            # Create your views here.
            def setsession(request):
                  request.session['name'] = 'Harsh'   -------------> Private session key: qxzlviz4zn3fm3ayljskyltc59198kdx
                  request.session['lname'] = 'sahu'
                  return render(request,'student/setsession.html')



            def getsession(request):
                  # name = request.session['name']
                  # Alternate Way
                  name = request.session.get('name',default='guestx')   #same as cookie here we get guestx if our session not already created//store.
                  lname = request.session.get('lname',default='guest ki cast')
                  return render(request,'student/getsession.html',{'name':name,'lname':lname})



            def deletesession(request):
            if 'name' in request.session:
                  # present = 'session contains name'
                  del request.session['name']
                  del request.session['lname']
            return render(request,'student/delsession.html')  # our data is deleted but session is showing at browser


            def home(request):
            return render(request,'student/home.html')




                              # #We can Add Multiple Data in 1 session # #


--------------------------------------------------------------------------------------------------------------------
            
            
            -------------------> GS60  - Special Methods in session Framework <----------------------

1.st Using Keys(): to get keys

      def getsession(request):
            # name = request.session['name']
            # Alternate Way
            name = request.session.get('name',default='guestx')   #same as cookie here we get guestx if our session not already created//store.
            lname = request.session.get('lname',default='guest ki cast')
            keys = request.session.keys()                          # sare keys store ho ja rhe h keys me
            return render(request,'student/getsession.html',{'name':name,'lname':lname,'keys':keys})

2.nd Using items(): To get all items

      def getsession(request):
            # name = request.session['name']
            # Alternate Way
            name = request.session.get('name',default='guestx')   #same as cookie here we get guestx if our session not already created//store.
            lname = request.session.get('lname',default='guest ki cast')
            keys = request.session.keys()                          # sare keys store ho ja rhe h keys me
            items = request.session.items()
            return render(request,'student/getsession.html',{'name':name,'lname':lname,'keys':keys,'items':items})


3.rd Using setdefault(): To add new dictionary value

      def getsession(request):
            # name = request.session['name']
            # Alternate Way
            name = request.session.get('name',default='guestx')   #same as cookie here we get guestx if our session not already created//store.
            lname = request.session.get('lname',default='guest ki cast')
            keys = request.session.keys()                          # sare keys store ho ja rhe h keys me
            items = request.session.items()
            age = request.session.setdefault('age','26')          # ye value session end hone ke bad bhi dikh rhi h
            return render(request,'student/getsession.html',{'name':name,'lname':lname,'keys':keys,'items':items,'age':age})


4.th Using flush(): To delete store data as well as session file from browser.

            def deletesession(request):
                  if 'name' in request.session:
                        # present = 'session contains name'
                        # del request.session['name']
                        # del request.session['lname']
                        request.session.flush()       # THis will delete all data from server as well as remove session from browser.
                  return render(request,'student/delsession.html')  # our data is deleted but session is showing at browser


----------------------> Get expiry date of session

            1. request.session.get_session_cookie_age() : this will give in seconds about default age of session which is 14 days

            2. request.session.get_expiry_date() : this will provide a date with time.

            3.request.session.get_expiry_age(): this will give actual set expiry date. After its expiry it will show default date.
                                                 if you've set a custom session cookie age, this method will give you that value, 
                                                 which might differ from the default cookie age

            4.request.session.get_expire_at_browser_close() : this give True or false if age is set till browser open then it 
                                                              will return true else false.


----------->def getsession(request):
                  name=request.session.get('name',default='guest')
                  ages = request.session.get_session_cookie_age()    #ages = request.session.get_session_cookie_age--> So, if you use it like this, ages will not contain the session age but will instead contain a reference to the method.
                  age = ages/(60*60*24)
                  real_age = request.session.get_expiry_age()
                  expiry = request.session.get_expiry_date()
                  # exp = expiry/(60*60*24)
                  browser = request.session.get_expire_at_browser_close()
                  return render(request,'student/getsession.html',{'name':name,'age':age,'exp':expiry,'bro':browser,'real':real_age})


----------------> But there is a problem, by these methods our session get deleted in browser but it will remain in our database which 
                  consumes our resouces..

                  To solve this issue we use ----> request.session.clear_expired()


                  def delsession(request):
                        request.session.flush()
                        request.session.clear_expired()

-----------------------------------------------------------------------------------------------------------------------------------------

      ----------------------> gs62 - session--set_test_cookie(),test_cookie_worked(),delete_test_cookie() <---------------------


      Theoretical - Approach

      In Django, `set_test_cookie()`, `test_cookie_worked()`, and `delete_test_cookie()` are methods used for 
      working with test cookies to check whether cookies are being stored and retrieved correctly. 
      They are often used for testing cookie support in a user's browser. Here are examples and explanations 
      for each of these methods:

1. `set_test_cookie()`:
            - `set_test_cookie()` is used to set a test cookie in the user's browser. 
            This cookie is typically a session cookie that is short-lived and contains a unique value. 
            You can use it to check if the user's browser properly handles cookies.
            - Example:
                  from django.http import HttpResponse

                  def set_test_cookie_view(request):
                        request.session.set_test_cookie()
                        return HttpResponse("Test cookie set.")
            - In this example, when a user visits the `set_test_cookie_view`, a test cookie is set in their browser.

2. `test_cookie_worked()`:
            test_cookie_worked()` is used to check whether the test cookie set by set_test_cookie() 
            has been successfully stored and retrieved in the user's browser. It returns `True` if the test 
            cookie is found and `False` otherwise.
            - Example:
                  from django.http import HttpResponse

                  def test_cookie_view(request):
                        if request.session.test_cookie_worked():
                              return HttpResponse("Test cookie worked.")
                        else:
                              return HttpResponse("Test cookie failed.")
            - In this example, when a user visits the `test_cookie_view`, it checks if the test cookie set by
             `set_test_cookie()` has been successfully retrieved. If it has, it returns "Test cookie worked," 
             and if not, it returns "Test cookie failed."

3. `delete_test_cookie()`:
            delete_test_cookie() is used to delete the test cookie set by `set_test_cookie() 
            from the user's browser. This is typically done after you've checked if the test cookie worked.
            - Example:
                  from django.http import HttpResponse

                  def delete_test_cookie_view(request):
                        request.session.delete_test_cookie()
                        return HttpResponse("Test cookie deleted.")
            - In this example, after checking whether the test cookie worked in a previous view, 
            you can call `delete_test_cookie()` to remove the test cookie from the user's browser.

      These methods are often used in combination to verify whether a user's browser correctly handles cookies,
      especially in scenarios where cookies are essential for the proper functioning of a web application.



            ----------------------------------->gs63- session settings <------------------------------------

--------------->settings.py me changes krne h ye sare............

Django provides various session settings that allow you to configure how sessions work in your web application. 
These settings are typically defined in your project's settings file, usually named `settings.py`. 
Here are some of the key session-related settings in Django:

1. `SESSION_ENGINE`:
      Specifies the engine to use for session management. The default is `'django.contrib.sessions.backends.db'`,
      which stores session data in the database. Other options include using cache, file-based storage, and more.

2. `SESSION_COOKIE_NAME`:
      The name of the cookie to use for storing session data in the user's browser. 
      The default is `'sessionid'`.

3. `SESSION_COOKIE_PATH`:
      The path to which the session cookie will be available. The default is `'/'`, which means it's available for 
      the entire site.

4. SESSION_COOKIE_AGE :
      The duration of the session cookie's age in seconds. The default is 1209600 seconds (2 weeks). 
      You can set it to control how long a session remains active.

5. `SESSION_EXPIRE_AT_BROWSER_CLOSE`:
      A boolean that, when set to `True`, makes the session expire when the user's browser is closed. 
      The default is `False`.

6. `SESSION_SAVE_EVERY_REQUEST`:
      A boolean that, when set to `True`, forces the session to be saved on every request. The default is `False`. 
      Set this to `True` if you want to update the session's last accessed time on every request.

7. `SESSION_COOKIE_SECURE`:
      A boolean that, when set to `True`, ensures that the session cookie is only sent over secure (HTTPS) 
      connections. The default is `False`.

8. `SESSION_COOKIE_HTTPONLY`:
      A boolean that, when set to `True`, restricts the session cookie to HTTP requests and prevents JavaScript 
      from accessing it. The default is `False`.

9. `SESSION_COOKIE_SAMESITE`:
      Specifies the SameSite attribute for the session cookie. It can be set to `'Lax'`, `'Strict'`, or `None`.
      The default is `'Lax'`.

10. `SESSION_COOKIE_DOMAIN`:
      Allows you to specify the domain for which the session cookie is valid. By default, it's `None`, which 
      means it's valid for the current domain.

11. `SESSION_FILE_PATH`:
      If you're using file-based session storage, this setting specifies the directory where session files are 
      stored.

12. `SESSION_CACHE_ALIAS`:
      If you're using cache-based session storage, this setting specifies the cache backend to use for session 
      storage.

To configure these settings, you can add or modify them in your `settings.py` file. For example:

# settings.py

# Set session expiration time to 30 minutes
SESSION_COOKIE_AGE = 1800

# Make the session expire when the browser is closed
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
```

      These settings allow you to customize how session management works in your Django web application to meet your 
      specific needs.


                  ---------------------------> Practical Approaches <------------------------

      SESSION_COOKIE_AGE = 400   #isko bdla h
      SESSION_COOKIE_NAME = 'session_ka_name_change_kr_diya'   #Bydefault = 'sessionid'
      # SESSION_COOKIE_PATH = '/HOME'  #isse humara path change ho jata h session
      # SESSION_COOKIE_SECURE = True
      # SESSION_ENGINE = 'django.contrib.sessions.backends.file'  #isse humara session default table me save na hokr file me hoga
      # SESSION_EXPIRE_AT_BROWSER = True # False By default
      # SESSION_FILE_PATH = 'path dedo isme jha session store krwana ho'



            -------------------------------> Session_Expire <----------------------------------


      def setsession(request):
            name=request.session['name'] ='harsh'
            request.session.set_expiry(10)
            # request.session.set_expiry(0)           #----> This will make session expire after browser get closed.
            return render(request,'student/setsession.html')

      
      def getsession(request):
            if 'name' in request.session:
                  name=request.session.get('name',default='guest')
                  request.session.modified = True                                #iske wajah se refresh ho ja rha h humare refresh krne se
                  return render(request,'student/getsession.html',{'name':name})
            else:
                  return HttpResponse('Your Session is expired')


-------------------------------------------------------------------------------------------------------------------


                  -----------------------> FILE BASED SESSION <--------------------------
            
      isme sabse phle baki ka sara kaam krlo ---> session create/delete/get

      ab settings.py me changes krna h---->
      and create a folder where you want to store your sessions data.
      import os 

      SESSION_ENGINE = 'django.contrib.sessions.backends.file'
      SESSION_FILE_PATH = 'os.path.join(BASE_DIR,'sessions')
      SESSION_COOKIE_NAME = 'Harsh_ka_data'

-----> Delete krne pe humara folder se session delete ho jayega ---> because we use request.session.clear_expired().

------------------------------------------------------------------------------------------------------------------


                  ----------------------> gs64- Page Count <------------------------
      
      dekho iske liye simple sa function likhna h ---->

      sabse phle get krne ki bnado session jo ki exist na krta ho.
      phir uski value ko 1 increment krdo..
      phir incremented value ko store krado variabl me...
      ab session variable jo phle exist nhi krta tha usme value store krado incremented variable ki sur usko pass krdo page me.


      def counter(request):
            ct = request.session.get('count',default=0)
            addcount = ct +1
            request.session['count'] = addcount
            request.session.set_expiry(0)
            return render(request,'counter/home.html',{'add':addcount})


-----------------------------------------------------------------------------------------------------------------

                  -----------------------> gs65 - Cache handling in django <-----------------------


      Caching in Django is a mechanism that helps improve the performance and speed of web applications by 
      storing and reusing previously computed or retrieved data. Caching is especially useful for reducing 
      database queries and processing time. Django provides a robust and flexible caching system that can be
      configured in various ways.

Here's an overview of caching in Django:

1. Cache Framework:
            Django's caching system is built on top of the low-level cache API. 
            It allows you to use different cache backends, including in-memory caches like Memcached or local
            memory, and even distributed caches. You can configure the cache backend in your project's settings.

            # settings.py
            CACHES = {
                  'default': {
                  'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
                  'LOCATION': '127.0.0.1:11211',
                  }
            }

2. Caching Decorators:
            Django provides decorators to cache the results of views and methods. 
            The most common decorators are `cache_page` and `cache_control`. 
            You can use these decorators to cache entire views or control the cache settings for specific views.


            from django.views.decorators.cache import cache_page

            @cache_page(60 * 15)  # Cache the view for 15 minutes
            def my_view(request):
                  # Your view logic here

3. Low-Level API:
            You can use the low-level API to manually cache data in your views. 
            For example, you can cache the results of expensive database queries or function calls.

            from django.core.cache import cache

            def get_data():
                  data = cache.get('my_data')
                  if data is None:
                        # Data not in cache, fetch and cache it
                        data = expensive_database_query()
                        cache.set('my_data', data, 300)  # Cache for 5 minutes
                        return data

4. Template Fragment Caching:
                  You can cache parts of a template to reduce rendering time. 
                  Use the `{% cache %}` template tag to cache the output of a template block.

                  {% load cache %}

                  {% cache 600 my_template_fragment %}
                        <!-- Content to be cached for 10 minutes -->
                  {% endcache %}
                

5. Cache Invalidation:
            Django provides methods for cache invalidation, allowing you to clear specific cache keys when 
            data changes. For example, you can clear the cache when a model instance is updated.

                 
                  from django.core.cache import cache

                  def update_model(instance):
                        # Update the model
                        instance.save()

                        # Clear the cache for this specific instance
                        cache.delete('my_data')


6. Vary on Headers:
            You can vary the cache on request headers to cache different versions of a page based on specific
            conditions, such as user agents or cookies. This can be achieved using the `@vary_on_headers` decorator.


                  from django.views.decorators.vary import vary_on_headers

                  @vary_on_headers('User-Agent', 'Cookie')
                  def my_view(request):
                        # Your view logic here


Django's caching system is highly configurable, and you can adapt it to suit the specific needs of your project. 
Caching can significantly improve the performance of your Django web application by reducing the load on the 
database and speeding up response times for frequently accessed data.


                              ----------> Practical Knowledge <------------

There are 3 type of Database caching

      1. Per-site caching :This simply cache your entire website.

      2.Single/Per-view function caching : A more efficient way to use the caching framework is by caching the output
                                          of individual views.

      3.Template Fragment Caching : This gives you more control what to cache.

                              -----------> Per-Site Caching -on database <-------------


------>First of all create simple website..
      Now open settings.py then go to moddleware section..
      Add two things there 

      Above - 'django.middleware.common.CommonMiddleware',

                  'django.middleware.cache.UpdateCacheMiddleware',

      Below - 'django.middleware.common.CommonMiddleware',

                  'django.middleware.cache.FetchFromCacheMiddleware',

-------> Now at bottom create CACHE section:-

            CACHE_MIDDLEWARE_SECONDS = 30                   #life of cache
            CACHES = {
                  'default':{
                  'BACKEND':'django.core.cache.backends.db.DatabaseCache',
                  'LOCATION':'Enroll_cache',                                                   #ye name h
                  }
            }


            All Done. Now your Cache will store your Entire websites for 30sec
            To use this we have to create Cachetable in our database...

-----------> For this we use python manage.py createcachetable

-------------------------------------------------------------------------------------------------------------------


                  ------------> gs66-Per site Caching on file <-----------------


      isme bhi middleware me apko wahi dono add krna h.
      isme CACHE section me changes hoga....

      CACHE_MIDDLEWARE_SECONDS = 30
      CACHES = {
      'default':{
            'BACKEND':'django.core.cache.backends.filebased.FileBasedCache',
            'LOCATION':r'C:\Users\HP\Desktop\geeky_shows\gs66\cache',       
            #yha pe path ke aage r lgana hota h // humko forward slash(\) use krne h.
      }
      }

-----------------------------------------------------------------------------------------------------------------

                        -------------> gs67 - Local Memory Caching!! Not used much <---------------

      isme bhi same middleware me changes krna h.
      baki sara kaam humare CACHES section me hi hoga..
      isme humko migrate krna pdta h..

      CACHES = {
            'default':{
                  'BACKEND' : 'django.core.cache.backends.locmem.LocMemCache',
                  'LOCATION' : 'unique-snowflake',
            }
      }

-------------------------------------------------------------------------------------------------------------------

                  ---------------------->gs67 Per views Cache-in database <---------------------

      
      Ye humara 2nd tyoe of caching h..
      Per-view function caching : A more efficient way to use the caching framework is by caching the output
                                  of individual views.

      first of all we need to import 1 Decorator..

------>from django.views.decorators.cache import cache_page

      @cache_page(timeout,cache,key_prefix)         ------------>3 Arguments
      def my_view(request)


      1. timeout: THe cache timeout, in seconds.

      2. cache: This directs the decorators to use a specific cache(from your CACHES setting) when caching view results.
         By default, the default cache will be used.

      3. key_prefix: This argument is used to provide a custom key prefix for the cache. 
         The cache key is generated based on the URL of the request and the key prefix. 
         This can be helpful if you want to differentiate between different variations of the same view. 

            For example, @cache_page(300, key_prefix='my_page')

                  -----------------> 2 Methods to Apply Cache per view <---------------------
      
      1.st Method:

            For Example: @cache_page(60,cache='some_cache',key_prefix='some_key')
                        def home(request):
                              pass

      2.nd Method:

            we can define it in urls.py file

            For Example:

                  from django.views.decorators.cache import cache_page

                  urlpatterns = [
                        path('',cache_page(60)(views.home),name='home'),
                  ]

-----------------> Views.py

                        from django.shortcuts import render
                        from django.views.decorators.cache import cache_page

                        # Create your views here.
                        @cache_page(20)  #isko krne ke bad caches ka kaam nhi krna pdta h settings.py me ye easy aur convenient h. Table nhi bni h but chal rha h sahi.
                        def home(request):
                        return render(request,'caches/home.html')

                        @cache_page(30)
                        def contact(request):         #iska cache nhi hua h to instant changes dekhne ko mil rha h.
                        return render(request,'caches/contact.html')

            ------------------> Now Using our second method in Next gs file <---------------------------

------------------------------------------------------------------------------------------------------------------

                     -------------> gs68- caching Done by urls.py <----------------

      isme kuch nhi bus urls.py me hum apna cache_page add krenge....

---------> urls.py
            from django.contrib import admin
            from django.urls import path
            from caches import views
            from django.views.decorators.cache import cache_page

            urlpatterns = [
            path('admin/', admin.site.urls),
            path('',cache_page(20)(views.home),name = 'home'),
            path('con/',views.contact,name='contact')
]

            -----------------------------------> File System <------------------------------------------


-----------------> baki ka file and same memory waa same hi h jese per site cache me kiya tha to usko bar bar nhi kr rhe H
                  wahi 
                  CACHES me ja kr database ki file dal do or uski LOCATION

                  CACHES = {
                        'default':{
                              'BACKEND':'django.core.cache.backends.filebased.FileBasedCache',
                              'LOCATION':r'C:\Users\HP\Desktop\geeky_shows\gs66\cache',
                        }
                  }

-------------------------------------------------------------------------------------------------------------------


            -------------------------> gs69 Template Fragment Caching - wahi 3 methods hote h database,file,memory <-------------------------

      Template ke parts ko cache kr sakte h..

------>
            {%load cache %} ----- THis is gives access to cache tag in templates.

            {% cache %} ----- This templates tag caches the content of the block for a given amount of time.

SYNTAX :-
            {% cache timeout name variable using = '' %}----------{% endcache name %}



      Timeout - The cache time out isn seconds, THe fragment is cached forever if timeout is None.

      Name - The name to give cache fragment.The name will be taken as is, do not use a variable.

      Variable - This can be a variable with or without filters.This will cache multiple copies of Fragments 
                 depending on some dynamic data that appears inside the fragment.

      using - The cache tag will try to use the given cache.If no such cache exist, it will fall back to using 
            the default cache.


---------------------> HTML file

                              <!DOCTYPE html>
                                    {% load cache %}
                                    <html lang="en">
                                    <head>
                                          <meta charset="UTF-8">
                                          <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                          <title>Document</title>
                                    </head>
                                    <body>
                                          <h1>Course 1</h1>
                                          <h1>Course 2</h1>
                                          {% cache 20 course %}
                                          <h1>Course 3</h1>
                                          <h1>Course 4</h1> 
                                          {% endcache course %}
                                    </body>
                              </html>

---------------------------------> same esse hi files me bhi kr sakte h, LocMemCache me bhi same approach h.


-------------------------------------------------------------------------------------------------------------------


      ----------> gs70 - Low level Cache Api.kuch part ko cache krne ke liye use hota h <----------

      
      Jo data frequestnly change nhi hota h usko hum cache krte  H

      from django.core.cache import cache

      cache.set(key,value,timeout =DEFAULT_TIMEOUT,version = None) This method is used to set cache.

            where,
                  key - It should be str.
                  value - It can be any pickleable Python object.
                  timeout - It is number of seconds the value should be stored in the cache.
                             If it is set to none cache value stored forever. 
                             A timeout of 0 wont cache the value.
                  version - It is an int.You can set cache with same key but differet version.


      cache.get(key,default=None,version = None) - This method is used to get cache.if key does'nt exist then return default.
                  
            where,
                  default - This is specific hich value to return if the object does'nt exist in the cache.

      
      cache.add (key,value,timeout = Default_timeout,version = None) - 
                                                      
                        This method is used to add a key only it does'nt exist.
                        It will not update the cache.
                        check return value to know value is stored in cache or not
                        It will return True if stored.

      
      cache.get_or_set(key, default, timeout=None, version=None)-
                        In Django, cache.get_or_set is a convenient method for retrieving a value from the cache 
                        if it exists, or setting a value in the cache if it doesn't exist. 
                        This method is available in Django's caching framework and provides a way to implement 
                        caching for frequently used data.


      cache.set_many(data, timeout=None, version=None)-
                        In Django, the cache.set_many method allows you to set multiple key-value pairs in the 
                        cache at once. This can be useful for efficiently caching multiple items in a single 
                        operation, which can help reduce the overhead of making multiple cache calls.

                        from django.core.cache import cache

                        def cache_multiple_items():
                              data = {
                                    'key1': 'value1',
                                    'key2': 'value2',
                                    'key3': 'value3',
                              }
                              
                              timeout = 3600  # Cache all items for 1 hour
                              
                              cache.set_many(data, timeout=timeout)

      cache.get_many(keys,version = None) - 
                        In Django's caching framework, the cache.get_many method allows you to retrieve multiple 
                        values from the cache at once, given a list of keys. This can be a more efficient way to 
                        fetch multiple cache values in a single operation, reducing the overhead of making 
                        separate cache calls for each key.


                        from django.core.cache import cache

                        def get_multiple_items_from_cache():
                              keys = ['key1', 'key2', 'key3']
                              
                              cached_data = cache.get_many(keys)
                              
                              # 'cached_data' will be a dictionary where keys correspond to cache keys and values are
                              the cached data.
                              
                              return cached_data

      
      cache.delete(key, version=None) - 

                        In Django, the cache.delete method allows you to remove a specific item from the cache
                        based on its key. This method is useful for cache invalidation when you need to remove 
                        cached data that is no longer valid or should not be used.


                        from django.core.cache import cache

                        def delete_item_from_cache():
                              cache_key = 'my_cached_data'
                              
                              # Delete the item from the cache
                              cache.delete(cache_key)

      
      cache.delete_many(keys,version = None) - 
                        This method is used to clear a bunch of keys at once. It can take a list of keys to be cleared.

      
      cache.clear() -
                  In Django's cache framework, the cache.clear method allows you to clear (remove) all items from the cache. 
                  It is a convenient way to invalidate all cached data in one operation.

      cache.touch(key,timeout = Default_timeout,version =None) - 
                  This method is used to set the new expiration time for a key.touch() returns True if the key was 
                  successfully touched otherwise false.


      cache.incr(key,delta = 1 ,version = none)
      cache decr(key,delta = 1 ,version = none)

      cache.close() -You can close the connection to your cache with close() if implemented by the cache backend.


---------> Practical Approach 
                                     > get and set <

            def home(request):
                   mv=cache.get('movie',default='has_expired',)
                   if mv == 'has_expired':
                       cache.set('movie','The one',30)
                       mv = cache.get('movie')
                  return render(request,'enroll/home.html',{'movie':mv})

                                    > get_or_set <

            def home(request):
                  mv = cache.get_or_set('fees',45000,30,version = 2)
                  return render(request,'enroll/home.html',{'movie':mv})

                                    > get_many and set_many <

            def home(request):
                  data = {'name':'hars','lname':'sahu'}
                  cache.set_many(data,30)
                  sv = cache.get_many(data)
                  print(sv)
                  return render(request,'enroll/home.html',{'stu':sv})

                                    > delete <

            def home(request):
                  cache.delete('fees',version=2)
                  return render(request,'enroll/home.html')


                                    > Increament and Decrement <

            def home(request):
                  cache.set('roll',101,30)
                  rv=cache.get('roll')
                  print(rv)
                  iv=cache.incr('roll',delta=5)
                  print(iv)
                  return render(request,'enroll/home.html')

                                    > Clear <

            def home(request):
                  cache.clear()
                  return render(request,'enroll/home.html')

            >>>> Isko humlog user ko to denge nhi isiliye hum isko powershell me run krte H

                  python manage.py shell   --- it will open shell 
                  from django.core.cache import cache
                  cache.clear()
                  quit()  ---- to quit the shell


------------------------------------------------------------------------------------------------------------------

                  --------------------->gs71- Signals And Built In signals <--------------------------

      3 things required..
1. Sender - who will send signal.
2. Signal - Signal
3. Receiver - who will receive signal.

            In Django, the term "signal" refers to a mechanism for allowing various parts of your application to 
            communicate and respond to specific events or triggers. Signals are used to enable decoupled and 
            extensible applications by allowing different components of your Django project to send and receive 
            notifications about certain actions or changes within the application.

            Django provides a built-in signal framework, which includes both sending and receiving signals. 
            Signals are defined using the `django.dispatch` module, and they allow you to create custom signals 
            or connect to built-in signals. The two primary functions involved in signals in Django are `send()` 
            and `connect()`.

1. `signal.send(sender, **kwargs)`: This function is used to send a signal. It takes two arguments:
   - `sender`: The sender of the signal. It can be any Python object, and it's often the model or component that 
      triggers the signal.
   - `**kwargs`: A dictionary containing keyword arguments related to the signal event.

2. `signal.connect(receiver, sender, **kwargs)`: This function is used to connect a receiver function to a signal. 
      It specifies what should happen when a specific signal is sent. It takes three arguments:
   - `receiver`: The function that should be called when the signal is sent.
   - `sender`: An optional parameter that allows you to specify which sender (or senders) should trigger the 
   receiver. If set to `None`, the receiver will respond to signals from any sender.
   - `**kwargs`: Additional keyword arguments that can filter or modify the behavior of the signal for the receiver.

Here's a basic example of how signals work in Django. Let's say you want to send an email to a user whenever a new 
post is created. You can use signals to achieve this:


                        from django.db.models.signals import post_save
                        from django.dispatch import receiver
                        from django.core.mail import send_mail
                        from myapp.models import Post

                        @receiver(post_save, sender=Post)
                        def send_email_on_new_post(sender, instance, **kwargs):
                        # This function is called whenever a new Post object is saved.
                        # You can customize the email sending logic here.
                        send_mail(
                              'New Post Created',
                              'A new post has been created on our website!',
                              'sender@example.com',
                              [instance.author.email],
                              fail_silently=False,
                        )


In this example, the `@receiver` decorator connects the `send_email_on_new_post` function to the `post_save` signal
of the `Post` model. Whenever a new post is created, the function is executed, sending an email to the post's 
author.

Django's built-in signals are a powerful way to extend and customize the behavior of your application by reacting 
to various events and actions.
            

------------------> Login and Logout Signals:
                              The auth framework uses the following signals that can be used for notification when 
                              a user in or out.

            django.contrib.auth.signals
            user_logged_in(sender,request,user)-Sent when a user logs in successfully.
                  sender - The class of the user that just logged in.
                  request - The current HttpRequest instance.
                  user - the user instance that just logged in.

            user_logged_out(sender,request,user) - Sent when the logout method is called.
                  sender - THe class of the user that just logged out or None if the user was not authenticated.
                  request - THe current HttpRequest instance.
                  user - The user instance that just loggedout or None if the user was not authenticated.

            user_login_failed(sender,credentials,request) - Sent when the userfailed to login.

                  sender - THe name of the module used for authentication.
                  credentials - A dictionary of keyword arguments containning the user credentials that were passed
                  to authenticate() or your own custom authentication backend.
                  request - THe HttpRequest object,if one was provided to authenticate() 


--------------------> Practical Approach

      1. Create signals.py in app folder.

      ----->import required modules

            from django.contrib.auth.signals import user_logged_in,user_logged_out,user_login_failed
            from django.contrib.auth.models import User

            def login_success(sender,request,user,**kwargs):
                  print('-------------------------------------------')
                  print('logged-in signals... Run Intro..')
                  print('sender:',sender)
                  print('request:',request)
                  print('user:',user)
                  print(f'kwargs: {kwargs}')

            user_logged_in.connect(login_success,sender = user)

      2. open apps.py --We are using it for first time...

            from django.apps import AppConfig


            class BlogConfig(AppConfig):
                  default_auto_field = 'django.db.models.BigAutoField'
                  name = 'blog'

                  def ready(self):                    #add these two lines
                        import blog.signals

      3. Now open __init__.py       
            default_app_config = 'blog.apps.BlogConfig'

                        \\\\\

      or If you dont want to edit __init__.py file just open your settings.py and add your apps path instead of 
      app name.

            INSTALLED_APPS = [
                  'django.contrib.admin',
                  'django.contrib.auth',
                  'django.contrib.contenttypes',
                  'django.contrib.sessions',
                  'django.contrib.messages',
                  'django.contrib.staticfiles',
                  'blog.apps.BlogConfig',
            ]

      OUTPUT 

            -------------------------------------------
            logged-in signals... Run Intro..
            sender: <class 'django.contrib.auth.models.User'>
            request: <WSGIRequest: POST '/admin/login/?next=/admin/'>
            user: admin
            kwargs: {'signal': <django.dispatch.dispatcher.Signal object at 0x00000206E1F543D0>}


                              2nd method -- Using Decorator
            
            from django.contrib.auth.signals import user_logged_in,user_logged_out,user_login_failed
            from django.dispatch import receiver
            from django.contrib.auth.models import User

            @receiver(user_logged_in,sender = User)
            def login_success(sender,request,user,**kwargs):
                  print('-------------------------------------------')
                  print('logged-in signals... Run Intro..')
                  print('sender:',sender)
                  print('request:',request)
                  print('user_password:',user.password)
                  print(f'kwargs: {kwargs}')

            # user_logged_in.connect(login_success,sender=User)

            @receiver(user_logged_out,sender = User)
            def logged_out(sender,request,user,**kwargs):
                  print('-------------------------------------------')
                  print('logged-out signals... Run Intro..')
                  print('sender:',sender)
                  print('request:',request)
                  print('user_password:',user.password)
                  print(f'kwargs: {kwargs}')

            # user_logged_out.connect(logged_out,sender=User)

            @receiver(user_login_failed)
            def login_failed(sender,credentials,request,**kwargs):
                  print('-------------------------------------------')
                  print('login_failed signals... Run Intro..')
                  print('sender:',sender)
                  print('credentils:',credentials)
                  print('request:',request)
                  print(f'kwargs: {kwargs}')
            user_login_failed.connect(login_failed)


-----------------------------------------------------------------------------------------------------------------

                  -----------------> Built in Signals <---------------

      Django provides several built-in signals that allow you to respond to various events and actions in your web
      application. These signals are a way to implement custom behavior or execute code when certain events occur. 
      Here are some of the most commonly used built-in signals in Django:

1. **Model Signals**:
   - `pre_save` and `post_save`: These signals are sent just before and just after a model's `save()` method is called.
   - `pre_delete` and `post_delete`: These signals are sent just before and just after a model instance is deleted.
   - `m2m_changed`: Sent when a Many-to-Many relationship on a model is modified.

2. **Authentication Signals**:
   - `user_logged_in`: Sent when a user logs in.
   - `user_logged_out`: Sent when a user logs out.
   - `user_login_failed`: Sent when a user login attempt fails.

3. **Request/Response Signals**:
   - `request_started` and `request_finished`: Sent when a request is initiated and when a response has finished processing.
   - `got_request_exception`: Sent when an exception occurs while processing a request.

4. **Django Admin Signals**:
   - `pre_save` and `post_save` signals for changes to models within the Django admin interface.

5. **Database Signals**:
   - `connection_created`: Sent when a database connection is created.

6. **Session Signals**:
   - `session_started` and `session_closed`: Sent when a user's session starts and ends.

7. **Testing Signals**:
   - `test_db_setup` and `test_db_teardown`: Sent during test database setup and teardown.

8. **Cache Signals**:
   - `cache_read` and `cache_write`: Sent when data is read from or written to the cache.

These signals are defined in various Django modules, and you can connect your own signal handlers to them in your 
Django application. For example, you can define a function to handle the `user_logged_in` signal to perform custom
actions when a user logs in successfully.

Here's an example of how to connect a signal handler to a signal in Django:


from django.contrib.auth.signals import user_logged_in
from django.dispatch import receiver

@receiver(user_logged_in)
def login_success(sender, request, user, **kwargs):
    # Your custom logic here


You can use the `@receiver` decorator to connect your signal handler function to the specified signal. 
When the event associated with the signal occurs, your handler function will be executed, allowing you to perform 
custom actions.

            ---------------------------------> Practical Approach <------------------------------------

      @receiver(pre_save,sender = User)
      def at_beginning_save(sender,instance,**kwargs):
            print('-------------------------------------------')
            print('Pre_save_signals... Run Intro..')
            print('sender:',sender)
            print('instance:',instance)
            print(f'kwargs: {kwargs}')

      @receiver(post_save,sender = User)
      def at_ending_save(sender,instance,created,**kwargs):
            if created:
                  print('-------------------------------------------')
                  print('Post_save_signals... Run Intro..')
                  print('new record')
                  print('sender:',sender)
                  print('instance:',instance)
                  print('created',created)
                  print(f'kwargs: {kwargs}')
            else:
                  print('-------------------------------------------')
                  print('Post_save_signals... Run Intro..')
                  print('Record Updated')
                  print('sender:',sender)
                  print('instance:',instance)
                  print('created',created)
                  print(f'kwargs: {kwargs}')


      @receiver(pre_delete,sender=User)
      def at_beginnig_delete(sender,instance,**kwargs):
            print('-------------------------------------------')
            print('Pre_delete_signals... Run Intro..')
            print('Record Deleted')
            print('sender:',sender)
            print('instance:',instance)
            print(f'kwargs: {kwargs}')

      @receiver(post_delete,sender=User)
      def at_ending_delete(sender,instance,**kwargs):
            print('-------------------------------------------')
            print('Post_delete_signals... Run Intro..')
            print('Record Deleted')
            print('sender:',sender)
            print('instance:',instance)
            print(f'kwargs: {kwargs}')


      @receiver(pre_init,sender=User)
      def at_beginnig_init(sender,*args,**kwargs):
            print('-------------------------------------------')
            print('At begning init... Run Intro..')
            print('Record Deleted')
            print('sender:',sender)
            print(f'Args:{args}')
            print(f'kwargs: {kwargs}')

      @receiver(post_init,sender=User)
      def at_ending_init(sender,*args,**kwargs):
            print('-------------------------------------------')
            print('At ending init... Run Intro..')
            print('Record Deleted')
            print('sender:',sender)
            print(f'Args:{args}')
            print(f'kwargs: {kwargs}')

------------------------------------------------------------------------------------------------------------------

                                    > Request/Response Signals < --django.core.signals ____

1.    django.core.signals.request_started and django.core.signals.request_finished:

      request_started signal is sent when a request begins to be processed.
      request_finished signal is sent when a request has been fully processed and the response is about to be 
      sent to the client.

2.    django.core.signals.got_request_exception:

      This signal is sent when an unhandled exception occurs while processing a request.

      ----------------> Practical request

      @receiver(request_started)
      def at_begning_request(sender,environ,**kwargs):
            print('-------------------------------------------')
            print('At beginning Request... Run Intro..')
            print('sender:',sender)
            print('Environ:',environ)
            print(f'kwargs: {kwargs}')

      @receiver(request_finished)
      def at_ending_request(sender,**kwargs):
            print('-------------------------------------------')
            print('At endinging Request... Run Intro..')
            print('sender:',sender)
            print(f'kwargs: {kwargs}')

      @receiver(got_request_exception)
      def at_req_exception(sender,request,**kwargs):
            print('-------------------------------------------')
            print('At endinging Request... Run Intro..')
            print('sender:',sender)
            print('request:',request)
            print(f'kwargs: {kwargs}')

------------------------------------------------------------------------------------------------------------------

                                    > management Signals <  from django.db.models.signals import __

1.    django.db.backends.signals.connection_created:

      This signal is sent whenever a new database connection is created. 
      It's useful for tasks such as setting up custom database-related behavior.

2.    django.db.migrations.signals.migration_started and django.db.migrations.signals.migration_finished:

      These signals are sent when a migration starts and finishes, respectively. 
      You can use them to perform actions before or after a migration is executed.

3.    django.core.management.signals.pre_migrate and django.core.management.signals.post_migrate:

      These signals are sent before and after running the migrate management command, allowing you to perform 
      actions before and after database schema changes.

      -----------------------------> Practical Approach <-------------------------------

      @receiver(pre_migrate)
      def before_install_app(sender,app_config,verbosity,interactive,using,plan,apps,**kwargs):
            print('----------------------------------------------------------------------')
            print('At migration start')
            print('sender:',sender)
            print('App_config:',app_config)
            print('verbosity:',verbosity)
            print('interactive:',interactive)
            print('Using',using)
            print('Plan:',plan)
            print('Apps:',apps)
            print(f'Kwargs: {kwargs}')

      @receiver(post_migrate)
      def at_end_migrate_flush(sender,app_config,verbosity,interactive,using,plan,apps,**kwargs):
            print('----------------------------------------------------------------------')
            print('At migrations End')
            print('sender:',sender)
            print('App_config:',app_config)
            print('verbosity:',verbosity)
            print('interactive:',interactive)
            print('Using',using)
            print('Plan:',plan)
            print('Apps:',apps)
            print(f'Kwargs: {kwargs}')

-----------------------------------------------------------------------------------------------------------------

                                          > Database Wrappers < ---django.db.backends.signals
      
1.    The django.db.backends.signals.connection_created --

      signal is sent by Django whenever a new database connection is created. 
      This signal is particularly useful for setting up custom behavior or executing specific actions when a 
      database connection is established.

      -------------------> Practical Approach

      @receiver(connection_created)
      def conn_db(sender,connection,**kwargs):
            print('----------------------------------------------------------------------')
            print('Initial connection to the databases.....')
            print('sender:',sender)
            print('connections:',connection)
            print(f'Kwargs: {kwargs}')

--------------------------------------------------------------------------------------------------------------------
                                    -------> tracker <---------

      First we created signals.py in which we use user_logged_in signal, 
      And when user get logged in we trace their ip and store it in a session 
      then fetch that session in our views.py
      And from views.py we passed it to our web Page.

-----------> signals.py

                  from django.contrib.auth.signals import user_logged_in
                  from django.contrib.auth.models import User
                  from django.dispatch import receiver

                  
                  @receiver(user_logged_in,sender=User)
                  def login_successfull(sender,request,user,**kwargs):
                        ip = request.META.get('REMOTE_ADDR')          # ye humko ip de rha h.
                        request.session['ip'] = ip

------------> Apps.py
                        Add 
                              def ready(self):
                                    import blog.signals

------------> __init__.py

                        default_app_config = 'blog.apps.BlogConfig'

------------> views.py
                  import session

                        ip = request.session('ip',default = 0)
                  
                  and then passed it to render

                  def Dashboard(request):
                        if request.user.is_authenticated:
                              posts = Post.objects.all()
                              user = request.user
                              full_name = user.get_full_name()
                              groups = user.groups.all()
                              ip = request.session.get('ip',default=0)
                              return render(request,'blog/dashboard.html',{'posts':posts,'full_name':full_name,'groups':groups,'dashboard':'active','ip':ip})
                        else:
                              return redirect('login')

-----------------------------------------------------------------------------------------------------------------

                  ------------------------------> login count <-----------------------------

            here we used cache but not session because session get expired after every logout but cache remain 
            till its lifespan.
            To use cache we need to create it . so for this we need to do some changes.
            CACHES = {
                  'default':{
                        'BACKEND':'django.core.cache.backends.db.DatabaseCache',
                        'LOCATION':'blog_cache',
                  }
                  
            }

      First we created signals.py in which we use user_logged_in signal, 
      And when user get logged in we count their through cache and store it in a database 
      then fetch that cache in our views.py
      And from views.py we passed it to our web Page

-------------> signals.py

                        from django.contrib.auth.signals import user_logged_in
                        from django.contrib.auth.models import User
                        from django.dispatch import receiver
                        from django.core.cache import cache

                        @receiver(user_logged_in,sender = User)
                        def login_success(sender,request,user,**kwarges):
                              ct = cache.get('count',default = 0,version = user.pk)
                              newcount = ct+1
                              cache.set('count','newcount',60*60*24,version = user.pk)
                              print(user.pk)

---------> views.py

                        ct = cache.get('count',version = user.pk)
                        and then return it.

---------------------------------------------------------------------------------------------------------------

                        --------------> gs72 Custom Signals <---------------

      
      In Django, you can create custom signals to allow various parts of your application to communicate and 
      respond to events. Custom signals are a way to implement the publish-subscribe pattern, where one part of
      your application (the sender) can send a signal, and other parts of your application (the receivers) can 
      listen for and respond to that signal.

Here's how you can create and use custom signals in Django:

1. Define the Signal:
   You can define a custom signal by using Django's built-in `Signal` class from the `django.dispatch` module. 
   Typically, you define the signals in one of your application's modules (e.g., `signals.py`), and then you import
   them in your other application components.

            from django.dispatch import Signal

            my_signal = Signal()

2. Sender - Emit the Signal:
   The sender is the part of your application that will emit (send) the custom signal when a specific event occurs.
   You can emit the signal by calling its `send()` method, providing any necessary data as arguments to the signal.

            my_signal.send(sender=my_object, data=my_data)


3. Receiver - Connect the Signal:
   The receivers are the parts of your application that need to respond to the custom signal. 
   You can connect a function (receiver) to the signal using the `@receiver` decorator from the `django.dispatch` module.

                  from django.dispatch import receiver

                  @receiver(my_signal)
                  def my_signal_handler(sender, **kwargs):
                        # Do something in response to the signal
                        data = kwargs.get('data')
                        # Your code here

4. Disconnecting Receivers (optional):
   You can also disconnect receivers from a signal using the `disconnect()` method if you no longer want 
   the receiver to listen to the signal.


                  my_signal.disconnect(my_signal_handler, sender=my_object)


5. Using the Signal:
   Whenever the sender emits the signal, all connected receivers will execute the specified function, 
   allowing you to respond to the event.

Custom signals are often used in Django for decoupling different parts of your application and making it more 
maintainable and modular. Common use cases include sending notifications, triggering background tasks, or logging 
events when certain actions occur within your application.

Remember to import your signals in the appropriate parts of your Django application to ensure that they are 
connected and can respond to the events as needed.


----------------------> Difference between signal.send() and signal.send_robust() <-----------------------------

In Django, both `signal.send()` and `signal.send_robust()` are methods used to send signals to their registered 
receivers, but they have slightly different behaviors when it comes to handling exceptions raised by receivers. 
Here's an explanation of each:

1. `signal.send(sender, **kwargs)`:

   This is the standard method for sending signals. When you use `signal.send()`, 
   Django sends the signal to all registered receivers and does not handle any exceptions raised by those receivers. 
   If a receiver raises an exception, it will propagate up and potentially disrupt the signal-sending process.

            Example:

            my_signal.send(sender=my_object, data=my_data)

   If any of the receivers raise an exception, it will not be caught by the `send()` method, and you'll need to 
   handle those exceptions in your own code.

2. `signal.send_robust(sender, **kwargs)`:

   `signal.send_robust()` is an alternative method for sending signals. It works similarly to `signal.send()` 
   but with one key difference: it catches exceptions raised by receivers and continues to call the remaining 
   receivers. This ensures that an exception in one receiver doesn't prevent other receivers from executing.

                  Example:

                 
                  my_signal.send_robust(sender=my_object, data=my_data)
                

   If any receiver raises an exception, `send_robust()` will catch it and continue executing the rest of the 
   receivers. This can be useful in situations where you want to ensure that all receivers are notified of the 
   signal, even if some of them encounter errors.

It's important to choose the appropriate method based on your use case and how you want to handle exceptions.
`signal.send()` provides a more straightforward behavior, while `signal.send_robust()` is useful when you want to 
ensure that all receivers are notified regardless of any exceptions raised by them. However, using `send_robust()`
can make it more challenging to know which receivers encountered errors, so you might need to implement additional 
error handling or logging in your code to track such issues.

------------------------------------------------------------------------------------------------------------------

                              ------------------> ImageUploader <---------------------

1.    Image ka use krne ke liye Django me humko 'PILLOW' ka use krna hota h.....
      --------->pip install PILLOW

2.     Ab humko ek model bnana h taki hum photos ko store kr sake Database me.

      ---------> Models.py
      
      from django.db import models

      # Create your models here.
      class Image(models.Model):
            photo = models.ImageField(upload_to='myimage')             #we need Pillow module to work with images in django
            date = models.DateTimeField(auto_now_add=True)              #this will add real time

3.    ab humara models bn chuka h to ab humko makemigrations and migrate krna hoga. 
      but humara model dikhega nhi kyoki humne usko abhi register nhi kiya h.  

      ---------> admin.py  

      from django.contrib import admin
      from .models import Image

      # Register your models here.
      @admin.register(Image)
      class ImageAdmin(admin.ModelAdmin):
            list_display = ['id','photo','date']

4.    Ab humko database me dikhne lagega humara model Image..
      Image upload kri 1 manually. But hum uspe click krke usko open nhi kr sakte h error milega..
      Is error ko sahi krne ke liye humko Urls.py me changes krna hoga.

      ----------> urls.py

            from django.contrib import admin
            from django.urls import path
            from myapp import views
            from django.conf import settings
            from django.conf.urls.static import static

            urlpatterns = [
                  path('admin/', admin.site.urls),
                  path('',views.home),   
            ]+ static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)  #isko add kiya h media file dekhne ke

            # print(static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT))

      ab humko photo dikhne lagegi database se.. aur ye photo store hui h myimage naam ke folder me..

4.    Ab hum settings.py me changes krenge...

      -----------> settings.py

            MEDIA_ROOT = BASE_DIR / 'media'           #isse 1 folder bnega media ke naam ka usme store hoga sara media

5.    Ab hum ek home name ka function bnayenge Views.py me.
      ------------> views.py
            def home(request):
                  return render(request,'myapp/home.html)

6.    Ab hum form ke through media ko upload krna dekhenge
            create kri 1 forms.py file.

            from django import forms
            from .models import Image

            class ImageForm(forms.ModelForm):
            class Meta:
                  model = Image
                  fields = '__all__'  #['photo','date']
                  labels = {'photo':''}

7.    Import this model and form.py to views.py
      ------------>views.py

            from django.shortcuts import render
            from .models import Image
            from .forms import ImageForm
            from django.contrib import messages

            # Create your views here.
            def home(request):
            img = Image.objects.all()           #jese hi yha all() use kiya to matlab ki humko html file me for loop use krna hoga kyoki multiple values hogi.
            if request.method == 'POST':
                  fm = ImageForm(request.POST,request.FILES)
                  if fm.is_valid():
                        fm.save()
                        messages.success(request,'Image Uploaded Successfully.')
            else:
                  fm = ImageForm()
            return render(request,'myapp/home.html',{'form':fm,'img':img})

8.    Html File of home.html

      ---------> home.html    
                  
                  <!DOCTYPE html>
                        {% load static %}
                        <html lang="en">
                              <head>
                                    <meta charset="UTF-8">
                                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                    <link rel="stylesheet" href="{% static 'myapp/css/bootstrap.css' %}">
                                    <link rel="stylesheet" href="{% static 'myapp/css/style.css' %}">
                                    <title>Image Uploader</title>
                              </head>
                        <body>
                        
                        <br>
                        <div class="container">
                              <div class="py-5 text-center bg-secondary text-white">
                                    <h1 class='text-center mb-3'>Image Uploader.</h1>
                                    <form action="" method="post" enctype = 'multipart/form-data'>  #yah pe enctype='multipart/form-data' dena hi hoga.
                                          {% csrf_token %}
                                          {{form}}
                                          <input type="submit" class='btn btn-danger' value="Upload">
                                    </form>
                                    {% if messages %}
                                          {% for message in messages %}
                                                {{message}}
                                          {% endfor %}
                                    {% endif %}
                              </div>
                        </div>
                        <div class="row">
                              {% for im in img %}                 #multiple images hongi to humko for loop ka use krna hoga.
                                    <div class="col-sm-4">
                                          <div class="card m-2">
                                                <img src="{{im.photo.url}}" alt="" class='card-img-top'>    #{{img}} direct esse nhi de sakte h,error dega
                                          </div>
                                    </div>
                              {% endfor %}
                        </div>
                        <script src="{% static 'myapp/jquery.js' %}"></script>
                        <script src="{% static 'myapp/popper.js' %}"></script>
                        <script src="{% static 'myapp/bootstrap.js' %}"></script>
                        </body>
                        </html>

-------------------------------------------------------------------------------------------------------------------

                              --------------> gs73 - middleware <-----------------

      Django middleware is a fundamental and powerful component of the Django web framework. 
      It allows you to process requests and responses globally before they reach the view or after they 
      leave the view. Middleware provides a way to add cross-cutting concerns, such as authentication, security, 
      and custom request/response processing, to your Django application in a modular and reusable manner.

                              Built in Middleware     and   Custom Middleware

      Built in Middleware - jo phle se diye h Django ne jo humari settings me h phle se hi Middleware section me.

      Custom Middleware - Can be created using 2 mehods 
                          
                          1. Function Based Middleware
                          2. Class Based Middleware

      
                        --------------------> Function Based Middleware <------------------------

      Procedure--

                  def my_middleware(get_response):
                        # One-time configuration and initialization.
                        def my_function(request):
                              #code to be executed for each request before the views are called.
                              response = get_response(request)
                              #code to be executed for each request/response after the view is called.
                              return response
                        return my_function.


                              -----------------> get_response() <-------------------
            
      The get_response function is a critical part of Django's middleware architecture. It is used to pass control 
      to the next middleware in the middleware stack or, if there are no more middlewares, to the view function 
      that will generate the response. The get_response function is an argument passed to both class-based and 
      function-based middleware.

      Adding method-

      MIDDLEWARE = [
            'django.middleware.security.SecurityMiddleware',
            'blog.middlewares.my_middleware',         #application's name.module name.function name
      ]

      create 1 new file to store our logic of middleware
            middlewares.py-------------->

                  def middleware(get_response):
                        print('1 time initialization')            #ye sirf ek bar chalega only line no.2
                        def my_function(request):
                              print('this will execute before the views.')#ye humara views ke chlne se phle chalega
                              response = get_response(request)
                              print('this will execute after the excution of views')      #ye views ke chlne ke bad chalega
                              return response
                        return my_function
      
      then plugin it to the MIDDLEWARE section of settings.py

-------------------------------------------------------------------------------------------------------------------

      -----------------------------------> gs74-CLASS BASED MIDDLEWARE <--------------------------------------

      class my_middleware:
            def __init__(self,get_response):
                  sef.get_response = get_response                 #1 time configuration and initialization
            def __call__(self,request):
                  # code to be executed for each request before the view (and later middleware) are called.
                  response = self.get_response(request)
                  #code to be executed for each request/response after the view is called.
                  return response

      after that we will plugin it to our MIDDLEWARE section of setting.py.

      class middleware:
            def __init__(self,get_response):
                  self.get_response = get_response                #1 bar chlane wale ko init ke under likhte h.
                  print('This will run only for 1 time.')         #this will run when our server starts.

            def __call__(self,request):                             # jisko humko views se phle aur bad me chalana h usko hum call me likhte h
                  print('This line will execute before the views')
                  response = self.get_response(request)
                  print('this will print after the views')
                  return response

----------------------------------------------------------------------------------------------------------------

                  -----------------------> gs75 Multiple Middlewares <--------------------------


class BrotherMiddleware:
    def __init__(self,get_response):
        self.get_response = get_response                #1 bar chlane wale ko init ke under likhte h.
        print('This is Brother Middleware.')

    def __call__(self,request):                             # jisko humko views se phle aur bad me chalana h usko hum call me likhte h
        print('This Brother line will execute before the views')
        response = self.get_response(request)
        print('this Brother will print after the views')
        return response
    

class FatherMiddleware:
    def __init__(self,get_response):
        self.get_response = get_response                #1 bar chlane wale ko init ke under likhte h.
        print('This is Father Middleware.')

    def __call__(self,request):                             # jisko humko views se phle aur bad me chalana h usko hum call me likhte h
        print('This Father line will execute before the views')
        response = self.get_response(request)
        print('this Father will print after the views')
        return response
    

class MummyMiddleware:
    def __init__(self,get_response):
        self.get_response = get_response                #1 bar chlane wale ko init ke under likhte h.
        print('This is Mummy Middleware.')

    def __call__(self,request):                             # jisko humko views se phle aur bad me chalana h usko hum call me likhte h
        print('This Mummy line will execute before the views')
        response = self.get_response(request)
        print('this Mummy will print after the views')
        return response


                  --------------------------> OUTPUT <----------------------------

            This is Mummy Middleware.
            This is Father Middleware.
            This is Brother Middleware.
            November 07, 2023 - 22:26:46
            Django version 4.2.5, using settings 'gs75.settings'
            Starting development server at http://127.0.0.1:8000/
            Quit the server with CTRL-BREAK.

            This Brother line will execute before the views
            This Father line will execute before the views
            This Mummy line will execute before the views
            Im view
            this Mummy will print after the views
            this Father will print after the views
            this Brother will print after the views

      ------------------> Ab humko next middleware ki jagah khi aur transfer krwana h <--------------------

----->Father middleware ke baad ye direct redirect ho ja rha h na ki next middleware pe ja rha h.


      from django.shortcuts import HttpResponse

      class BrotherMiddleware:
            def __init__(self,get_response):
                  self.get_response = get_response                #1 bar chlane wale ko init ke under likhte h.
                  print('This is Brother Middleware.')

            def __call__(self,request):                             # jisko humko views se phle aur bad me chalana h usko hum call me likhte h
                  print('This Brother line will execute before the views')
                  response = self.get_response(request)
                  print('this Brother will print after the views')
                  return response
            

      class FatherMiddleware:
            def __init__(self,get_response):
                  self.get_response = get_response                #1 bar chlane wale ko init ke under likhte h.
                  print('This is Father Middleware.')

            def __call__(self,request):                             # jisko humko views se phle aur bad me chalana h usko hum call me likhte h
                  print('This Father line will execute before the views')
----------->      #response = self.get_response(request)   #get_response likhne ka matlab h ki wo father ke pass jayega means ki next middleware ke pass jayega.
----------->      response = HttpResponse('nikal lo')         #esse ye next middleware ke pass na jkr humare targeted location pe jayega.
                  print('this Father will print after the views')
                  return response
      

      class MummyMiddleware:
            def __init__(self,get_response):
                  self.get_response = get_response                #1 bar chlane wale ko init ke under likhte h.
                  print('This is Mummy Middleware.')

            def __call__(self,request):                             # jisko humko views se phle aur bad me chalana h usko hum call me likhte h
                  print('This Mummy line will execute before the views')
                  response = self.get_response(request)
                  print('this Mummy will print after the views')
                  return response

------------------------------------------------------------------------------------------------------------------

                        ------------------------>gs76 MIDDLEWARE HOOKS <----------------------
      
      THis only works in Class based middleware.....

      Middleware hooks in Django refer to the specific points in the request and response processing flow where 
      middleware components can hook into the process and perform custom actions or modifications.

1.    process_request Hook:This hook is called at the very beginning of the request processing flow, 
      before the request reaches the view function. Middleware components that define a process_request method 
      can perform actions such as authentication, user session handling, and request manipulation.
      Example:
            def process_request(self, request):

            self: The instance of the middleware class.
            request: The incoming HTTP request object, representing the client's request to the server.
    


2.    process_view Hook:The process_view hook is called after the request has been processed by any process_request
      methods and just before the view function is executed. It can be used for tasks such as custom access 
      control, additional request processing, or logging.
      Example
                  def process_view(self, request, view_func, view_args, view_kwargs):

                  self: The instance of the middleware class.
                  request: The incoming HTTP request object.
                  view_func: The view function that is about to be executed.
                  view_args: A list of arguments to be passed to the view function.
                  view_kwargs: A dictionary of keyword arguments to be passed to the view function.


3.    process_template_response Hook:The process_template_response hook is called after the view function has 
      been executed and has returned a response. It's used to modify template responses generated by the view. 
      Middleware components that define this hook can add context data to templates, modify the response content, or
      perform other template-related actions.
      Example
                  def process_template_response(self, request, response):

                  self: The instance of the middleware class.
                  request: The incoming HTTP request object.
                  response: The response generated by the view function. This can be a template response object.


4.    process_response Hook:This hook is called at the end of the request processing flow, just before the response
      is sent to the client. It allows middleware to perform actions such as adding HTTP headers, modifying the 
      response content, or other post-processing tasks.
      Example
                  def process_response(self, request, response):
                  
                  self: The instance of the middleware class.
                  request: The incoming HTTP request object.
                  response: The response generated by the view function or a previous middleware.

5.    process_exception:It is another middleware hook in Django. It allows middleware components to handle 
      exceptions that occur during the processing of an HTTP request. This hook is particularly useful for 
      implementing custom error handling, logging, or any other actions you may need when an exception occurs
      in your application.

      Example
                  def process_exception(self, request, exception):

                  self: The instance of the middleware class.
                  request: The incoming HTTP request object.
                  exception: The exception that was raised during request processing. 
                  This is the exception object that you can inspect and potentially handle or log.

      --------------------------------------------------------------------------------------------------------

      from django.shortcuts import HttpResponse

      class MyProcessMiddleware:
            def __init__(self,get_response):
                  self.get_response = get_response

            def __call__(self,request):
                  response = self.get_response(request)
                  return response
            
            def process_view(self,request,*args,**kwargs):
            print('THis is process view before view')
            #return HttpResponse('THis is before view')           #agar isko hum comment krde to humara views chal jayega.
            return None
      


      class MyExceptionMiddleware:
            def __init__(self,get_response):
                  self.get_response = get_response

            def __call__(self,request):
                  response = self.get_response(request)
                  return response
            
            def process_exception(self,request,exception):
                  msg = exception
                  print('THis is process view before view')
                  #return HttpResponse('THis is before view')           #agar isko hum comment krde to humara views chal jayega.
                  return HttpResponse(msg)

      class MyTemplateResponseMiddleware:
            def __init__(self,get_response):
                  print('1 bar chalega yaar')
                  self.get_response = get_response
            
            def __call__(self,request):
                  print('print before our views function')
                  response = self.get_response(request)
                  print('this will run after the views')
                  return response
            
            def process_template_response(self,request,response):
                  print('process template response from MIDDLEWARE')
                  response.context_data['name'] = 'Rahul'         #used to change data which we get from views
                  return response

-----------------------------------------------------------------------------------------------------------------
                  ------------------> Site under construction <---------------------

      isme humne middleware ke through site under construction ka message show kiya h chahe koi bhi link click ho 
      chalega wahi...

-----------------------------------------------------------------------------------------------------------------

      --------------------->gs77- QuerySet Api : Methods that return New Queryset <---------------------------

      Sure, I'd be happy to help with Django's QuerySet API. In Django, a QuerySet is a collection of database queries to retrieve data. It allows you to filter, order, and manipulate data before it's actually fetched from the database.


1. **Creating a QuerySet: This creates a QuerySet that retrieves all objects from the `MyModel` table.
            
            queryset = MyModel.objects.all()
   

2. **Filtering: Filters the QuerySet to include only objects where the name is 'John'.
   
            queryset = MyModel.objects.filter(name='John')
   
   

3. **Chaining Filters: You can chain multiple filters together.
   
            queryset = MyModel.objects.filter(name='John').filter(age=25)
   
   

4. **Excluding: Excludes objects where the name is 'John'.
   
            queryset = MyModel.objects.exclude(name='John')
   

5. **Sorting: Orders the QuerySet by the 'name' field.
   
            queryset = MyModel.objects.order_by('name')
   

6. **Slicing: Retrieves the first 5 objects in the QuerySet.
   
            queryset = MyModel.objects.all()[:5]


7. **Aggregation: Aggregates data, in this case, counting the number of items.
   
            from django.db.models import Count
            result = MyModel.objects.aggregate(num_items=Count('id'))
   

8. **QuerySet Methods:
            - `get()`: Retrieves a single object based on the provided parameters.
            - `first()`: Retrieves the first object in the QuerySet.
            - `last()`: Retrieves the last object in the QuerySet.
            - `exists()`: Checks if any objects in the QuerySet exist.


9. values_list():
      It is a method in Django's QuerySet API that returns a QuerySet containing tuples of field values. 
      It's useful when you want to retrieve specific fields from a model rather than complete model instances.

            # Assuming you have a model called MyModel with fields 'field1' and 'field2'
                  my_queryset = MyModel.objects.values_list('field1', 'field2')
            # This returns a QuerySet of tuples like [(value1, value2), (value1, value2), ...]


10. none():
      Calling none() will create a queryset that never returns any objects and no query will be executed when accessing
      the results.

            my_queryset = MyModel.objects.none()


11. union(*other_qs,all=False):
      uses SQL's Union operator to combine the results of two or more Quersets.The Union operator selects only distinct
      values by default.TO alloe=w duplicate values,use the all=True arguments.

            student_data = q2.union(qs1,all = True)

      For this we need 2 tables so we will create new model

12. Intersection(*other_qs):
      Uses SQL's Intersection operator to return the shared elements of two or more Queryset.

             students = qs1.intersection(qs2)

13. Difference(*other_qs):
      Uses SQL's EXCEPT operator to keep only elementspresent in the Queryset but not in some other Queryset.

            student = qs1.difference(qs2)



            --------------------------> Prctical Approach <-------------------------

1.    First of all create models in models.py
            from django.db import models

            # Create your models here.
            class Student(models.Model):
                  Name = models.CharField(max_length=50)
                  Roll = models.IntegerField(unique=True,null=False)
                  city = models.CharField(max_length=70)
                  Marks = models.IntegerField()
                  Pass_date = models.DateField()

2.    Register models in admin.py with the views settings...

            from django.contrib import admin
            from .models import Student
            # Register your models here.

            @admin.register(Student)
            class StudentAdmin(admin.ModelAdmin):
                  list_display = ['id','Name','Roll','city','Marks','Pass_date']

      
3.    Now create the view functions in views.py

            from django.shortcuts import render
            from django.db.models import Count
            from .models import Student,Teacher

            # Create your views here.
            def home(request):
      ------> all()
                  # students = Student.objects.all()
                  # students = Student.objects.all()[5:]
      ------> filter()
                  # students = Student.objects.filter(Name = 'Harsh Sahu')
                  # students = Student.objects.filter(Marks = 98)               #isme greater than and lessthan work nhi kr rha h.
                  # students = Student.objects.filter(Marks__lt=90)         #less than ke liye lt
                  # students = Student.objects.filter(Marks__gt=90)             # greater than ke liye marks__gt
                  # students = Student.objects.filter(Marks__lte =90)               # less than or equal to
                  # students = Student.objects.filter(Marks__gte =90)               # greater than or equal to.
                  # students = Student.objects.filter(Name='Harsh Sahu').filter(city='lucknow')
      ------> order_by()
                  # students = Student.objects.order_by('Name')          # Capital alpahbet phle ayega small wale baad me,ex-A phle a bad me.
                  # students = Student.objects.order_by('Name').reverse()       #isse name ka order reverse ho kr ayega
                  # students = Student.objects.order_by('Name').reverse()[:5]       #only last ke 5 reverse ho kr ayenge.
                  # students = Student.objects.order_by('?')        # normally ascending, -id : descending , ? : Random
                  # students = Student.objects.order_by('id')        # normally ascending, -id : descending , ? : Random
      ------> exclude()     
                  # students = Student.objects.exclude(Name='Harsh Sahu')
      ------> values()
                  students = Student.objects.values('Name','Pass_date')            #esse only humko name and city ka dikhye ga aur agar koi value pass nhi krenge to dictionary return krega
      ------> values_list()            
                  # students = Student.objects.values_list('id','city')               #esse only tuple ke form me ayega but dikhega nhi.
                  # students = Student.objects.values_list('Roll','city',named=True)  #ab humko dikhega data
      ------> using
                  #students = Student.objects.using('default')                # it tells which database we are using
      ------> dates()
                  # students =Student.objects.dates('Pass_date','month')        #ye bhi terminal me dikhata h
                  # students =Student.objects.datetimes('Pass_date','month')
      ------> union()
                  # qs1 = Student.objects.values_list('id','Name','city',named=True)
                  # qs2 = Teacher.objects.values_list('id','Name','city',named=True)
                  # students = qs1.union(qs2)
                  #students = qs2.union(qs1)       #but yha duplicate nhi ayega
                  # students = qs1.union(qs2,all=True)            #agar jada table h to qs1.union(qs2,qs3,qs4,all=True)
      ------> intersection()
                  # qs1 = Student.objects.values_list('Name',named=True)
                  # qs2 = Teacher.objects.values_list('Name',named=True)
                  # students = qs1.intersection(qs2)        # jo bhi data common h wo show krega only

      ------> difference()
                  qs1 = Student.objects.values_list('Name',named=True)
                  qs2 = Teacher.objects.values_list('Name',named=True)
                  students = qs1.difference(qs2)

      ############################################# AND OR OPERATOR #########################################

                  # students = Student.objects.filter(id=6) & Student.objects.filter(Roll=6)
                  students = Student.objects.filter(id=6) | Student.objects.filter(Roll=8)

                  print('Sql Query:',students.query)          #to see the query in terminal
                  return render(request,'school/home.html',{'student':students})

      Now create home.html file to show them in browser.

            <!DOCTYPE html>
            <html lang="en">
            <head>
                  <meta charset="UTF-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>Document</title>
            </head>
            <body>
                  <h1>This is home Page</h1>
                  <hr>
                  
                  {% for stu in student %}
                        {{stu.Name}} <br>
                        {% empty %}
                              <p>No data Found</p>
                  {% endfor %}
            </body>
            </html>

-----------------------------------> Operators that return new Querysets <------------------------------------

      AND(&) : Combine two Query Sets using the SQL AND operator.
      Example-    
      student_data = Student.objects.filter(id=6)& Student.objects.filter(roll=106)
      student_data = Student.objects.filter(id=6,roll=106)

      from django.db.models import Q
      student_data = Student.objects.filter(Q(id=6)& Q(roll=106))

      OR(|) : Combines two querySets using the SQL OR operator.
      Example-    
      Student.objects.filter(id=11) | Student.objects.filter(roll=106)

      from django.db.models import Q
      Student.objects.filter(Q(id=11) | Q(roll=106))        #mostly used in this way


----------------------------------------------------------------------------------------------------------------

            ----------------------> Methods that do not return new Queryset <-------------------
            we use them when we need only data of 1 student..

1. get(): The get() method in Django is used to retrieve a single object from the database that matches the given 
          lookup parameters. It does not return a new QuerySet; instead, it returns an instance of the model 
          that matches the query.

          Example: Student.objects.get(pk=1)

2. first(): The first() method in Django is used to retrieve the first object from a queryset that matches the 
            given conditions. It does not return a new queryset; instead, it returns either the first object that 
            satisfies the conditions or None if no matching object is found.

            Example: students = Student.objects.first()                          #first entry return kr rha h.

3.last(): The last() method in Django is used to retrieve the last object from a queryset that matches the given 
          conditions. It does not return a new queryset; instead, it returns either the last object that 
          satisfies the conditions or None if no matching object is found.

          Example: students = Student.objects.filter(some_field=some_value).last()

4.latest(): In Django, the latest() method is used to retrieve the latest object from a queryset based on the 
            model's ordering. It does not return a new queryset; instead, it returns the latest object that 
            satisfies the conditions specified in the queryset.

            Example: students = Student.objects.latest('Roll')           #last modified data deta h esse.

5.earliest(): This provides the 1st created data..

              Example: students = Student.objects.earliest('Roll')

6.exists(): The exists() method in Django is used to determine if there are any records in a queryset that match 
            the given conditions. It does not return a new queryset; instead, it returns a boolean value 
            (True or False) indicating whether any records exist.

            Example: students = Student.objects.filter(Name='Harsh Sahu').exists()       #returns True

                        ---------------> CRUD OPERATIONS MAINLY <-----------------

7. create(): In Django, the create() method is a convenient way to create and save a new object in the database 
             in a single step. It is typically used on a model's manager (usually accessed via the model's class).

      esse humko 1 bar bna ke phir usko save nhi krna pdta h khudse save ho jata h.
            s = Student(Name='Sameer',Roll=112,city='lucknow',marks=60,Pass_date='2020-5-4')
            s.save()

      By the use of create we can create and save in single line..
            Example: s = Student.objects.create(Name='Sameer',Roll=112,city='lucknow',marks=60,Pass_date='2020-5-4')

8. get_or_create(): The get_or_create() method in Django is a convenient method that tries to get an object from 
                    the database based on certain conditions. If the object is found, it returns that object; 
                    otherwise, it creates a new object with the specified conditions, saves it to the database, 
                    and then returns the newly created object.

                    Example:
                    students,created = Student.objects.get_or_create(Name='Ramadheer',Roll=112,city='lucknow',Marks=80,Pass_date='2020-10-4')
                    print(created)      #isme humko 2 things return kr rha h isiliye 2 variables me store krna hoga

9. update():  This method performs an update on the rows matched by the query. It does not return a new QuerySet
              but instead directly modifies the rows in the database.

              Example: students = Student.objects.filter(pk=2).update(Name='Shristi Verma')

10. update_or_create(): This method in Django is a convenient method for updating an existing object in the 
                        database or creating a new one if it doesn't exist. This method is particularly useful 
                        when you want to ensure that a specific record with certain conditions exists in the 
                        database.

                        Example:students,created = Student.objects.update_or_create(
                                    Name = 'Tushari jain',
                                    defaults={'Roll':113,'city':'mehmodabad','Marks':45,'Pass_date':'2023-10-14'}
                                    )           # Tushari jain ke naam se koi bhi data nhi tha to ye create ho gya..
                                    print(created)

11. bulk_create(): This method is used to efficiently insert multiple objects into the database in a single query. 
                   It can significantly improve performance compared to creating and saving each object 
                   individually.
                   It does not work many-to-many relationship

                   Example: students,created = Student.objects.bulk_create(
                              [
                                    Student(Name='Radhe',Roll=115,city='lucknow',Marks=80,Pass_date='2020-5-24'),
                                    Student(Name='krishna',Roll=116,city='lakhimpur',Marks=100,Pass_date='2020-5-4')
                              ]
                        )

      or just create data and pass it to bulk_create()
      obj = [
                  Student(Name='Radhe',Roll=115,city='lucknow',Marks=80,Pass_date='2020-5-24'),
                  Student(Name='krishna',Roll=116,city='lakhimpur',Marks=100,Pass_date='2020-5-4')
            ]

      students = Students.object.bulk_create(obj)

12. bulk_update(): This will update in bulk manner.. Same as bulk_create
            Example:     all_student_data = Student.objects.all()
                         for stu in all_student_data:
                              stu.city = 'Bhel'
                         students=Student.objects.bulk_update(all_student_data,['city'])

13. delete(): The delete() method in Django is used to delete objects that match a given set of conditions in the 
              database. It removes records from the database table based on the specified filter.
              
              Example: students = Student.objects.filter(Name='Mukesh').delete()
                       students = Student.objects.get(pk=12).delete()
                       students = Student.objects.filter(Marks__lt = 80).delete()   #to delete all lower than 80.
                       students = Student.objects.all().delete()       # to delete all data from database.

14. Count(): The count() method in Django is used to retrieve the number of objects that match the specified 
             conditions in a queryset. It returns an integer representing the count of objects.

             Example: students=Student.objects.count()            #it returns 16 as there are 16 tuples in our database
                      students=Student.objects.filter(Marks__lt=90).count()  #it returns11

--------------------------------------------------------------------------------------------------------------------

                        ------------> gs79 Field lookups - Queryset Api <---------------

      In Django, field lookups are used to filter/query the database based on specific conditions. 
      They are a way to retrieve a subset of data from the database by specifying conditions that must be met. 
      Field lookups are typically used in conjunction with querysets to perform database queries.

Here are some common field lookups in Django:

1. **Exact match:**
   - `exact`: Case-sensitive match.
     students = Student.objects.filter(name__exact = 'rahul')          #case sensitive


2. **Case-insensitive exact match:**
   - `iexact`: Case-insensitive match.
     students = Student.objects.filter(name__iexact = 'Rahul')           # case insensitive


3. **Contains:**
   - `contains`: Case-sensitive containment test.
     
      students = Student.objects.filter(name__contains = 'y')           # retuns all names which have 'y' in it.
      students = Student.objects.filter(city__contains = 'w')              # return all city names which contains 'w' in it.
     

4. **Case-insensitive contains:**
   - `icontains`: Case-insensitive containment test.
     
     students = Student.objects.filter(city__icontains = 'w') 
     

5. **Starts with:**
   - `startswith`: Case-sensitive starts-with match.
     
     students = Student.objects.filter(name__startswith ='a')        #ye bhi case insensitive h
     

6. **Ends with:**
   - `endswith`: Case-sensitive ends-with match.
     
     students = Student.objects.filter(name__endswith ='L')              #case insensitive
     

7. **In:**
   - `in`: Match any value in a given list.
     
      students = Student.objects.filter(id__in =[5,2,1] )
      students = Student.objects.filter(id__in =[2] )         #list me hi dena hoga humko.
      students = Student.objects.filter(marks__in =[98,100] )
     

8. **Range:**
   - `range`: Match values within a range.
     
     students = Student.objects.filter(passdate__range =('2023-09-01','2023-11-10'))      #ye range ke under ke sare return krta h
     
     year-month-date

9. **Is null:**
   - `isnull`: Match records where the field is null.
     
     students = Student.objects.filter(roll__isnull=False)       #false krne pr data de rha h, because isme data h.
     

10. **Date and time lookups:**
    - `date`: Match records on a specific date.
      
      students = Student.objects.filter(admdatetime__date=date(2023,11,10))       #return only those entries which created under the same date.
      students = Student.objects.filter(admdatetime__date__gt=date(2023,11,4))
      students = Student.objects.filter(admdatetime__year=2023)
      students = Student.objects.filter(admdatetime__time__gt=time(6,00))

      same esse hi month aur day aur baki sabka bhi use kr sakte h.
    - `year`, `month`, `day`, `hour`, `minute`, `second`: Extract parts of a date/time field.

------------------------------------------------------------------------------------------------------------------

                  --------------> gs80- Aggregation  Queryset Api <------------------

      from django.shortcuts import render
      from .models import Student
      from django.db.models import Avg,Sum,Min,Max,Count
      # Create your views here.
      def home(request):
            students = Student.objects.all()
            average = students.aggregate(Avg('marks'))
            max = students.aggregate(Max('marks'))
            min = students.aggregate(Min('marks'))
            sum = students.aggregate(Sum('marks'))
            count = students.aggregate(Count('marks'))
            print(average)
            print('return:',students)
            print()
            print('Sql Query:',students.query)
            return render(request,'school/home.html',{'students':students,'avg':average,'max':max,'min':min,'sum':sum,'count':count})

------------------------------------------------------------------------------------------------------------------

                  ---------------------------->gs81 Q objects <---------------------------------      

      In Django, the Q object is used to perform complex queries by combining multiple conditions using logical 
      operators.It allows you to build more expressive and flexible queries for database lookups. The Q object is 
      imported from django.db.models.

      from django.db.models import Q
      from yourapp.models import YourModel

      # Example query using Q objects
      result = YourModel.objects.filter(Q(name__icontains='john') | Q(age__gte=25))

      # This query retrieves objects where the name contains 'john' or the age is greater than or equal to 25


1.    And-  students = Student.objects.filter(Q(name='harsh Sahu') & Q(roll=1))     #returns harsh sahu's data

2.    OR - students = Student.objects.filter(Q(name='harsh Sahu') | Q(name='Akshay Dixit'))    #returns 2 records
           students = Student.objects.filter(Q(marks__gt=78) | Q(city='lucknow'))

3.    Not(~) - students = Student.objects.filter(~Q(name='Akshay Dixit'))  # akshay ke alawa ke sare data de dega.

------------------------------------------------------------------------------------------------------------------

                  ------------------->gs81 Limiting Queryset <-----------------------

      In Django, you can limit the number of results returned in a QuerySet using the queryset[:limit] syntax. 
      This is similar to how slicing works with Python lists. Here's an 
      Eaxmple:-
                  from yourapp.models import YourModel

                  # Get the first 5 objects in the queryset
                  result = YourModel.objects.all()[:5]

--------------> Practical Approach

                        students = Student.objects.order_by('-name')[:5]    #descending order

-----------------------------------------------------------------------------------------------------------------

                  ------------------> gs82-Model Inheritance <------------------

      In Django, you can use model inheritance to create new models that are specialized versions of existing 
      models. There are two types of model inheritance in Django: 

      1. abstract base classes 
      2. multi-table inheritance.

                        --------------> gs82 Abstract Base class <----------------
      
1.    Abstract Base Classes:
            An abstract base class is a base model that does not create its own database table. Instead, it 
            provides a base set of fields and behavior that can be inherited by other models. You can use the 
            abstract option to create an abstract base class.
            We can modify base class fields in our child class.

            Example:-
                  from django.db import models

                  # Create your models here.
                  class CommonInfo(models.Model):
                        name = models.CharField(max_length=50)
                        age = models.IntegerField()
                        # date = models.DateField(auto_now_add=True)

                        class Meta:
                              abstract = True
                  
                  class Student(CommonInfo):
                        student_id = models.IntegerField()
                        fees_Submited = models.IntegerField()
                        date = None

                  class Teacher(CommonInfo):
                        Teachers_id = models.IntegerField()
                        Salary = models.IntegerField()
                        # date = models.DateTimeField()


                  -------------------> gs83 Model table Inheritance <-----------------

2.    Multi-Table Inheritance:
            Multi-table inheritance creates a one-to-one relationship between the base model and the child model, 
            resulting in two separate database tables. The child model automatically inherits all fields from the 
            base model, and you can add additional fields if needed.

            Isme kya hota h ki main class ka jo fields h wo to inherit hoga hi child class me but child class me extra
            fields hongi jisme parent class ka fields aur child ka field dono hoga .
            jab hum data save krenge child me to jo field parents se aya h unka data parent me bhi store ho jayega.

            Isme automatically foreign key bn jata h.

            Example:-
                  from django.db import models

                  # Create your models here.
                  class Examcenter(models.Model):
                        cname = models.CharField(max_length=50)
                        city = models.CharField(max_length=50)

                  class Student(Examcenter):
                        name = models.CharField(max_length=50)
                        roll = models.IntegerField()

            In this example, SubModel inherits from BaseModel. When you run migrations, Django creates two tables, 
            one for each model. SubModel includes all fields from BaseModel and adds the additional_field.
            1-to-1 relationship.


                  ------------------------> gs84 Proxy Models <---------------------


3.    Proxy Models:
            A proxy model is a way to create a different Python class with the same database table as another model.
            It doesn't create a new table in the database; it shares the table with the original model.

            Example:-   
                  from django.db import models

                  # Create your models here.
                  class Examcenter(models.Model):
                        cname = models.CharField(max_length=50)
                        city = models.CharField(max_length=50)


                  class MyExamcenter(Examcenter):
                        class Meta:
                              proxy = True
                              ordering = ['id']

Limitations:

      While proxy models offer flexibility, it's important to note that they have some limitations:

      You cannot add new fields to a proxy model. All fields must be inherited from the base model.
      Proxy models cannot have their own database table, so they cannot have a unique set of fields.
      When deciding whether to use proxy models, consider the specific use case and whether the behavior 
      modification you need can be achieved through this approach without the need for a new database table 
      or additional fields.

-------------------------------------------------------------------------------------------------------------------

                        --------------------> gs85 Model Manager <---------------------
      
      In Django, we can change the default name of methods by which we can access the objects of our database.
      by default it is 'objects'.

-------> models.py

      from django.db import models

      # Create your models here.
      class Student(models.Model):
            name = models.CharField(max_length=50)
            roll = models.IntegerField()

            # objects = models.Manager()            #ye default lga hua h jiski wajah se hum views.py me objects ke through access kr pate h.
            students = models.Manager()     #ab hum students ke name se acess kr payenge..

----------> views.py
      
      from django.shortcuts import render
      from .models import Student

      # Create your views here.
      def home(request):
            # students = Student.objects.all()            #humko yha pe 'objects' ki jagah manlo 'students' se access krna h to uske liye hi ye sara prishram h.
            students = Student.students.all()       #ab ye humara kaam krega
            return render(request,'school/home.html',{'student':students})

      
      In this example, a Post model has a custom manager named CustomManager. The CustomManager class inherits 
      from models.Manager. It includes a method called get_published_posts, which retrieves all published posts. 
      The Post model uses this custom manager by assigning an instance of it to the objects attribute.

-----------------------------------------------------------------------------------------------------------------

                        --------------->gs86 Custom Model Manager <-------------------------
      
      1. Modify the Initial QuerySet:
            In Django, you can modify the initial queryset returned by a model manager by overriding the 
            get_queryset method in your custom manager. The get_queryset method is responsible for returning the 
            initial queryset that will be used for subsequent database queries.

      step-1: first of all create models.py and create model class.
      ----------> models.py
                  from django.db import models

                  # Create your models here.
                  class Student(models.Model):
                        name = models.CharField(max_length=50)
                        roll = models.IntegerField()

                        objects = models.Manager()          #bydefault


      step-2: then register it . it will give normal output, but we want that our output will show in order of 'name'.
      step-3: So to achieve this we will create another file to override our default get_queryset.

Example of managers.py:-----

            from django.db import models
            from django.db.models.query import QuerySet

            class CustomManager(models.Manager):
                  def get_queryset(self):                     #to override the get_queryset
                        return super().get_queryset().order_by('name')

      step-4: Now we will import that CustomManager module to our models.py to override .
            
      ---------> models.py
                  from django.db import models
                  from .managers import CustomManager

                  # Create your models here.
                  class Student(models.Model):
                        name = models.CharField(max_length=50)
                        roll = models.IntegerField()

                        students = CustomManager()
                        objects = models.Manager()
                        


      2. To add extra manager Methods:
            To add extra methods to a custom manager in Django, you can define those methods within the manager
            class.

            Example.
            wese hi h bus isme hum managers.py me override krne ki jagah khud ka new method hi bna dete h.

------------> managers.py
                  from django.db import models
                  from django.db.models.query import QuerySet

                  class CustomManager(models.Manager):
                        def get_roll(self,r1,r2):
                              return super().get_queryset().filter(roll__range=[r1,r2])

------------> views.py 

                  from django.shortcuts import render
                  from .models import Student

                  # Create your views here.
                  def home(request):
                        # students = Student.objects.all() 
                        students = Student.students.get_roll(9013,9020)           
                        return render(request,'school/home.html',{'student':students})
      


------------------------------------------------------------------------------------------------------------------

      
                        ------------> gs-88 Model Relationships <--------------

      Sure, I'd be happy to elaborate on the relationships between Django models.

      In Django, each model in an application represents a database table¹. You can define the kind of relationship 
      you want between the different models in your Django application¹. Django supports three main types of 
      relationships between its models:

1. **One-to-One Relationship**: A one-to-one relationship means that a record in one table relates to a 
      single record in another table. 
      For example, a Django model that defines users can have a one-to-one relationship with another Django 
      model, which defines users' profiles¹. In this scenario, a user can have only one profile and a profile 
      can be associated with only one user¹. Django provides you with `OneToOneField`, which helps define a 
      one-to-one relationship between two different models¹.

      
            from django.db import models
            from django.contrib.auth.models import User

            # Create your models here.
            #class User(models.Model):

            class Page(models.Model):
                  user = models.OneToOneField(to=User,on_delete=models.CASCADE,primary_key=True)
                  # user = models.OneToOneField(to=User,on_delete=models.CASCADE,primary_key=True,limit_choices_to={'is_staff':True}) #ab only jo staff h wahi create kr sakta h 
                  # user = models.OneToOneField(to=User,on_delete=models.PROTECT,primary_key=True)  #agar isko humne PROTECT kr 
                  #diya to hum directly user ko delete nhi kr sakte h jo bhi isse associated h. phle humko page delete krna hoga.
                  page_name = models.CharField(max_length=70)
                  page_cat = models.CharField(max_length=70)
                  page_publish_date = models.DateField()

      user ke delete hone pe abhi humara post delete ho ja rha tha ab humko krna h ki post ke delete hone pe humara
      user bhi delete ho jaye uske liye hum signals ka use krenge ki 
------> jesse hi post_delete signal mile user bhi delete ho jaye uska.

            signals.py

            from .models import Page
            from django.db.models.signals import post_delete
            from django.dispatcher import receiver

            @receiver(post_delete,sender = Page)
            def delete_post_with_user(sender,instance,**kwargs):
                  print('user also get deleted')
                  instance.user.delete()

-----------------------------------------------------------------------------------------------------------------
            ------------------> gs89 inherited one-to-one relationships <-------------------

            from django.db import models
            from django.contrib.auth.models import User

            # Create your models here.
            class Page(models.Model):
                  user = models.OneToOneField(to=User,on_delete=models.CASCADE,primary_key=True)
                  page_name = models.CharField(max_length=70)
                  page_cat = models.CharField(max_length=70)
                  page_publish_date = models.DateField(auto_now_add=True)

            class like(Page):
                  panna = models.OneToOneField(to=Page,on_delete=models.CASCADE,primary_key=True,parent_link=True)
                  likes = models.IntegerField()           #isme default hi 1to1 ka relationship hoga.

---------> parent_link=True: By setting parent_link=True, you are indicating that the field (panna in this case) 
      is a link to the parent model's primary key. In other words, the like model's panna field is also the 
      primary key of the Page model.

      This can be useful in cases where you want to establish a one-to-one relationship with the parent model and 
      you want the primary key of the child model to also serve as the primary key of the parent model.

    
------------------------------------------------------------------------------------------------------------------

            ------------------------> gs99- Many-to-one relationship <-------------------------

2. **Many-to-One Relationship**: This is used when one record of a model A is related to multiple records 
      of another model B². For example, a model `Song` has a many-to-one relationship with a model `Album`, i.e., 
      an album can have many songs, but one song cannot be part of multiple albums². Many-to-one relations are 
      defined using `ForeignKey` field of `django.db.models`².

      
            from django.db import models

            class Album(models.Model):
                  title = models.CharField(max_length=100)
                  artist = models.CharField(max_length=100)

            class Song(models.Model):
                  title = models.CharField(max_length=100)
                  album = models.ForeignKey(Album, on_delete=models.CASCADE)

------------------------------------------------> Example <-----------------------------------------------------

      from django.db import models
      from django.contrib.auth.models import User

      # Create your models here.
      class Author(models.Model):
            name = models.CharField(max_length=50)
            def __str__(self):
                  return self.name                #Bus humko yhi se name return krdena h author ka to humko book section me dekhne ko mil jayega Author name.

      class Book(models.Model):
            title = models.CharField(max_length=70)
            author = models.ForeignKey(to=Author,on_delete=models.CASCADE)

      class Post(models.Model):
            # user = models.ForeignKey(to=User,on_delete=models.CASCADE)          #foreignkey se humara many-to-one reationship bnti h.
            # user = models.ForeignKey(to=User,on_delete=models.PROTECT)      #agar hum chate h ki user tb tk delete na ho jabtk uski sari post delete na ho jaye.

            # abhi hum chate h ki user ke delete hone ke bad bhi humara post delete na ho.
            user = models.ForeignKey(to=User,on_delete=models.SET_NULL,null=True)   #agar humko SET_NULL krna h to humko null=True bhi set krna hoga.phir humko migrate krna hoga.
            post_title = models.CharField(max_length=50)
            post_cat = models.CharField(max_length=50)
            post_publish_data = models.DateField(auto_now_add=True)



-------------------------------------------------------------------------------------------------------------------

                        -----------------> gs91 Many-to-Many relationship <-----------------

            
3. **Many-to-Many Relationship**: This is used when one record of a model A is related to multiple records of 
      another model B and vice versa². For example, a model `Book` has a many-to-many relationship with a model 
      `Author`, i.e., a book can be written by multiple authors and an author can write multiple books². 
      Many-to-many relations are defined using `ManyToManyField` field of `django.db.models`².

      
            from django.db import models
            from django.contrib.auth.models import User

            # Create your models here.
            class Author(models.Model):
                  name = models.CharField(max_length=50)

                  def __str__(self):
                        return self.name

            class Book(models.Model):
                  title = models.CharField(max_length=50)
                  author = models.ManyToManyField(Author)

                  def Authors(self):
                        return ','.join([str(au) for au in self.author.all()])      # .join()   list[] ke elements join

            class Song(models.Model):
                  user = models.ManyToManyField(User)
                  song_name = models.CharField(max_length=50)
                  song_duration = models.IntegerField()

                  def singers(self):
                        return ','.join([str(p) for p in self.user.all()])      #isme hum phle sare users get kr le rhe,phir unko string me convert krke unke bich me ',' lgwa ke return kr de rhe h. 
      

      These relationships allow you to create complex database queries using Django's database-abstraction API and 
      retrieve related objects.


--------------------------------------------------------------------------------------------------------------------


                        ----------> gs-92 Food-Recipe Small Project based on Models Relationship <-----------

      
      here we have to create a models in which 

      there is a chef..
      who make recipe , Recipe have many ingridents,
      many chefs , can make 1 recipe.  


from django.db import models
from django.contrib.auth.models import User

# Create your models here.
class Ingridents(models.Model):
    user  = models.ForeignKey(to=User,on_delete=models.CASCADE)         #1 Chef can use multiple Ingridents one-to-many relationship 
    Spices_name = models.CharField(max_length=50)
    Spice_qunatity = models.IntegerField()

    def __str__(self):
        return self.Spices_name
    
class Recipe(models.Model):
    user = models.ForeignKey(to=User,on_delete=models.CASCADE)     #many cheif can make 1 recipe or 1 chief can make many recepy
    ingrident = models.ManyToManyField(to=Ingridents)                   #many ingridents can be used on many Recepies
    recipe_name = models.CharField(max_length=70)
    instructions = models.TextField()

    def ingri(self):
        return ','.join([str(name) for name in self.ingrident.all()])



------------------------------------------------------------------------------------------------------------------

                        -------------> gs-92 Class Based Views <--------------------
                                    simple HttpResponse example

------------> views.py 

                  from django.shortcuts import render,HttpResponse
                  from django.views import View


                  # Create your views here.
                  def home(request):
                        return HttpResponse('<h2>THis is function based views.</h2>')

                  #views through class
                  #child of View class
                  class Hom2(View):
                        name = 'Ravi'
                        def get(self,request):
                              # name = 'Ravi'
                              # return HttpResponse('<h2>THis is Class based views.</h2>'+name)
                              return HttpResponse(self.name)

------------> urls.py

                  from django.urls import path
                  from . import views

                  urlpatterns = [
                        path('',views.home,name='home'),
                        path('cl/',views.Hom2.as_view(name='harsh'),name='class'),           #ab name me harsh ayega yha ke argument ki value jada h
                        path('child/',views.Myviewchild.as_view(),name='child')     #url of child class
                  ]

                  

                  #child of our class 
                  class Myviewchild(Hom2):
                  def get(self,request):
                        return HttpResponse(self.name)

--------------------------------------------------------------------------------------------------------------------

            There are 2 types of class based views ...
            1. Base class view
            2. Generic class view
                        ----------------> gs 93 Full base class Views <--------------
            We have 3 base class views... in which we can done everything by Class view, but other two views can 
            help us to code fast

            1. class View
            2. Template View
            3. Redirect View

      -----------> views.py

                  from django.shortcuts import render,HttpResponse
                  from django.views import View
                  from .forms import ContactForm

                  # Create your views here.
                  def homefun(request):
                        return render(request,'school/home.html')


                  class Myhome(View):
                        def get(self,request):          #jab bhi hum koi rquest krte h to get method ke through aata h.
                              return render(request,'school/class.html')
                  
                        def about(request):
                              context = {'msg':'Function Based views'}
                              return render(request,'school/about.html',context)

                  class About(View):
                        def get(self,request):
                              context = {'msg':'Class Based views'}
                              return render(request,'school/about.html',context)
                  

                        def contact(request):
                              if request.method=='POST':
                                    form = ContactForm(request.POST)
                                    if form.is_valid():
                                          print(form.cleaned_data['name'])
                                          return HttpResponse('Thankyou Form submitted')
                                    
                              else:
                                    form = ContactForm()
                              return render(request,'school/contact.html',{'form':form})


                  class Contact(View):
                        def get(self,request):
                              form = ContactForm()
                              return render(request,'school/contact.html',{'form':form})
                  
                        def post(self,request):
                              form = ContactForm(request.POST)
                              if form.is_valid():
                                    print(form.cleaned_data['name'])
                                    return HttpResponse('Thankyou Form submitted')
                        
                  # def news(request):
                  #     template = 'school/news.html'
                  #     context={'info':'Earning money is important to sustain.'}
                  #     return render(request,template,context)


                        def news(request,template):         #passing templates through urls.py
                              # template = 'school/news.html'
                              context={'info':'Earning money is important to sustain.'}
                              return render(request,template,context)


                  # class News(View):
                  #     template = 'school/news.html'
                  #     def get(self,request):
                  #         context={'info':'Earning money is important to sustain.'}
                  #         return render(request,self.template,context)

                  class News(View):
                        template = ''
                        def get(self,request):
                              context={'info':'Earning money is important to sustain.'}
                              return render(request,self.template,context)

      -----------------> urls.py 

                  from django.urls import path
                  from . import views

                  urlpatterns = [
                  path('',views.homefun,name='home'),
                  path('cl/',views.Myhome.as_view(),name='class'),         #humko yha pe function chaiy hota h but hum yha class de rhe h to usko sahi krne ke liy .as_view() use hota h.
                  path('about/',views.about,name='about'),
                  path('abcl/',views.About.as_view(),name='abclass'),
                  path('form/',views.contact,name='contact'),
                  path('clform/',views.Contact.as_view(),name='clform'),
                  # path('news/',views.news,name='name')
                  path('news/',views.news,{'template':'school/news.html'},name='name'),   #passing templates through urls
                  # path('newscl/',views.News.as_view(),name='clnews')
                  path('newscl/',views.News.as_view(template = 'school/news.html'),name='clnews'),
                  
                  ]

-----------------------------------------------------------------------------------------------------------------

                        ----------------> gs-94 Template view <-----------------    

TemplateView is one of the generic class-based views provided by Django. It is specifically designed for rendering 
a template. This view is useful when you want to display a simple HTML page without any complex logic or data 
processing in the view itself. TemplateView simplifies the process of rendering a template and passing context
data to it.

Attributes:
      
template_name (optional):
      The name of the template to be rendered. This is a required attribute, and you need to specify the template that should be used.

extra_context (optional):
      A dictionary containing additional context data to be added to the template context.
      
content_type (optional):
      The content type of the response. Defaults to 'text/html'.
      
response_class (optional):
      The class to be used for the HTTP response. Defaults to HttpResponse.
      
name (optional):
      A unique identifier for the view. This is often used in reverse URL resolution.
      
http_method_names (optional):
      A list of HTTP methods that the view can handle. Defaults to ['get'].



                              -------------> Example <------------------

            from django.views.generic import TemplateView
            from django.http import HttpResponse

            class MyTemplateView(TemplateView):
                  template_name = 'my_template.html'
                  extra_context = {'extra_variable': 'Extra Value'}
                  content_type = 'text/html'
                  response_class = HttpResponse
                  name = 'my-template-view'
                  http_method_names = ['get']

                  def get_context_data(self, **kwargs):
                        context = super().get_context_data(**kwargs)
                        # Additional context data can be added here
                        context['additional_variable'] = 'Additional Value'
                        return context

                  def render_to_response(self, context, **response_kwargs):
                        # Custom rendering logic can be added here
                        return super().render_to_response(context, **response_kwargs)

            # URLs configuration in urls.py
            from django.urls import path

            urlpatterns = [
            path('my-template/', MyTemplateView.as_view(), name='my-template-view'),
            ]



------------> urls.py Sirf itne se hi chal jayega..

                  from django.contrib import admin
                  from django.urls import path
                  from school import views

                  urlpatterns = [
                        path('admin/', admin.site.urls),
                        path('',views.TemplateView.as_view(template_name = 'school/home.html'),name='home'),
                        path('index/',views.TemplateView.as_view(template_name = 'school/home.html'),name='home')
                  
                  ]

-------------> Using Views.py


                  from django.shortcuts import render
                  from django.views.generic.base import TemplateView

                  # Create your views here.

                  class Home(TemplateView):
                        template_name = 'school/home.html'

-----------------> urls.py

                  from django.contrib import admin
                  from django.urls import path
                  from school import views

                  urlpatterns = [
                        path('admin/', admin.site.urls),
                        # path('',views.TemplateView.as_view(template_name = 'school/home.html'),name='home'),
                        # path('index/',views.TemplateView.as_view(template_name = 'school/home.html'),name='home')
                        path('',views.Home.as_view(),name='home')
                  ]

      -----------------------------> Now we want to pass the context to the templates <---------------------

-------------> views.py

      from typing import Any
      from django.shortcuts import render
      from django.views.generic.base import TemplateView

      # Create your views here.

      class Home(TemplateView):
            template_name = 'school/home.html'      
            #Now using context
            def get_context_data(self, **kwargs):
                  context = super().get_context_data(**kwargs)
                  # context['name'] ='Sonam'
                  # context['roll'] = 101
                  context = {'name':'sonam','roll':101}
                  return context

      urls.py same rhegi uparr ki tarah,

-----------------------> Abhi extra arguments kese dale >>>>>>>>>>>>>>>>

------------> views.py        

                  from django.shortcuts import render
                  from django.views.generic.base import TemplateView

                  # Create your views here.

                  class Home(TemplateView):
                        template_name = 'school/home.html'      
                        #Now using context
                        def get_context_data(self, **kwargs):
                              context = super().get_context_data(**kwargs)
                              context['name'] ='Sonam'
                              context['roll'] = 101
                              # context = {'name':'sonam','roll':101}         #esse extra context nhi chalega wo only upar wale method se dictionary dene pe chlta h.
                              return context


-----------> urls.py          

                  from django.contrib import admin
                  from django.urls import path
                  from school import views

                  urlpatterns = [
                        path('admin/', admin.site.urls),
                        # path('',views.TemplateView.as_view(template_name = 'school/home.html'),name='home'),
                        # path('index/',views.TemplateView.as_view(template_name = 'school/home.html'),name='home')
                        # path('',views.Home.as_view(),name='home'),
                        path('',views.Home.as_view(extra_context = {'course':'btech'}),name = 'home')
                  ]


-----------------------------------------------------------------------------------------------------------------

                              ------------> gs95 Redirect View <-----------  

      isse hum redirect krwa sakte h kisi bhi link ko previous link se..

-------------> views.py

                  from django.shortcuts import render
                  from django.views.generic.base import TemplateView,RedirectView

                  # Create your views here.

-------------> urls.py

                  from django.contrib import admin
                  from django.urls import path
                  from school import views

                  urlpatterns = [
                        path('admin/', admin.site.urls),
                        path('',views.TemplateView.as_view(template_name='school/home.html'),name='blankhome'),
                        path('home/',views.RedirectView.as_view(url='/'),name='home')
                  ]


----------------> Now by using child of RedirectView

----------> views.py          

                  from django.shortcuts import render
                  from django.views.generic.base import TemplateView,RedirectView

                  # Create your views here.

                  class Redirects(RedirectView):
                        url = '/'

------------> urls.py 

                  from django.contrib import admin
                  from django.urls import path
                  from school import views

                  urlpatterns = [
                        path('admin/', admin.site.urls),
                        path('',views.TemplateView.as_view(template_name='school/home.html'),name='blankhome'),
                        # path('home/',views.RedirectView.as_view(url='/'),name='home')
                        path('home/',views.Redirects.as_view(),name='home')     #through child class
                  ]


            ---------------------> Pattern Name <-------------------

      isse kya hoga ki hum jiska bhi pattern name dal denge uske tarah path ko set krega ye..

------------> urls.py
                  from django.contrib import admin
                  from django.urls import path
                  from school import views

                  urlpatterns = [
                        path('admin/', admin.site.urls),
                        path('',views.TemplateView.as_view(template_name='school/home.html'),name='blankhome'),
                        # path('home/',views.RedirectView.as_view(url='/'),name='home')
                        path('home/',views.Redirects.as_view(),name='home'),     #through child class
                        path('index/',views.RedirectView.as_view(pattern_name = 'home'),name='index')       #pattern
                  ]

------------------------------------------------------------------------------------------------------------------
                  ------------------> Crud Based on class View <--------------------

      done just changed function based views with class based views


      from django.shortcuts import render,redirect,HttpResponseRedirect
      from django.views import View
      from .forms import UserForm
      from django.contrib import messages
      from .models import User
      from django.views.generic.base import TemplateView,RedirectView

      # Create your views here.
      class Home(TemplateView):
            template_name='enroll/home.html'

            def get_context_data(self,*args,**kwargs):
                  context = super().get_context_data(**kwargs)
                  fm = UserForm()
                  info = User.objects.all()
                  context = {'form':fm,'info':info}
                  return context
            
            def post(self,request):
                  fm = UserForm(request.POST)
                  if fm.is_valid():
                        fm.save()
                  return HttpResponseRedirect('/')

            
      class UserInfoEdit(View):
            def get(self,request,pk):
                  info = User.objects.get(pk=pk)
                  fm = UserForm(instance=info)
                  return render(request,'enroll/infoupdate.html',{'form':fm,'info':info})
            
            def post(self,request,pk):
                  info = User.objects.get(pk=pk)
                  fm = UserForm(request.POST,instance=info)
                  if fm.is_valid():
                        fm.save()
                        messages.success(request,'Data Updated Successfully')
                  return redirect('home')
      
      # class userdelete(View):
      #     def post(self,request,id):
      #         user = User.objects.get(id=id)
      #         user.delete()
      #         messages.success(request,'User deleted Successfully')
      #         return redirect('home')

      class userdelete(RedirectView):
            url = '/'
            def get_redirect_url(self,*args,**kwargs):
                  #   print(kwargs)
                  pi = kwargs['id']     #to get id
                  User.objects.get(pk=pi).delete()
                  return super().get_redirect_url(*args,**kwargs)

-----------------------------------------------------------------------------------------------------------------

                  -----------------> Generic Class Based Views <-----------------

----->Django provides a set of pre-built views known as "generic class-based views.

----->These views are built by combining and extending the functionality of base classes to handle common patterns 
            and tasks.

----->Examples of generic class-based views include 

1.    ListView, 
2.    DetailView, 
3.    Editing View
      1.    FormView, 
      2.    CreateView
      3.    UpdateView
      4.    DeleteView

------>They are designed to simplify the development of common patterns like displaying lists of objects, showing 
            details of an object, handling form submissions, etc.




            ----------------------------------->gs96- List views <--------------------------------------------


Attributes:

      - `model`: Set the model from which the list will be generated.

      - `template_name`: Specify the template used to render the list. By default, Django looks for a template 
            with the name `<app_name>/<model_name>_list.html`.

      - `context_object_name`: Set the variable name for the list in the template. In the example above, the 
            variable name is `'your_model_list'`.

      - `ordering`: Optionally, set the default ordering for the list. In the example, it orders the list by the 
            `date_field` attribute in descending order.

      In Django, a list view is a type of view that displays a list of objects, typically from a queryset. 
      Django provides a generic class-based view called `ListView` that simplifies the implementation of list views.
      Here's an overview of how to use `ListView`:

            from django.views.generic import ListView
            from .models import YourModel

            class YourModelListView(ListView):
                  model = YourModel
                  template_name = 'your_model_list.html'  # Specify the template for rendering the list
                  context_object_name = 'modlename_list'  # Specify the variable name for the list in the template
                  ordering = ['-date_field']  # Optionally, specify the default ordering of the list

      # urls.py
            from django.urls import path
            from .views import YourModelListView

            urlpatterns = [
                  path('your-model-list/', YourModelListView.as_view(), name='your_model_list'),
            ]


      In the template (`your_model_list.html`), you can then loop through the list using the specified 
      variable name:

html
            {% extends 'base.html' %}

                  {% block content %}
                        <h2>Your Model List</h2>
                        <ul>
                              {% for item in your_model_list %}
                                    <li>{{ item.some_field }}</li>
                              {% endfor %}
                  </ul>
            {% endblock %}

--------------------------------------> Practical Approach Default everything <-----------------------------------------

      1. First create a model.
      2. Register it.
      3. Write methods in views.py 
      4. Write urls in urls.py

      ----------------> Models.py
            from django.db import models

            # Create your models here.
            class Student(models.Model):
                  name = models.CharField(max_length=70)
                  roll = models.IntegerField()
                  course = models.CharField(max_length=70)

      ----------------->Views.py
            from django.shortcuts import render
            from .models import Student
            from django.views.generic.list import ListView

            # Create your views here.
            class StudentListView(ListView):
                  model = Student         #humko isise sara objects mil gya default context object me .... object_list
                  # by default humare template ka naam hona chahiye---'school/student_list.html',,,,folder/modelname_list.html
                  # by default humare sare models ke objects store hue h student_list naam ke context me..

      -----------------> Urls.py
            from django.urls import path
            from . import views

            urlpatterns = [
                  path('',views.StudentListView.as_view(),name='home'),
            ]

      -----------------> Html
            <table border = 2px solid red; >
            <tr>
                  <th>ID</th>
                  <th>NAME</th>
                  <th>ROLL</th>
            </tr>
            {% for stu in student_list %}             /// object_list bhi kaam krta h
            <tr>
                  <td>{{stu.id}}</td>
                  <td>{{stu.name}}</td>
                  <td>{{stu.roll}}</td>
            </tr>
            {% endfor %}
            </table>

---------------------------------> Custom name of template and context <---------------------------------------


-------------> Views.py
                  from django.shortcuts import render
                  from .models import Student
                  from django.views.generic import ListView

                  # Create your views here.
                  class StudentListView(ListView):
                        model = Student
                        template_name = 'school/Home.html'  #here we have to specified the full path of the custom html file, not only name of html, But default bhi rhega.
                        # template_name_suffix = '_get' #then our defalut file name get change with ---> school/student_get.html.
                        context_object_name = 'students'    #humne default context ko bhi badal diya h.
                        ordering = ['-id']  # here select the order in descending order.

-------------> html

                  <table border = 2px solid red; >
                  <tr>
                        <th>ID</th>
                        <th>NAME</th>
                        <th>ROLL</th>
                  </tr>
                  {% for stu in students %}
                  <tr>
                        <td>{{stu.id}}</td>
                        <td>{{stu.name}}</td>
                        <td>{{stu.roll}}</td>
                  </tr>
                  {% endfor %} 
                  </table>
-----------------------------------------------------------------------------------------------------------------

                        -----------------> gs98 - DetailView <--------------------

      
      In Django, a "DetailView" is a class-based view that displays the details of a single object. It's commonly 
      used when you want to show the details of a specific database record or object on a web page. 
      DetailViews are particularly useful when you're working with models and want to create pages that show 
      detailed information about individual instances of those models.

Attributes:
model:
      The model class associated with this view. Should be set to the model whose instances you want to display details for.
      
template_name:
      The name of the template to be used for rendering the details. Can be a string or a list of strings.
      
context_object_name:
      The name of the context variable containing the object in the template. Defaults to the lowercase name of the model.
      
pk_url_kwarg:
      The name of the URL pattern keyword argument that contains the primary key. Defaults to 'pk'.
      
queryset:
      The queryset that is used to fetch the object. By default, it is model.objects.all().


-----> isme humko primary key ka slug dena hi hoga url me....
-----> ListView me humko Lists mil jati h sare objects ki, iSme hume 1 object ka details mil jata h

                                    ----> Steps <----

      1.create models
      2.create views code..
      3.create html files

-----------> Views.py
                  class Studentlist(ListView):
                        model = Student
                        template_name = 'school/home.html'
                        context_object_name = 'students'

                  class StudentDetails(DetailView):
                        model = Student
                        template_name = 'school/harsh.html'      #default---student_detail.html
                        context_object_name = 'stu'        #default---student_detail
                        pk_url_kwarg = 'id'


-----------------------------------------------------------------------------------------------------------------

                  --------------> gs-99   Methods in DetailView <---------------

Methods:
      
get_queryset(self):
      Override this method to customize the queryset used to fetch the object. By default, it returns self.model.objects.all().

get_object(self, queryset=None):
      Retrieves the object that this view displays. It uses the primary key captured from the URL to fetch the 
      object from the queryset.
      
**get(self, request, *args, kwargs):
      Handles GET requests. Calls get_object to retrieve the object and renders the template with the object as 
      context.

**get_context_data(self, kwargs):
      Adds extra context data to be used in the template. By default, it includes the object as the context 
      variable specified by context_object_name.

**render_to_response(self, context, response_kwargs):
      Renders the template with the given context and returns an HttpResponse.

-------------------> Practical Approach


            from typing import Any
            from django.shortcuts import render
            from .models import Student
            from django.views.generic import ListView,DetailView


            class Studentlist(ListView):
                  model = Student
                  template_name = 'school/home.html'
                  context_object_name = 'students'

            class StudentDetails(DetailView):
                  model = Student
                  template_name = 'school/harsh.html'      #default---student_detail.html
                  # context_object_name = 'stu'        #default---student       {{stu.id}}
                  pk_url_kwarg = 'id'         #agar humko urls me pk ki jagah 'id' likhna h to hume yha pe changes krna hoga..

                  #ab iske methods

                  def get_context_data(self,*args,**kwargs):
                        context = super().get_context_data(**kwargs)

                        context['all_students'] = self.model.objects.all().order_by('name')
                        return context

      
------------------------------------------------------------------------------------------------------------------

                  ------------->gs-100 Editing View ---- FormView <-----------

      In Django, the FormView is a class-based view used for displaying and processing forms. It is part of 
      Django's generic views and is particularly useful when you need to render a form, handle form submission, 
      and provide validation logic.


Methods:
**get(self, request, *args, kwargs):
      Handles GET requests and renders the form.

**post(self, request, *args, kwargs):
      Handles POST requests and processes form submissions. It validates the form data and, if valid, 
      performs the form-specific actions defined in the form_valid method.
      
form_valid(self, form):
      Called when the form is successfully validated. Override this method to define what should happen when the 
      form is valid. By default, it redirects to the success_url.
      
form_invalid(self, form):
      Called when the form is invalid. Override this method to define what should happen when the form is not 
      valid. By default, it re-renders the form with the validation errors.
      
get_form_class(self):
      Returns the form class to use. Override this method to provide a custom form class.
      
get_form_kwargs(self):
      Returns the keyword arguments to use when instantiating the form. Override this method to customize the 
      instantiation of the form.
      
get_success_url(self):
      Returns the URL to redirect to after a successful form submission. Override this method to provide a custom 
      success URL.


Attributes:

form_class:
            The form class to use for rendering and processing the form.
            
template_name:
            The name of the template to use for rendering the form.
            
success_url:
            The URL to redirect to after a successful form submission.
            
initial:
            A dictionary of initial data for the form.
            
prefix:
            A prefix to use when rendering the form. This is useful when you have multiple forms on the same page.

    
-------------------> Practical Approach


1.    Create Forms.py
2.    Write code in VIews.py
3.    make its Urls..

------------> Forms.py
            from django import forms

            class Contact(forms.Form):
                  name = forms.CharField()
                  email = forms.EmailField()
                  msg = forms.CharField(widget = forms.Textarea)

----------->Views.py

            from django.shortcuts import render,HttpResponse
            from .forms import Contact
            from django.views.generic import FormView,TemplateView

            # Create your views here.
            class ContactFormView(FormView):
                  template_name = 'school/contact.html'       #default nhi h but humko template_name dena hi hpga..
                  form_class = Contact        # konse form ko render krna h?
                  success_url = '/thankyou/'          #ye bhi dena h ki Form data send hone ke bad kha jaye?
                  initial = {'name':'harsh Saahu'}        #placeholder value ki tarah hi h, initially fill ho kr ayega.
                  
                  def form_valid(self,form):
                        # print(form)
                        name = form.cleaned_data['name']
                        print(name)
                        return super().form_valid(form)       #isse humara thankyou link chal rhi h. important because it allows the default behavior defined in the FormView class to be executed.
                        # return HttpResponse('thanks')

            class ThankyouTemp(TemplateView):
                  template_name = 'school/thanks.html'

------------> urls.py

            from django.urls import path
            from . import views

            urlpatterns = [
                  path('',views.ContactFormView.as_view(),name='home'),
                  path('thankyou/',views.ThankyouTemp.as_view(),name='thanks'),
            ]

----------------------------------------------------------------------------------------------------------------

                  -------------------> gs-101 Editing View ---- CreateView <-------------

      In Django, the CreateView is another class-based view that is used for displaying a form for creating an 
      object and handling the submission of that form. It is part of Django's generic views and is commonly used 
      when you want to simplify the process of creating new instances of a model.


Attributes:
model:
      The model class associated with this view. Should be set to the model for which you want to create instances.
      
form_class:
      The form class to use for rendering and processing the form.
      
template_name:
      The name of the template to use for rendering the form.
      
success_url:
      The URL to redirect to after a successful form submission.
      
initial:
      A dictionary of initial data for the form.
      
prefix:
      A prefix to use when rendering the form. This is useful when you have multiple forms on the same page.


----------------> Methods

**get(self, request, *args, kwargs):
      Handles GET requests and renders the form for creating a new object.
      
**post(self, request, *args, kwargs):
      Handles POST requests and processes form submissions. It validates the form data, creates a new object if the form is valid, and redirects to the success URL.
      
form_valid(self, form):
      Called when the form is successfully validated. It is responsible for creating the new object and returning an HTTP response. By default, it redirects to the success_url.
      
form_invalid(self, form):
      Called when the form is invalid. Override this method to define what should happen when the form is not valid. By default, it re-renders the form with the validation errors.
      
get_form_class(self):
      Returns the form class to use. Override this method to provide a custom form class.
      
get_form_kwargs(self):
      Returns the keyword arguments to use when instantiating the form. Override this method to customize the instantiation of the form.
      
get_success_url(self):
      Returns the URL to redirect to after a successful form submission. Override this method to provide a custom success URL.


------------------------> models.py

            from django.db import models

            # Create your models here.
            class Student(models.Model):
                  name = models.CharField(max_length=70)
                  email = models.EmailField()
                  password = models.CharField(max_length=70)

-------------------------> Views.py

            from django.shortcuts import render
            from django.views.generic import CreateView,TemplateView
            from .models import Student

            # Create your views here.
            class StudentCreateView(CreateView):
                  model = Student                     #isse humara data save ho jata h..
                  fields = [field.name for field in Student._meta.fields]
                  success_url = '/success/'           # success_url='/'   to return at same page.

                  def form_valid(self, form):
                        name = form.cleaned_data['name']
                        print(name)
                        return super().form_valid(form)




            class success(TemplateView):
            template_name = 'school/success.html'

-----------------> Urls.py

      from django.urls import path
      from . import views

      urlpatterns = [
            path('',views.StudentCreateView.as_view(template_name='school/forms.html'),name='form'),
            path('success/',views.success.as_view(),name='success'),
      ]






------------------------------------------------------------------------------------------------------------------

            ----------------> gs102- How to add bootstrap classes in createView Form <------------------


2 ways to add Class in elements---->

      1st.  Using get_form() method:


                  from typing import Any
                  from django.shortcuts import render
                  from django.views.generic import CreateView,TemplateView
                  from .models import Student
                  from django import forms

                  # Create your views here.
                  class StudentCreateView(CreateView):
                        model = Student                     #isse humara data save ho jata h..
                        fields = [field.name for field in Student._meta.fields]
                        success_url = '/success/'           # success_url='/'   to return at same page.

                        def get_form(self):
                              form = super().get_form()
                              form.fields['name'].widget = forms.TextInput(attrs={'class':'myclass'})
                              form.fields['password'].widget = forms.PasswordInput(attrs={'class':'mypass'})
                              return form



                  class success(TemplateView):
                  template_name = 'school/success.html'

      ------------------------------------------------------------------------------------------------------

      2nd. MEthod:

            steps:
                  1. Isme sabse phle models ke through form bna lenge usko simply render krdenge views me.
                  Same jese hum normal me krte the...

            ------> Forms.py
                        from django import forms
                        from .models import Student

                        class StudentForm(forms.ModelForm):
                        class Meta:
                              model = Student
                              # fields = '__all__'
                              fields = ['name','password','email']
                              widgets = {'name':forms.TextInput(attrs={'class':'mytext'}),
                                          'password':forms.PasswordInput(attrs={'class':'mypass'})}

            ------> Views.py
                        from django.shortcuts import render
                        from django.views.generic import CreateView,TemplateView
                        from .models import Student
                        from django import forms
                        from .forms import StudentForm
                        
                        class StudentCreateView(CreateView):
                        form_class = StudentForm
                        success_url = '/success/'
                        #isme humko template ka name dena hi hoga default nhi lega wo 

                        class success(TemplateView):
                        template_name = 'school/success.html'


-----------------------------------------------------------------------------------------------------------------

            -------------------->  gs103 Editing View--UpdateView <-----------------

      In Django, the `UpdateView` class is part of the generic class-based views (CBVs) and is used to display a 
      form for updating an existing object and then saving the changes. It simplifies the process of handling form 
      submissions for updating objects.

      Here's an overview of the `UpdateView` class along with its attributes and methods:

                        ------------> UpdateView` Attributes <----------------

1. **model (required):**
      - The model associated with the view. It defines which model the view will be updating.

2. **template_name (optional):**
      - The name of the template to be used for rendering the view.

3. **form_class (optional):**
      - The form class to be used for displaying and processing the update form.

4. **success_url (required):**
      - The URL to redirect to after a successful form submission.

5. **pk_url_kwarg (optional):**
      - The name of the keyword argument to use for the primary key value from the URL.

                        ------------->`UpdateView` Methods <----------------


1. **get(self, request, *args, **kwargs):**
      - Handles GET requests and renders the update form.

2. **post(self, request, *args, **kwargs):**
      - Handles POST requests, validates the form, and saves the updated object.

3. **get_object(self, queryset=None):**
      - Retrieves the object to be updated. It uses the primary key passed in the URL.

4. **form_valid(self, form):**
      - Called when the form is successfully validated. Saves the updated object and redirects to `success_url`.

5. **form_invalid(self, form):**
      - Called when the form validation fails. Renders the form again with error messages.

6. **get_context_data(self, **kwargs):**
      - Adds additional context data to be passed to the template.

                               --------------> Example <-------------------

      from django.views.generic.edit import UpdateView
      from .models import YourModel
      from .forms import YourFormClass

      class YourUpdateView(UpdateView):
            model = YourModel
            template_name = 'your_template.html'
            form_class = YourFormClass
            success_url = '/success/'
            pk_url_kwarg = 'your_pk_name'

------------------------------> Practical Approach

      isme humko updateView ki url me pk//id dena hoga tabhi to verify hoga..

      -------------> models.py

                  from django.db import models

                  # Create your models here.
                  class Student(models.Model):
                        name = models.CharField(max_length=70)
                        email  = models.EmailField()
                        password = models.CharField(max_length=70)

      -------------> Views.py

                  from django.shortcuts import render
                  from .models import Student
                  from django.views.generic import CreateView,TemplateView,UpdateView,ListView
                  from django import forms

                  # Create your views here.
                  class StudentCreate(CreateView):
                        model = Student
                        template_name = 'school/user.html'
                        success_url = '/success/'
                        fields = [field.name for field in Student._meta.fields]
                        # context_object_name = 'stu'       #not working...

                        def get_form(self):
                              form = super().get_form()
                              form.fields['name'].widget = forms.TextInput(attrs={'class':'mytext'})
                              form.fields['password'].widget = forms.PasswordInput(render_value=True,attrs={'class':'mypass'})      #render_value se hi humara password dikhega edit krne ke liye.
                              return form
                        
                        def get_context_data(self, **kwargs):
                              return super().get_context_data(**kwargs)
                        
                        class StudentUpdate(UpdateView):
                              model = Student
                              fields = [field.name for field in Student._meta.fields]
                              # default template name = school/student_form.html
                              template_name = 'school/update.html'
                              success_url = '/updated/'

                  class updated(TemplateView):
                        pass


                  class Success(TemplateView):
                        model = Student
                        template_name = 'school/success.html'

                        def get_context_data(self, **kwargs):
                              context = super().get_context_data(**kwargs)
                              context['all'] = self.model.objects.all()
                              return context


                  class Allstudents(ListView):
                  model = Student
                  template_name = 'school/allstudent.html'
                  context_object_name = 'students'

      ------------------------------------------------------------------------------------------------------------


            ------------------> gs104 checking/adding  classes in UpdateView <------------------


------> Abhi hum dekhenge ki kese hum UpdateView Form me classes lgayenge ,,,
            check krenge ki kya humare form ki classes isme inherit ho kr khud aarhi h.

Ans. 1st method se krne pe nhi ayengi classes.

            def get_form(self)-----isse nhi ayengi 

      2nd method se aajyengi..

            Models se form bna ke usme class lgade attrs ke through

                  widgets = {'name':forms.TextInput(attrs={'class':'mytext'})}

----------------------------------------------------------------------------------------------------------------

            ----------------> gs-105 Editing View- DeleteView <-------------------

      In Django, DeleteView is a class-based view that provides an easy way to display a confirmation page and 
      delete an object. It is commonly used for deleting instances of a model from a database. Here are the 
      attributes and methods of the DeleteView class along with a brief explanation of each:

Attributes:

model (optional):
      The model to be deleted. If not provided, you need to override the get_queryset method.
      
template_name (optional):
      The name of the template to be used for rendering the delete confirmation page.
      
success_url (optional):
      The URL to redirect to after the object is successfully deleted. If not provided, the get_success_url method must be overridden.
      
context_object_name (optional):
      The name of the variable to use in the template context to represent the object being deleted.

pk_url_kwarg (optional):
      The name of the URL pattern keyword argument that contains the primary key value of the object to be deleted.


                        ------------------------------>  Methods: <-------------------------------
**get(self, request, *args, kwargs):
      Handles GET requests and renders the confirmation page.

**post(self, request, *args, kwargs):
      Handles POST requests and performs the actual deletion of the object.
            
**delete(self, request, *args, kwargs):
      Deletes the object and returns an HTTP response.
      
get_object(self, queryset=None):
      Retrieves the object to be deleted. By default, it uses the primary key from the URL to fetch the object.
      
get_queryset(self):
      Returns the queryset of objects that can be deleted. By default, it uses the model attribute or the queryset attribute if provided.
      
**get_context_data(self, kwargs):
      Adds additional data to the template context. By default, it includes the object being deleted.
      
get_success_url(self):
      Returns the URL to redirect to after a successful deletion. By default, it uses the success_url attribute.


                  ---------------------------> Practical Approach <-------------------------

      from typing import Any
      from django.shortcuts import render
      from .models import Student
      from django.views.generic import CreateView,TemplateView,UpdateView,ListView,DeleteView
      from django import forms

      # Create your views here.
      class StudentCreate(CreateView):
            model = Student
            template_name = 'school/user.html'
            success_url = '/success/'
            fields = [field.name for field in Student._meta.fields]
            # context_object_name = 'stu'       #not working...

            def get_form(self):
                  form = super().get_form()
                  form.fields['name'].widget = forms.TextInput(attrs={'class':'mytext'})
                  form.fields['password'].widget = forms.PasswordInput(attrs={'class':'mypass'})
                  return form
            
            def get_context_data(self, **kwargs):
                  return super().get_context_data(**kwargs)
      
      class StudentUpdate(UpdateView):
            model = Student
            fields = [field.name for field in Student._meta.fields]
            # default template name = school/student_form.html
            template_name = 'school/update.html'
            success_url = '/updated/'

            def get_form(self):
                  form = super().get_form()
                  form.fields['name'].widget = forms.TextInput(attrs={'class':'mytext'})
                  form.fields['password'].widget = forms.PasswordInput(render_value=True,attrs={'class':'mypass'})
                  return form

      class updated(TemplateView):
            pass


      class Success(TemplateView):
            model = Student
            template_name = 'school/success.html'

            def get_context_data(self, **kwargs):
                  context = super().get_context_data(**kwargs)
                  context['all'] = self.model.objects.all()
                  return context


      class Allstudents(ListView):
            model = Student
            template_name = 'school/allstudent.html'
            context_object_name = 'students'

      class StudentDelete(DeleteView):
            model = Student                       # StudentDelete is missing a QuerySet. Define StudentDelete.model, StudentDelete.queryset, or override StudentDelete.get_queryset().
            template_name = 'school/delete.html' # default Template_name = school/student_confirm_delete.html
            success_url = '/deletesuccess/'
            # context_object_name = 'user'          # default context_object_name = 'student'



      class StudentConfirm(TemplateView):
            model = Student
            template_name = 'school/allstudent.html'            

    
------------------------------------------------------------------------------------------------------------------


            ----------------------> gs106 - Authentication Views with Function Based Views <--------------------

      
      In Django, you can handle authentication views using function-based views by utilizing the built-in views 
      provided by `django.contrib.auth.views`. These views handle common authentication tasks like login, logout, 
      and password reset. Here's an example demonstrating how to use function-based views for authentication in 
      Django:

-------------> Example

      from django.urls import path
      from django.contrib.auth import views as auth_views
      from django.shortcuts import render, redirect

      # Custom view for a protected resource
      def protected_view(request):
            if request.user.is_authenticated:
                  return render(request, 'protected.html')
            else:
                  return redirect('login')

      urlpatterns = [
            path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),
            path('logout/', auth_views.LogoutView.as_view(next_page='login'), name='logout'),
            path('password_reset/', auth_views.PasswordResetView.as_view(template_name='password_reset.html'), name='password_reset'),
            path('password_reset/done/', auth_views.PasswordResetDoneView.as_view(template_name='password_reset_done.html'), name='password_reset_done'),
            path('reset/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(template_name='password_reset_confirm.html'), name='password_reset_confirm'),
            path('reset/done/', auth_views.PasswordResetCompleteView.as_view(template_name='password_reset_complete.html'), name='password_reset_complete'),
            path('protected/', protected_view, name='protected_view'),
      ]


In this example:

- The `auth_views.LoginView` is used for handling the login functionality.
- The `auth_views.LogoutView` is used for handling the logout functionality.
- The `auth_views.PasswordResetView`, `auth_views.PasswordResetDoneView`, `auth_views.PasswordResetConfirmView`, 
      and `auth_views.PasswordResetCompleteView` are used for handling password reset functionality.
- A custom `protected_view` is created to demonstrate a protected resource that requires authentication.

                  
                  
                  -------------------------> Practical Approach <---------------------

      
      
itne sare humko authentication ke andar methods mil jaate h...
      admin/
      accounts/ login/ [name='login']
      accounts/ logout/ [name='logout']
      accounts/ password_change/ [name='password_change']
      accounts/ password_change/done/ [name='password_change_done']
      accounts/ password_reset/ [name='password_reset']
      accounts/ password_reset/done/ [name='password_reset_done']
      accounts/ reset/<uidb64>/<token>/ [name='password_reset_confirm']
      accounts/ reset/done/ [name='password_reset_complete']
      profile/ [name='profile']


                        ------------------------> Steps <--------------------------

Step 1. add this is urls.py 

            from django.urls import path,include
            from . import views

            urlpatterns = [
                  path('accounts/',include('django.contrib.auth.urls')),
                  path('profile/',views.profile,name='profile'),
            ]


Step 2. Add login page template so that we can render it.
            humko login.html , registration ke ander chahiye... tabhi kaam krega.
                  # default me humare 'form' me loginform rehta h.

            http://127.0.0.1:8000/accounts/login/                 -----> defalut template for login page --registration/login.html

      Login hote hi humko profile ka page nhi hone ka error dega ----> http://127.0.0.1:8000/accounts/profile/

Step 3. Create Profile Page so that we can move ther after login..
                  ----> link --- http://127.0.0.1:8000/accounts/profile/ 
                  ---> Views.py
                        from django.shortcuts import render

                        # Create your views here.
                        def profile(request):
                              return render(request,'registration/profile.html')

Step 4. Want to reset your password?
                  ----> link ---- http://127.0.0.1:8000/accounts/password_reset/

            This will send the Email to your registerd Email address. For this we have to add 1 line of code in 
            settings.py...
  
            EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


      This will receive on terminal as we are in developing phase..

            Content-Type: text/plain; charset="utf-8"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 8bit
            Subject: Password reset on 127.0.0.1:8000
            From: webmaster@localhost
            To: harshsahu@gmail.com
            Date: Sun, 10 Dec 2023 10:17:14 -0000
            Message-ID: <170220343494.5744.10422528787436311209@LAPTOP-GNG3OKGT>


            You're receiving this email because you requested a password reset for your user account at 127.0.0.1:8000.

            Please go to the following page and choose a new password:

            http://127.0.0.1:8000/accounts/reset/Mg/bz016q-a9eb9f3833ead42387fcd8b2a698c23f/

            Your username, in case you’ve forgotten: harsh

            Thanks for using our site!

            The 127.0.0.1:8000 team

Step 5. Logout from Profile Page...
                  ----> link --- http://127.0.0.1:8000/accounts/logout/ 

step 6. If we want to redirect any other page rather than profile page after login, we can do it by adding this code 
            in settings.py file

            LOGIN_REDIRECT_URL = '/'



------------------------------------------------------------------------------------------------------------------

                  -------------------> gs107 login_required Decorator <------------------

      here we learned about Decorators..

1. @login_required           --------------   from django.contrib.auth.decorators import login_required

2. @staff_member_required    -------------- from django.contrib.admin.views.decorators import staff_member_required

3. permission_required       --------------  from django.contrib.auth.decorators import permission_required

4. @user_passes_test         --------------     from django.contrib.auth.decorators import user_passes_test


--------------views.py

            from django.shortcuts import render
            from django.contrib.auth.decorators import login_required,user_passes_test
            from django.contrib.admin.views.decorators import staff_member_required

            # Create your views here.
            # @login_required
            def home(request):
                  return render(request,'registration/home.html')

            @login_required
            def profile(request):
                  return render(request,'registration/profile.html')

            # @staff_member_required

            def is_staff_member(user):
                  return user.is_staff

            @user_passes_test(is_staff_member,login_url='/normal_about/')       #here we check that if user is staffmember only then go to that function. 
            def about(request):
                  return render(request,'registration/about.html')        #isme agar humara login nhi h to admin login pr redirect krega.


            def normal_about(request):
                  return render(request,'registration/normal_about.html')

-------------> urls.py 

                  from django.urls import path
                  from . import views

                  urlpatterns = [
                        path('',views.home,name='home'),
                        path('profile/',views.profile,name='profile'),
                        path('about/',views.about,name='about'),
                        path('normal_about/',views.normal_about,name='normal')
                  ]


------------------------------------------------------------------------------------------------------------------

                  ------------> gs108 Class based Authentication Views  with Decorators <-------------

      we can use decorators in class based views through 3 ways..

1.    Decorating in urls.py or URLconf:
                  Just add login_required in urls.py...

      --------------> Urls.py

                  from django.urls import path
                  from . import views
                  from django.contrib.auth.decorators import login_required

                  urlpatterns = [
                        path('',views.home.as_view(),name='home'),
                        path('profile/',login_required(views.Profile.as_view()),name='profile'),
                  ]

2.    By converting Decorators to method Decorators
            First we need to import method decorators

                  from django.utils.decorators import method_decorator

                  
                  @method_decorator(login_required,name='dispatch')
                  class Contact(TemplateView):
                        template_name = 'registration/contact.html'

      
      ------------------> Views.py

                  from django.shortcuts import render,HttpResponse
                  from django.views.generic import TemplateView,ListView
                  from django.contrib.auth.models import User
                  from django.utils.decorators import method_decorator
                  from django.contrib.auth.decorators import login_required


                  # Create your views here.
                  # def home(request):
                  #     return HttpResponse('this is home page')

                  class home(TemplateView):
                        template_name = 'registration/home.html'


                  class Profile(TemplateView):
                        model = User
                        template_name = 'registration/profile.html'

                        def get_context_data(self, **kwargs):
                              context = super().get_context_data(**kwargs)
                              context["all_user"] = self.model.objects.all() 
                              return context
                  
                  class About(TemplateView):
                        template_name = 'registration/about.html'

                  @method_decorator(login_required,name='dispatch')
                  class Contact(TemplateView):
                        template_name = 'registration/contact.html'


      ---------------------------> Urls.py

                  from django.urls import path
                  from . import views
                  from django.contrib.auth.decorators import login_required
                  from django.contrib.admin.views.decorators import staff_member_required

                  urlpatterns = [
                        path('',views.home.as_view(),name='home'),
                        path('profile/',login_required(views.Profile.as_view()),name='profile'),
                        path('about/',login_required(views.About.as_view()),name='about'),
                        # path('about/',staff_member_required(views.About.as_view()),name='about'),
                        path('contact/',views.Contact.as_view(),name='contact')
                  ]

------------------------------------------------------------------------------------------------------------------

            ---------------> gs109 - Customize Authentication Views <-----------------

      
1. LoginView : 

      If you want to customize the `LoginView` in Django further by adding your own logic or modifying its 
      behavior, you can create a subclass of `LoginView` and override the relevant methods.
      Here's an example:

            1. **Create a custom view:**

                  
                  from django.contrib.auth.views import LoginView
                  from django.shortcuts import redirect

                  class CustomLoginView(LoginView):
                        template_name = 'custom_login.html'  # Customize the template name if needed

                        def form_valid(self, form):
                        # Your custom logic when the form is valid
                        # For example, logging additional information

                        # Call the parent class method to perform the default behavior
                        response = super().form_valid(form)

                        # Add your custom logic here, e.g., redirect to a specific page
                        return redirect('my_custom_redirect')

                        # Add more custom methods or override other methods as needed


            2. **Update your `urls.py` to use the custom view:**

                  
                  from django.urls import path
                  from .views import CustomLoginView

                  urlpatterns = [
                        # Other URL patterns
                        path('login/', CustomLoginView.as_view(), name='login'),
                  ]


            3. **Create a custom template:**

                  Create a custom template for your login view. Create a new HTML file (e.g., `custom_login.html`) 
                  in your 
                  templates folder.

                  Now, your `CustomLoginView` includes additional logic in the `form_valid` method, and you have a 
                  custom template for the login view. Customize the view and template according to your specific 
                  requirements.

      ------------------------------->    Attributes of LoginView:      <-----------------------------------

      The `LoginView` in Django is based on Django's `FormView` and inherits many of its attributes. Below are some of the key attributes you might find useful when customizing the `LoginView`:

1. **`template_name`:**
   - *Description:* Specifies the name of the template to be used for rendering the login form.
   - *Default:* `'registration/login.html'`

2. **`form_class`:**
   - *Description:* The form class that the view should use for handling authentication.
   - *Default:* `AuthenticationForm`

3. **`redirect_authenticated_user`:**
   - *Description:* If `True`, redirects authenticated users to the URL specified in the `success_url`.
   - *Default:* `False`

4. **`redirect_field_name`:**
   - *Description:* The name of the GET parameter to use for the redirect URL.
   - *Default:* `'next'`

5. **`success_url`:**
   - *Description:* The URL to redirect to after a successful login.
   - *Default:* `None`

6. **`extra_context`:**
   - *Description:* A dictionary of extra context data to pass to the template.
   - *Default:* `None`

7. **`initial`:**
   - *Description:* A dictionary of initial data to populate the login form.
   - *Default:* `None`

8. **`authentication_form`:**
   - *Description:* The form class to use for authentication.
   - *Default:* `None` (which means using the default `AuthenticationForm`)

9. **`context_instance`:**
   - *Description:* Deprecated since Django 1.10 and removed in Django 2.0.

10. **`extra_context`:**
    - *Description:* A dictionary of extra context data to pass to the template.
    - *Default:* `None`

These attributes can be customized in your custom login view by overriding them or providing new values.
For example, in your custom login view class, you might define:


                        class CustomLoginView(LoginView):
                              template_name = 'custom_login.html'
                              form_class = CustomAuthenticationForm  # Your custom authentication form class
                              redirect_authenticated_user = True
                              success_url = '/custom-success-url/'
                              extra_context = {'custom_variable': 'Custom Value'}

                  -----------------------> Methods in LoginView <---------------------

      from django.contrib.auth.views import LoginView
      from django.shortcuts import redirect, render

      class CustomLoginView(LoginView):
            template_name = 'custom_login.html'  # Customize the template name if needed

            def form_valid(self, form):
                  # Custom logic when the form is valid
                  # For example, logging additional information

                  # Call the parent class method to perform the default behavior
                  response = super().form_valid(form)

                  # Add your custom logic here, e.g., redirect to a specific page
                  return redirect('my_custom_redirect')

            def form_invalid(self, form):
                  # Custom logic when the form is invalid
                  # For example, logging additional information

                  # Call the parent class method to perform the default behavior
                  response = super().form_invalid(form)

                  # Add your custom logic here, e.g., render a custom template
                  return render(self.request, 'custom_invalid_login.html', {'form': form})

            def get_context_data(self, **kwargs):
                  # Add custom context data to be used in the template
                  context = super().get_context_data(**kwargs)
                  context['custom_variable'] = 'Custom Value'
                  return context

            ---------------------> Context Passed in LoginView By Default <-------------------

      4 context variables passed..

1. form :- A form object representing the authenticationForm.

2. next: The URL to redirect after successful login.

3. site: The current site,according to the SITE_ID settings.If you dont have the site framework installed, this 
            will be set to an instance of requestSite,which derives the site name and domain form the current HttpRequest.

4. site name: An alias for site.name. If you don't have the site framework installed, this will be set to the 
            value of request.META['SERVER_NAME'].

            Custom Template:-
                  path('login/", views. LoginView.as_view(template_name='myapp/login.html'), name='login')
------------------------------------------------------------------------------------------------------------------

2.   LogoutView: -


                  django.contrib.auth.views.Logout View
                  template_name = 'registration/logged_out.html'
                  path('logout/', views. LogoutView.as_view(), name='logout')

      logged_out.html template is already available and used by admin logout template file.
      You can create your own custom logout template by defining template_name attribute.


      Default Template: registration/logged_out.html


Context Variables:-This template gets passed three template context variables:

      title: The string "Logged out", localized.

      site: The current Site, according to the SITE_ID setting. If you don't have the site framework 
            installed, this will be set to an instance of RequestSite, which derives the site name and domain 
            from the current HttpRequest.

      site name: An alias for site.name. If you don't have the site framework installed, this will be set to the 
      value of request.META['SERVER_NAME'].

      Custom Template:-
            path('logout/', views.LogoutView.as_view(template_name='myapp/logout.html'), name='logout')

Attributes:


1.    next_page: The URL to redirect to after logout. Defaults to settings.LOGOUT_REDIRECT_URL.

2.    template_name: The full name of a template to display after logging the user out. Defaults to 
      registration/logged_out.html.

3.    redirect_field_name: The name of a GET field containing the URL to redirect to after log out. Defaults to 
      next. Overrides the next page URL if the given GET parameter is passed.

4.    extra_context: A dictionary of context data that will be added to the default context data passed to the 
      template.

-------------------------------------------------------------------------------------------------------------------

3.    PasswordChangeView: here we get form as context variable for form of password change.

      Import from:django.contrib.auth.views.PasswordChangeView

      default template:template_name = 'registration/password_change_form.html'
                        registration/password_change_form.html template is already available and used by admin 
                        change password template file.

      path: path('password_change/", views.PasswordChangeView.as_view(), name='password_change'),


            Attributes:
                  1.    template_name:
                        Description: Specifies the name of the template to be used for rendering the password 
                                     change form.
                        Default: 'registration/password_change_form.html'
                        
                  2.    form_class:
                        Description: The form class that the view should use for handling password changes.
                        Default: PasswordChangeForm
                        
                  3.    success_url:
                        Description: The URL to redirect to after a successful password change.
                        Default: reverse_lazy('password_change_done')
                        
                  4.    post_change_redirect:
                        Description: Deprecated since Django 3.1, use success_url instead.
                        
                  5.    extra_context:
                        Description: A dictionary of extra context data to pass to the template.
                        Default: None
                        
                  6.    extra_context_callback:
                        Description: A callable that takes a form and returns a dictionary of extra context data.
                        Default: None


------------------------------------------------------------------------------------------------------------------

4-    PasswordChangeDoneView: After successful password change this tempalte appears.
            Import from:      django.contrib.auth.views.PasswordChangeDoneView

            default template: template_name = 'registration/password_change_done.html'
                              registration/password_change_done.html template is already available and used by 
                              admin password change done template file.

            path: path('password_change/done/", views.PasswordChangeDoneView.as_view(), name='password_change_done'),

            custom template:  path('password_change/',views.PasswordChangeDone.as_view(template_name='myapp/change.html',name='password'))

      Attributes:

            template_name: The full name of a template to use. Defaults to registration/password_change_done.html 
                              if not supplied.

            extra_context: A dictionary of context data that will be added to the default context data passed to 
                              the template.

------------------------------------------------------------------------------------------------------------------

5-    PasswordResetView:
            Import From:    django.contrib.auth.views.PasswordResetView

            template_name = 'registration/password_reset_form.html'

            path('password_reset/", views.PasswordResetView.as_view(), name='password_reset'),

            registration/password_reset_form.html template is already available and used by admin password reset 
                  template file.

            You can create your own custom password reset template by defining template_name attribute.

      This Email template gets passed following email template context variables:

      email: An alias for user.email
            user: The current User, according to the email form field. Only active users are able to reset their 
                  passwords (User.is_active is True).

            site name: An alias for site.name. If you don't have the site framework installed, this will be set to 
                        the value of request.META['SERVER_NAME']. For more on sites, see The "sites" framework.

            • domain: An alias for site.domain. If you don't have the site framework installed, this will be set 
                        to the value of request.get_host().

            • protocol: http or https

            • uid: The user's primary key encoded in base 64.

⚫ token: Token to check that the reset link is valid.

Attributes:-

            template_name: The full name of a template to use for displaying the password reset form. Defaults to 
                              registration/password_reset_form.html if not supplied.

            form_class: Form that will be used to get the email of the user to reset the password for. Defaults 
                              to PasswordResetForm.

            email_template_name: The full name of a template to use for generating the email with the reset 
                                    password link. Defaults to registration/password_reset_email.html if not supplied.

            subject_template_name: The full name of a template to use for the subject of the email with the reset 
                                    password link. Defaults to registration/password_reset_subject.txt if not 
                                    supplied.

            token_generator: Instance of the class to check the one time link. This will default to 
                              default_token_generator, it's an instance of django.contrib.auth.tokens.PasswordReset TokenGenerator.

            success_url: The URL to redirect to after a successful password reset request. 
                              Defaults to 'password_reset_done'.

            from_email: A valid email address. By default Django uses the DEFAULT_FROM_EMAIL.

            extra_context: A dictionary of context data that will be added to the default context data passed 
                              to the template.

            html_email_template_name: The full name of a template to use for generating a text/html multipart 
                                          email with the password reset link. By default, HTML email is not sent.

            extra_email_context: A dictionary of context data that will be available in the email template. It can 
                                    be used to override default template context values listed below e.g. domain.


-------------------------------------------------------------------------------------------------------------------

6-    PasswordResetDoneView: The page shown after a user has been emailed a link to reset their password. 
                              This view is called by default if the PasswordReset View doesn't have an explicit 
                              success_url URL set.
                              If the email address provided does not exist in the system, the user is inactive, 
                              or has an unusable password, the user will still be redirected to this view but no 
                              email will be sent.

            Import from:django.contrib.auth.views.PasswordResetDoneView

            template_name = 'registration/password_reset_done.html'

            path('password_reset/done/", views. PasswordResetDoneView.as_view(), name='password_reset_done'),

            registration/password_reset_done.html template is already available and used by admin password

            reset done template file.

-----------------------------------------------------------------------------------------------------------------

7-    PasswordResetConfirmView:

      Attributes:-

            template_name: The full name of a template to display the confirm password view. Default value is 
                              registration/password_reset_confirm.html.

            token_generator: Instance of the class to check the password. This will default to 
                              default_token_generator, it's an instance of django.contrib.auth.tokens.PasswordReset 
                              TokenGenerator.

            post_reset_login: A boolean indicating if the user should be automatically authenticated after a

            successful password reset. Defaults to False. post_reset_login_backend: A dotted path to the 
                                          authentication backend to use when authenticating a user if 
                                          post_reset_login is True. Required only if you have multiple 
                                          AUTHENTICATION_BACKENDS configured. Defaults to None.

            form_class: Form that will be used to set the password. Defaults to SetPasswordForm.

            success_url: URL to redirect after the password reset done. Defaults to 'password_reset_complete'.

            extra_context: A dictionary of context data that will be added to the default context data passed 
                              to the template.

            reset_url_token: Token Parameter displayed as a component of password reset URLs.Default to 
                              'set-password'


------------------------------------------------------------------------------------------------------------------

8-    PasswordResetCompleteView: It presents a view which informs the user that the password has been successfully 
                                    changed.

            Import from: django.contrib.auth.views.PasswordResetComplete View

            template_name = 'registration/password_reset_complete.html'

            path('reset/done/", views. PasswordResetCompleteView.as_view(), name='password_reset_complete'),

            registration/password_reset_complete.html template is already available and used as admin password 
                  reset complete template file.


------------------------------------------------------------------------------------------------------------------

                  ---------------------------> Built in Forms <--------------------------------


• AdminPasswordChangeForm - A form used in the admin interface to change a user's password. It takes the user as 
                              the first positional argument.

• AuthenticationForm - A form for logging a user in. It takes request as its first positional argument, which is 
                        stored on the form instance for use by sub-classes.

• PasswordChangeForm - A form for allowing a user to change their password.

• PasswordResetForm - A form for generating and emailing a one-time use link to reset a user's password.

• SetPasswordForm - A form that lets a user change their password without entering the old password.

• UserChangeForm - A form used in the admin interface to change a user's information and permissions.

• UserCreationForm - A ModelForm for creating a new user.



            -------------------------------> Practical Approach <--------------------------------

1. Customizing LoginView:

----------->To change default template

      ---------->first we have to import views from django.contrib.auth in Urls.py....

            from django.urls import path
            from . import views
            from django.contrib.auth import views as auth_views

            urlpatterns = [
                  path('profile/',views.profile,name='profile'),
                  path('login/',auth_views.LoginView.as_view(template_name='myapp/login.html'),name='login'),     #now it will work perfectlly
            ]

----------> Now change the default after login location.

            Add LOGIN_REDIRECT_URL = '/dashboard/' in settings.py
            then add url for this.
            from django.views.generic import TemplateView

            path('dashboard/',TemplateView.as_view(template_name='myapp/dash.html')),

----------> Now change Logout Default setting

            # path('logout/',auth_views.LogoutView.as_view(),name='logout'),

            here we use inheritance of LogoutView
            ----> Views.py
                        class CustomLogoutView(LogoutView):         #here we inherit LogoutView
                              model = User
                              template_name = 'myapp/logout.html'
                              success_url='myapp/login.html'

                              def get_context_data(self, **kwargs):
                                    context= super().get_context_data(**kwargs)
                                    context['title'] = 'Bahar a gye h'
                                    context['site'] = 'Harsh ki Site h Chacha'
                                    context['multiple'] = {'name':self.model.objects.get(pk=2),'class':'btech'} #multiple context passed
                                    return context

            -----> Urls.py

                        path('logout/',views.CustomLogoutView.as_view(),name='logout'),

-----------> Now passwordChangeView customization...

            By default it is redirecting to ----> registration/password_change_form.html.

            we will override it by two methods 

                  1. By inherit the PasswordChangeView
                        class CustomizePassword(PasswordChangeView):
                              template_name = 'myapp/passchange.html'
                              success_url = 'myapp/passsuccess.html'      # otherwise defaut template pe redirect krdega..registration/password_change_done.html, name='password_change_done'
                              # success_url = reverse_lazy('password_change_done')     #isme name dala jata h reverse_lazy

                              def get_context_data(self,*args,**kwargs):
                                    context = super().get_context_data(**kwargs)
                                    context['pass'] = 'ha bhai aa gya swad.'
                                    return context
                        
                        Now to show the form in own template add this ...
                        ----> html File

                                    <form action="" method="post">
                                          {% csrf_token %}
                                          {% comment %} {{form.as_p}} {% endcomment %}
                                          {{form.old_password.label_tag}}{{form.old_password}} <br>
                                          {{form.new_password1.label_tag}}{{form.new_password1}} <br>
                                          {{form.new_password2.label_tag}}{{form.new_password2}} <br>
                                          <input type="submit" value="Change">
                                    </form>


                  2. By providing template name in its urls.
                        path('change_password/',auth_views.PasswordChangeView.as_view(template_name='myapp/passchange.html'),name='passchange')

-----------> Now how to add class in Form of passwordchangeView or others

                  class CustomizePassword(PasswordChangeView):
                        template_name = 'myapp/passchange.html'
                        success_url = 'myapp/passsuccess.html'      # otherwise defaut template pe redirect krdega..registration/password_change_done.html, name='password_change_done'
                        # success_url = reverse_lazy('password_change_done')     #isme name dala jata h reverse_lazy

                        def get_context_data(self,*args,**kwargs):
                              context = super().get_context_data(**kwargs)
                              context['pass'] = 'ha bhai aa gya swad.'
                              return context
                        
                        def get_form(self, form_class=None):        # here as we not provided any custom form we specified form_class = None.
                              form = super().get_form(form_class)
                              form.fields['old_password'].widget = forms.TextInput(attrs={'class':'test'})
                              # form.labels['old_password'].label = self.label(attrs={'class':'red'})
                              return form

-----------------------------------------------------------------------------------------------------------------

                              ------------> Auth settings <--------------

1-    Authentication Backends:
            Django supports multiple authentication backends, allowing you to use different methods to 
            authenticate users. The AUTHENTICATION_BACKENDS setting in settings.py specifies a list of 
            authentication backends to use.

                  AUTHENTICATION_BACKENDS = [
                        'django.contrib.auth.backends.ModelBackend',
                        # Add other backends as needed
                  ]

2-    User Model:
            Django allows you to use a custom user model by specifying it in the AUTH_USER_MODEL setting. 
            This is useful when you need to extend the default user model with additional fields or functionality.
            
                  AUTH_USER_MODEL = 'yourapp.CustomUser'

3-    Login and Logout URLs:
            You can specify the URLs to redirect to after a successful login or logout using the LOGIN_URL and 
            LOGOUT_REDIRECT_URL settings.

                 
                  LOGIN_URL = 'login'
                  LOGOUT_REDIRECT_URL = 'home'


4-    Password Validation:
            Django provides settings to configure password validation requirements. You can customize these 
            settings to enforce strong passwords.


                        # Example settings
                        AUTH_PASSWORD_VALIDATORS = [
                              # ...
                              {
                                    'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
                                    'OPTIONS': {
                                          'min_length': 8,
                                    }
                              },
                              # ...
                        ]
5-    Session Timeout:
            Configure the session timeout using the SESSION_COOKIE_AGE setting, which represents the age of session cookies in seconds.

            
                  SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds

6-    Two-Factor Authentication (2FA):
            If you want to enable two-factor authentication, you can use third-party packages like django-otp 
            or django-rest-framework-simplejwt that provide support for 2FA.

            
                  # Example using django-rest-framework-simplejwt for JWT tokens with 2FA
                  SIMPLE_JWT = {
                  'AUTH_HEADER_TYPES': ('Bearer',),
                  'AUTH_TOKEN_CLASSES': ('yourapp.tokens.TwoFactorJSONWebToken',),
                  # ...
                  }

-----------------------------------------------------------------------------------------------------------------

                  --------------> Database Configuration in Django <----------------

1.    Sqlite3: Default
            open settings.py

            DATABASE = {
                  'default':{
                        'ENGINE': 'django.db.backends.sqlite3',
                        'NAME': os.path.join(BASE_DIR,'db.sqlite3'),
                  }
            }

2.    Mysql Configuration:

            Install mysql in your system.
            You have to create your own database and user to config MySql with Django.
            open settings.py

            DATABASE = {
                  'default':{
                        'ENGINE': 'django.db.backends.mysql',
                        'NAME': 'database_name',
                        'USER': 'User_name',
                        'PASSWORD': 'Password',
                        'HOST': 'localhost',    #optional
                        'Port': port_number          #optional
                  }
            }

3.    Oracle Configuration:

            DATABASES = {
                  'default': {
                        'ENGINE': 'django.db.backends.oracle',
                        'NAME': 'your_oracle_db_name',
                        'USER': 'your_oracle_username',
                        'PASSWORD': 'your_oracle_password',
                        'HOST': 'your_oracle_host',  # Set to the Oracle database server address
                        'PORT': 'your_oracle_port',  # Set to the Oracle database server port
                  }
                  }

4.    Postgres Configuration: same as all others.

------------------------------------------------------------------------------------------------------------------

                        ----------> gs110 Pagination in Django <------------

      1. Function based pagination
      2. Class based pagination

                        ----------> Function Based Pagination <-------------

      Certainly! In Django, the pagination system is built on the `Paginator` class and associated attributes 
      and methods. Here's a breakdown of the key attributes and methods you might encounter when working with 
      Django pagination:

                  from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
                  from django.shortcuts import render
                  from .models import YourModel

                  def your_view(request):
                        queryset = YourModel.objects.all()
                        items_per_page = 10

                        paginator = Paginator(queryset, items_per_page)
                        page = request.GET.get('page')

                        try:
                              items = paginator.page(page)
                        except PageNotAnInteger:
                              # If the page parameter is not an integer, show the first page
                              items = paginator.page(1)
                        except EmptyPage:
                              # If the page is out of range, deliver the last page of results
                              items = paginator.page(paginator.num_pages)

                        return render(request, 'your_template.html', {'items': items})


Paginator Class:

      Attributes:

            1. **`object_list`**: The list of items to be paginated.

            2. **`per_page`**: The number of items to display per page.

            3. **`count`**: The total number of items across all pages.

            4. **`num_pages`**: The total number of pages.

            5. **`page_range`**: A range of pages suitable for display (useful for rendering page navigation).

      Methods:

            1. **`__init__(object_list, per_page)`**: Initializes the paginator with the given list of objects and the number of items per page.

            2. **`page(number)`**: Returns a `Page` object for the given page number.

Page Class:

      Attributes:

            1. **`object_list`**: The list of items on the current page.

            2. **`number`**: The current page number.

            3. **`paginator`**: A reference to the associated `Paginator` object.

            4. **`has_previous`**: True if there's a previous page.

            5. **`has_next`**: True if there's a next page.

            6. **`previous_page_number`**: The page number for the previous page.

            7. **`next_page_number`**: The page number for the next page.

            8. **`start_index`**: The 1-based index of the first item on the current page.

            9. **`end_index`**: The 1-based index of the last item on the current page.

      Methods:

            1. **`has_other_pages()`**: Returns True if there are pages other than the current one.

            2. **`next()`**: Returns a `Page` object for the next page.

            3. **`previous()`**: Returns a `Page` object for the previous page.

Using Paginator in Views:

            1. **`Paginator(queryset, per_page)`**: Create a paginator object.

            2. **`paginator.page(number)`**: Get a specific page using the page number.

            3. **`page_obj`**: The page object for the current page (used in templates).

Using Paginator in Templates:

            1. **`items`**: The variable containing the items on the current page.

            2. **`items.paginator`**: Access the paginator from within the template.

            3. **`items.number`**: The current page number. (used)

            4. **`items.paginator.num_pages`**: The total number of pages.  (used)

            5. **`items.has_previous`**, **`items.has_next`**: Booleans indicating the presence of previous or next pages. (used)

            6. **`items.previous_page_number`**, **`items.next_page_number`**: Page numbers for the previous and next pages.

            7. **`items.start_index`**, **`items.end_index`**: Index of the first and last items on the current page. (used)

                  ----------------------------> Practical Approach <------------------------------

--------------> views.py

                  from django.shortcuts import render
                  from .models import Post
                  from django.core.paginator import Paginator

                  # Create your views here.
                  def home(request):
                        all_post = Post.objects.all().order_by('name')     #unordered object_list: <class 'blog.models.Post'> QuerySet. isko solve krne ke order dena hoga koi bhi..
                        items_per_page = 3
                        paginator = Paginator(all_post,items_per_page)
                        page_number = request.GET.get('page')        #fetching page number from created page.
                        page_obj = paginator.get_page(page_number)      #isse hum uss page per pahuch jayege
                        return render(request,'blog/home.html',{'posts':page_obj})

      -------> by this code we get only 3 posts in our page but there will be no pageing links show in page so for 
                  this we have to do some changes in template..


---------------> template

                  <h1>Our all posts</h1>
                        {% comment %} {% for post in posts %} {% endcomment %}
                        {% for post in posts %}
                              <h2>{{post.title}}</h2>
                              <p>{{post.desc}}</p>
                              <small>{{post.publish_date}}</small>
                        {% endfor %}
                        
                        <div>
                        <h3>starting item on currnet page:-{{posts.start_index}}</h3> <br>
                        {{posts.number}} out of {{posts.paginator.num_pages}}<br>
                        <span>
                              {% if posts.has_previous %}     <!--isme humare pages honge 1-4 -->
                                    <a href="?page={{posts.previous_page_number}}">Previous</a>
                              {% endif %}
                              &nbsp;
                              {% if posts.has_next %}
                                    <a href="?page={{posts.next_page_number}}">Next</a>
                              {% endif %}
                        </span>
                        </div>

-----------> Now we talk about orphans in pagination.

                  In the context of Django pagination, the term "orphans" refers to the number of items that are 
                  left on the last page if it contains fewer items than the specified number per page. In other 
                  words, if the total number of items is not perfectly divisible by the number of items per page, 
                  there may be a few remaining items that don't form a complete page.

                  The orphans attribute in Django's Paginator class allows you to specify how many items are 
                  acceptable to be left on the last page without being moved to a new page. It helps in situations
                  where having a few items on the last page doesn't significantly affect the overall user 
                  experience.

                              from django.core.paginator import Paginator

                              # Example usage
                              items_per_page = 10
                              paginator = Paginator(queryset, items_per_page, orphans=5)

--------------------> Practical Approach

                        def home(request):
                              all_post = Post.objects.all().order_by('title')             #without order ke ye 'unordered object_list: <class 'blog.models.Post'> QuerySet' error dega.
                              items_per_page = 3
                              paginator = Paginator(all_post,items_per_page,orphans = 2)      #isse humare last ke 2 posts bhi uske previous post page me adjust ho jayega.
                              page_number = request.GET.get('page')        #fetching page number from created page.
                              page_obj = paginator.get_page(page_number)      #isse hum uss page per pahuch jayege
                              print(paginator)
                              print()
                              print(page_number)
                              print()
                              print(page_obj)
                              return render(request,'blog/home.html',{'posts':page_obj})


-------------------> complete code in gs101...


-----------------------------------------------------------------------------------------------------------------

                  ----------------> gs111 Class based pagination in Django <-------------

      In Django, you can implement pagination in class-based views using the `ListView` class, which is designed 
      to work with paginated lists of objects. Here's a step-by-step guide on how to use pagination in a 
      class-based view:


--------->models.py
                        from django.db import models

                        class YourModel(models.Model):
                              # Your model fields here
                              title = models.CharField(max_length=255)
                              content = models.TextField()

                              def __str__(self):
                                    return self.title


### 1. Create a ListView:

                  Use Django's `ListView` in your views to handle paginated lists. Update your `views.py`:

      ------>views.py
                  from django.views.generic import ListView
                  from .models import YourModel

                  class YourModelListView(ListView):
                  model = YourModel
                  template_name = 'your_model_list.html'
                  context_object_name = 'items'
                  paginate_by = 10  # Number of items per page
                  

### 2. Update URLs:

            Configure your URLs to use the `YourModelListView` class. For example, in your `urls.py`:

                  
      ----->urls.py
                  from django.urls import path
                  from .views import YourModelListView

                  urlpatterns = [
                  path('your-model-list/', YourModelListView.as_view(), name='your-model-list'),
                  # Other URL patterns as needed
                  ]
                  

### 3. Create a Template:

                  Create a template for rendering the paginated list. For example, in your 
                  `templates/your_app/your_model_list.html`:

<!-- your_model_list.html -->
{% for item in items %}
    {# Display your item data here #}
    {{ item.title }} - {{ item.content }}
{% endfor %}

<div class="pagination">
    <span class="step-links">
        {% if items.has_previous %}
            <a href="?page=1">&laquo; first</a>
            <a href="?page={{ items.previous_page_number }}">previous</a>
        {% endif %}

        <span class="current">
            Page {{ items.number }} of {{ items.paginator.num_pages }}.
        </span>

        {% if items.has_next %}
            <a href="?page={{ items.next_page_number }}">next</a>
            <a href="?page={{ items.paginator.num_pages }}">last &raquo;</a>
        {% endif %}
    </span>
</div>

                  --------------------------> Practical Approach <-----------------------------



      -----------> Views.py 

                        from typing import Any
                        from django.shortcuts import render
                        from .models import Post
                        from django.core.paginator import Paginator
                        from django.views.generic import ListView
                        from django.http import Http404


                        class Home(ListView):
                              model = Post
                              template_name = 'blog/home.html'
                              ordering = ['title']
                              paginate_by = 3         #btyega ki kitne aane chaiye 1 page me   ----- important
                              paginate_orphans = 2        #last ke 2 bhi uske previous page me aagye.

                              #isme problem h ki humare extra page number dalne pr 404error de rha h. usko sahi krne ke liye..
                              def get_context_data(self, **kwargs):
                                    try:
                                          return super(Home,self).get_context_data(**kwargs)
                                    except Http404:
                                          self.kwargs['page'] = 1
                                          return super(Home,self).get_context_data(**kwargs)


--------------------------------------------------------------------------------------------------------------------

                  -------------------> gs112 Blog Project based on Pagination <--------------------

      step 1: create model.py
                  from django.db import models

                  # Create your models here.
                  class Post(models.Model):
                        title = models.CharField(max_length=100)
                        desc = models.TextField(max_length=500)
                        publish_date = models.DateTimeField()

      step 2: Register it

      step 3: Views.py

                        from typing import Any
                        from django.shortcuts import render
                        from .models import Post
                        from django.core.paginator import Paginator
                        from django.views.generic import ListView,DetailView
                        from django.http import Http404


                        class Home(ListView):
                              model = Post
                              template_name = 'blog/home.html'
                              ordering = ['title']
                              paginate_by = 3         #btyega ki kitne aane chaiye 1 page me   ----- important
                              paginate_orphans = 2        #last ke 2 bhi uske previous page me aagye.

                              #isme problem h ki humare extra page number dalne pr 404error de rha h. usko sahi krne ke liye..
                              def get_context_data(self, **kwargs):
                                    try:
                                          return super(Home,self).get_context_data(**kwargs)
                                    except Http404:
                                          self.kwargs['page'] = 1
                                          return super(Home,self).get_context_data(**kwargs)


                        class PostDetailView(DetailView):
                              model = Post
                              template_name = 'blog/post.html'


      step 4: Urls.py

                        from django.urls import path
                        from . import views

                        urlpatterns = [
                              path('',views.Home.as_view(),name='home'),
                              path('post/<int:pk>/',views.PostDetailView.as_view(),name='detailpost'),
                        ]

